<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20181.18.0706.1237                               -->
<workbook source-build='2018.1.3 (20181.18.0706.1237)' source-platform='mac' version='18.1' xml:base='https://public.tableau.com' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <SortTagCleanup />
  </document-format-change-manifest>
  <repository-location id='BlockgroupEquityData' path='/workbooks' revision='1.0' />
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column caption='Indicator2 Parameter' datatype='string' name='[Indicator1 Parameter (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Median Household Income&quot;'>
        <calculation class='tableau' formula='&quot;Median Household Income&quot;' />
        <members>
          <member value='&quot;Median Household Income&quot;' />
          <member value='&quot;Percent POC&quot;' />
          <member value='&quot;Percent Rent&quot;' />
          <member value='&quot;Percent Food Stamps&quot;' />
          <member value='&quot;Percent Four Year College&quot;' />
          <member value='&quot;Population&quot;' />
          <member value='&quot;Dist Downtown&quot;' />
          <member value='&quot;Percent Asian&quot;' />
          <member value='&quot;Percent Black&quot;' />
          <member value='&quot;Percent White&quot;' />
          <member value='&quot;Per Capita Income&quot;' />
          <member value='&quot;Percent Own&quot;' />
          <member value='&quot;Sales Price&quot;' />
          <member value='&quot;Sales Volume&quot;' />
          <member value='&quot;Mobility Index&quot;' />
        </members>
      </column>
      <column caption='Indicator0 Parameter' datatype='string' name='[Indicator2 Parameter (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Median Household Income&quot;'>
        <calculation class='tableau' formula='&quot;Median Household Income&quot;' />
        <members>
          <member value='&quot;Median Household Income&quot;' />
          <member value='&quot;Percent POC&quot;' />
          <member value='&quot;Percent Rent&quot;' />
          <member value='&quot;Percent Food Stamps&quot;' />
          <member value='&quot;Percent Four Year College&quot;' />
          <member value='&quot;Population&quot;' />
          <member value='&quot;Dist Downtown&quot;' />
          <member value='&quot;Percent Asian&quot;' />
          <member value='&quot;Percent Black&quot;' />
          <member value='&quot;Percent White&quot;' />
          <member value='&quot;Per Capita Income&quot;' />
          <member value='&quot;Percent Own&quot;' />
          <member value='&quot;Sales Price&quot;' />
          <member value='&quot;Sales Volume&quot;' />
        </members>
      </column>
      <column caption='Indicator1 Parameter' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Mobility Index&quot;'>
        <calculation class='tableau' formula='&quot;Mobility Index&quot;' />
        <members>
          <member value='&quot;Median Household Income&quot;' />
          <member value='&quot;Percent POC&quot;' />
          <member value='&quot;Percent Rent&quot;' />
          <member value='&quot;Percent Food Stamps&quot;' />
          <member value='&quot;Percent Four Year College&quot;' />
          <member value='&quot;Population&quot;' />
          <member value='&quot;Dist Downtown&quot;' />
          <member value='&quot;Percent Asian&quot;' />
          <member value='&quot;Percent Black&quot;' />
          <member value='&quot;Percent White&quot;' />
          <member value='&quot;Per Capita Income&quot;' />
          <member value='&quot;Percent Own&quot;' />
          <member value='&quot;Sales Price&quot;' />
          <member value='&quot;Sales Volume&quot;' />
          <member value='&quot;Mobility Index&quot;' />
        </members>
      </column>
      <column caption='Geocode Parameter' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Neighborhood Long&quot;'>
        <calculation class='tableau' formula='&quot;Neighborhood Long&quot;' />
        <members>
          <member value='&quot;CITYWIDE&quot;' />
          <member value='&quot;Zip Code&quot;' />
          <member value='&quot;Council District&quot;' />
          <member value='&quot;Neighborhood Short&quot;' />
          <member value='&quot;Neighborhood Long&quot;' />
          <member value='&quot;Urban Village&quot;' />
        </members>
      </column>
      <column caption='Council District Parameter' datatype='string' name='[Parameter 3]' param-domain-type='list' role='measure' type='nominal' value='&quot;ALL DISTRICTS&quot;'>
        <calculation class='tableau' formula='&quot;ALL DISTRICTS&quot;' />
        <members>
          <member value='&quot;ALL DISTRICTS&quot;' />
          <member value='&quot;SCC1&quot;' />
          <member value='&quot;SCC2&quot;' />
          <member value='&quot;SCC3&quot;' />
          <member value='&quot;SCC4&quot;' />
          <member value='&quot;SCC5&quot;' />
          <member value='&quot;SCC6&quot;' />
          <member value='&quot;SCC7&quot;' />
        </members>
      </column>
      <column caption='Year Parameter' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;2016&quot;'>
        <calculation class='tableau' formula='&quot;2016&quot;' />
        <members>
          <member value='&quot;2016&quot;' />
          <member value='&quot;2015&quot;' />
          <member value='&quot;2014&quot;' />
          <member value='&quot;2013&quot;' />
          <member value='&quot;ALL YEARS&quot;' />
        </members>
      </column>
    </datasource>
    <datasource caption='Demographics' inline='true' name='federated.004akfr0ztvque1dvtnym0ol9g6i' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Blockgroup_geocode' name='textscan.1rrd7s50dtt46h1gwohi60m59j64'>
            <connection class='textscan' directory='/Users/xx/git-monolyst/census-demography/data' filename='Blockgroup_demographics.csv' password='' server='' workgroup-auth-mode='as-is' />
          </named-connection>
          <named-connection caption='blkgrp10_shore' name='ogrdirect.00bf7tm03dmrtl19sv8xj1tof62l'>
            <connection class='ogrdirect' directory='/Users/xx/git-monolyst/census-demography/data/blkgrp10_shore' filename='blkgrp10_shore.shp' ogr-grid-shift-folder='/Applications/Tableau Desktop 2018.1.app/Contents/install/local/proj4' password='' server='' tablename='' />
          </named-connection>
        </named-connections>
        <relation join='left' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[Blockgroup_demographics.csv].[Blockgroup]' />
              <expression op='[two_indices_and_a_bg.csv].[block_group]' />
            </expression>
          </clause>
          <relation join='left' type='join'>
            <clause type='join'>
              <expression op='='>
                <expression op='[Blockgroup_demographics.csv].[Blockgroup]' />
                <expression op='[blkgrp10_shore.shp].[GEO_ID_GRP]' />
              </expression>
            </clause>
            <relation join='right' type='join'>
              <clause type='join'>
                <expression op='='>
                  <expression op='[Blockgroup_demographics.csv].[Blockgroup]' />
                  <expression op='[Blockgroup_geocode.csv].[location]' />
                </expression>
              </clause>
              <relation connection='textscan.1rrd7s50dtt46h1gwohi60m59j64' name='Blockgroup_demographics.csv' table='[Blockgroup_demographics#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='integer' name='Population' ordinal='0' />
                  <column datatype='string' name='Year' ordinal='1' />
                  <column datatype='string' name='Blockgroup' ordinal='2' />
                  <column datatype='integer' name='Race Total' ordinal='3' />
                  <column datatype='real' name='White alone' ordinal='4' />
                  <column datatype='real' name='Black or African American alone' ordinal='5' />
                  <column datatype='real' name='American Indian and Alaska Native alone' ordinal='6' />
                  <column datatype='real' name='Asian alone' ordinal='7' />
                  <column datatype='real' name='Native Hawaiian and Other Pacific Islander alone' ordinal='8' />
                  <column datatype='integer' name='Some other race alone' ordinal='9' />
                  <column datatype='real' name='Two or more races' ordinal='10' />
                  <column datatype='integer' name='Two or more races: - Two races including Some other race' ordinal='11' />
                  <column datatype='integer' name='Two or more races: - Two races excluding Some other race, and three or more races' ordinal='12' />
                  <column datatype='integer' name='Edu Total' ordinal='13' />
                  <column datatype='integer' name='No schooling completed' ordinal='14' />
                  <column datatype='integer' name='Nursery school' ordinal='15' />
                  <column datatype='integer' name='Kindergarten' ordinal='16' />
                  <column datatype='integer' name='1st grade' ordinal='17' />
                  <column datatype='integer' name='2nd grade' ordinal='18' />
                  <column datatype='integer' name='3rd grade' ordinal='19' />
                  <column datatype='integer' name='4th grade' ordinal='20' />
                  <column datatype='integer' name='5th grade' ordinal='21' />
                  <column datatype='integer' name='6th grade' ordinal='22' />
                  <column datatype='integer' name='7th grade' ordinal='23' />
                  <column datatype='integer' name='8th grade' ordinal='24' />
                  <column datatype='integer' name='9th grade' ordinal='25' />
                  <column datatype='integer' name='10th grade' ordinal='26' />
                  <column datatype='integer' name='11th grade' ordinal='27' />
                  <column datatype='integer' name='12th grade, no diploma' ordinal='28' />
                  <column datatype='integer' name='Regular high school diploma' ordinal='29' />
                  <column datatype='integer' name='GED or alternative credential' ordinal='30' />
                  <column datatype='integer' name='Some college, less than 1 year' ordinal='31' />
                  <column datatype='integer' name='Some college, 1 or more years, no degree' ordinal='32' />
                  <column datatype='integer' name='Associate&apos;s degree' ordinal='33' />
                  <column datatype='integer' name='Bachelor&apos;s degree' ordinal='34' />
                  <column datatype='integer' name='Master&apos;s degree' ordinal='35' />
                  <column datatype='integer' name='Professional school degree' ordinal='36' />
                  <column datatype='integer' name='Doctorate degree' ordinal='37' />
                  <column datatype='real' name='Med_Hh_Income' ordinal='38' />
                  <column datatype='real' name='Pc_income' ordinal='39' />
                  <column datatype='integer' name='Food Stamps Total' ordinal='40' />
                  <column datatype='integer' name='Tenure Total' ordinal='41' />
                  <column datatype='real' name='Own' ordinal='42' />
                  <column datatype='real' name='Rent' ordinal='43' />
                  <column datatype='real' name='Some other race' ordinal='44' />
                  <column datatype='real' name='Food Stamps' ordinal='45' />
                  <column datatype='real' name='Four Year College' ordinal='46' />
                  <column datatype='real' name='Dist Downtown' ordinal='47' />
                  <column datatype='real' name='blkgrp' ordinal='48' />
                  <column datatype='real' name='AveSalePrice' ordinal='49' />
                  <column datatype='real' name='ParcelCount' ordinal='50' />
                </columns>
              </relation>
              <relation connection='textscan.1rrd7s50dtt46h1gwohi60m59j64' name='Blockgroup_geocode.csv' table='[Blockgroup_geocode#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='string' name='location' ordinal='0' />
                  <column datatype='string' name='neighborhood_short' ordinal='1' />
                  <column datatype='string' name='neigbhorhood_long' ordinal='2' />
                  <column datatype='string' name='council_district' ordinal='3' />
                  <column datatype='integer' name='zipcode' ordinal='4' />
                  <column datatype='string' name='urban_village' ordinal='5' />
                  <column datatype='string' name='geographical_area' ordinal='6' />
                  <column datatype='real' name='latitude' ordinal='7' />
                  <column datatype='real' name='longitude' ordinal='8' />
                </columns>
              </relation>
            </relation>
            <relation connection='ogrdirect.00bf7tm03dmrtl19sv8xj1tof62l' name='blkgrp10_shore.shp' table='[blkgrp10_shore.shp]' type='table'>
              <columns>
                <column datatype='string' name='GEO_ID_GRP' ordinal='0' />
                <column datatype='integer' name='FEATURE_ID' ordinal='1' />
                <column datatype='string' name='BLKGRP_LBL' ordinal='2' />
                <column datatype='string' name='BLKGRP_STR' ordinal='3' />
                <column datatype='integer' name='BLKGRP_INT' ordinal='4' />
                <column datatype='string' name='GRPLABEL_F' ordinal='5' />
                <column datatype='string' name='GRPLABEL_C' ordinal='6' />
                <column datatype='string' name='GRPLABEL_T' ordinal='7' />
                <column datatype='string' name='TRACT_LBL' ordinal='8' />
                <column datatype='string' name='TRACT_STR' ordinal='9' />
                <column datatype='integer' name='TRACT_INT' ordinal='10' />
                <column datatype='real' name='TRACT_FLT' ordinal='11' />
                <column datatype='string' name='TRACT_DEL' ordinal='12' />
                <column datatype='string' name='TRTLABEL_F' ordinal='13' />
                <column datatype='string' name='TRTLABEL_C' ordinal='14' />
                <column datatype='string' name='TRTLABEL_T' ordinal='15' />
                <column datatype='string' name='COUNTY_STR' ordinal='16' />
                <column datatype='integer' name='COUNTY_INT' ordinal='17' />
                <column datatype='string' name='STATE_STR' ordinal='18' />
                <column datatype='integer' name='STATE_INT' ordinal='19' />
                <column datatype='string' name='LEVEL_1' ordinal='20' />
                <column datatype='string' name='LEVEL_2' ordinal='21' />
                <column datatype='string' name='LEVEL_3' ordinal='22' />
                <column datatype='string' name='LEVEL_4' ordinal='23' />
                <column datatype='real' name='GROUP_AREA' ordinal='24' />
                <column datatype='real' name='GROUP_PERI' ordinal='25' />
                <column datatype='real' name='Shape_area' ordinal='26' />
                <column datatype='real' name='Shape_len' ordinal='27' />
                <column datatype='spatial' name='Geometry' ordinal='28' />
              </columns>
            </relation>
          </relation>
          <relation connection='textscan.1rrd7s50dtt46h1gwohi60m59j64' name='two_indices_and_a_bg.csv' table='[two_indices_and_a_bg#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='integer' name='F1' ordinal='0' />
              <column datatype='string' name='block_group' ordinal='1' />
              <column datatype='real' name='mode_index' ordinal='2' />
              <column datatype='real' name='affordability_index' ordinal='3' />
            </columns>
          </relation>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Population]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Population</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Blockgroup</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Blockgroup]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Blockgroup</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Race Total</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Race Total]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Race Total</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>White alone</remote-name>
            <remote-type>5</remote-type>
            <local-name>[White alone]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>White alone</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Black or African American alone</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Black or African American alone]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Black or African American alone</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>American Indian and Alaska Native alone</remote-name>
            <remote-type>5</remote-type>
            <local-name>[American Indian and Alaska Native alone]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>American Indian and Alaska Native alone</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Asian alone</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Asian alone]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Asian alone</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Native Hawaiian and Other Pacific Islander alone</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Native Hawaiian and Other Pacific Islander alone]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Native Hawaiian and Other Pacific Islander alone</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Some other race alone</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Some other race alone]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Some other race alone</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Two or more races</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Two or more races]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Two or more races</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Two or more races: - Two races including Some other race</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Two or more races: - Two races including Some other race]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Two or more races: - Two races including Some other race</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Two or more races: - Two races excluding Some other race, and three or more races</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Two or more races: - Two races excluding Some other race, and three or more races]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Two or more races: - Two races excluding Some other race, and three or more races</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Edu Total</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Edu Total]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Edu Total</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>No schooling completed</remote-name>
            <remote-type>20</remote-type>
            <local-name>[No schooling completed]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>No schooling completed</remote-alias>
            <ordinal>14</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Nursery school</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Nursery school]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Nursery school</remote-alias>
            <ordinal>15</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Kindergarten</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Kindergarten]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Kindergarten</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1st grade</remote-name>
            <remote-type>20</remote-type>
            <local-name>[1st grade]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>1st grade</remote-alias>
            <ordinal>17</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2nd grade</remote-name>
            <remote-type>20</remote-type>
            <local-name>[2nd grade]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>2nd grade</remote-alias>
            <ordinal>18</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>3rd grade</remote-name>
            <remote-type>20</remote-type>
            <local-name>[3rd grade]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>3rd grade</remote-alias>
            <ordinal>19</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>4th grade</remote-name>
            <remote-type>20</remote-type>
            <local-name>[4th grade]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>4th grade</remote-alias>
            <ordinal>20</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>5th grade</remote-name>
            <remote-type>20</remote-type>
            <local-name>[5th grade]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>5th grade</remote-alias>
            <ordinal>21</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>6th grade</remote-name>
            <remote-type>20</remote-type>
            <local-name>[6th grade]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>6th grade</remote-alias>
            <ordinal>22</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>7th grade</remote-name>
            <remote-type>20</remote-type>
            <local-name>[7th grade]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>7th grade</remote-alias>
            <ordinal>23</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>8th grade</remote-name>
            <remote-type>20</remote-type>
            <local-name>[8th grade]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>8th grade</remote-alias>
            <ordinal>24</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>9th grade</remote-name>
            <remote-type>20</remote-type>
            <local-name>[9th grade]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>9th grade</remote-alias>
            <ordinal>25</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>10th grade</remote-name>
            <remote-type>20</remote-type>
            <local-name>[10th grade]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>10th grade</remote-alias>
            <ordinal>26</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>11th grade</remote-name>
            <remote-type>20</remote-type>
            <local-name>[11th grade]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>11th grade</remote-alias>
            <ordinal>27</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>12th grade, no diploma</remote-name>
            <remote-type>20</remote-type>
            <local-name>[12th grade, no diploma]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>12th grade, no diploma</remote-alias>
            <ordinal>28</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Regular high school diploma</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Regular high school diploma]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Regular high school diploma</remote-alias>
            <ordinal>29</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GED or alternative credential</remote-name>
            <remote-type>20</remote-type>
            <local-name>[GED or alternative credential]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>GED or alternative credential</remote-alias>
            <ordinal>30</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Some college, less than 1 year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Some college, less than 1 year]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Some college, less than 1 year</remote-alias>
            <ordinal>31</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Some college, 1 or more years, no degree</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Some college, 1 or more years, no degree]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Some college, 1 or more years, no degree</remote-alias>
            <ordinal>32</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Associate&apos;s degree</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Associate&apos;s degree]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Associate&apos;s degree</remote-alias>
            <ordinal>33</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Bachelor&apos;s degree</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Bachelor&apos;s degree]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Bachelor&apos;s degree</remote-alias>
            <ordinal>34</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Master&apos;s degree</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Master&apos;s degree]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Master&apos;s degree</remote-alias>
            <ordinal>35</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Professional school degree</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Professional school degree]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Professional school degree</remote-alias>
            <ordinal>36</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Doctorate degree</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Doctorate degree]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Doctorate degree</remote-alias>
            <ordinal>37</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Med_Hh_Income</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Med_Hh_Income]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Med_Hh_Income</remote-alias>
            <ordinal>38</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Pc_income</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Pc_income]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Pc_income</remote-alias>
            <ordinal>39</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Food Stamps Total</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Food Stamps Total]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Food Stamps Total</remote-alias>
            <ordinal>40</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Tenure Total</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Tenure Total]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Tenure Total</remote-alias>
            <ordinal>41</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Own</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Own]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Own</remote-alias>
            <ordinal>42</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Rent</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Rent]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Rent</remote-alias>
            <ordinal>43</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Some other race</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Some other race]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Some other race</remote-alias>
            <ordinal>44</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Food Stamps</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Food Stamps]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Food Stamps</remote-alias>
            <ordinal>45</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Four Year College</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Four Year College]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Four Year College</remote-alias>
            <ordinal>46</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Dist Downtown</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Dist Downtown]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>Dist Downtown</remote-alias>
            <ordinal>47</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>blkgrp</remote-name>
            <remote-type>5</remote-type>
            <local-name>[blkgrp]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>blkgrp</remote-alias>
            <ordinal>48</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>AveSalePrice</remote-name>
            <remote-type>5</remote-type>
            <local-name>[AveSalePrice]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>AveSalePrice</remote-alias>
            <ordinal>49</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ParcelCount</remote-name>
            <remote-type>5</remote-type>
            <local-name>[ParcelCount]</local-name>
            <parent-name>[Blockgroup_demographics.csv]</parent-name>
            <remote-alias>ParcelCount</remote-alias>
            <ordinal>50</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Blockgroup_geocode.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>129</remote-type>
            <local-name>[location]</local-name>
            <parent-name>[Blockgroup_geocode.csv]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>51</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>neighborhood_short</remote-name>
            <remote-type>129</remote-type>
            <local-name>[neighborhood_short]</local-name>
            <parent-name>[Blockgroup_geocode.csv]</parent-name>
            <remote-alias>neighborhood_short</remote-alias>
            <ordinal>52</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>neigbhorhood_long</remote-name>
            <remote-type>129</remote-type>
            <local-name>[neigbhorhood_long]</local-name>
            <parent-name>[Blockgroup_geocode.csv]</parent-name>
            <remote-alias>neigbhorhood_long</remote-alias>
            <ordinal>53</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>council_district</remote-name>
            <remote-type>129</remote-type>
            <local-name>[council_district]</local-name>
            <parent-name>[Blockgroup_geocode.csv]</parent-name>
            <remote-alias>council_district</remote-alias>
            <ordinal>54</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>zipcode</remote-name>
            <remote-type>20</remote-type>
            <local-name>[zipcode]</local-name>
            <parent-name>[Blockgroup_geocode.csv]</parent-name>
            <remote-alias>zipcode</remote-alias>
            <ordinal>55</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>urban_village</remote-name>
            <remote-type>129</remote-type>
            <local-name>[urban_village]</local-name>
            <parent-name>[Blockgroup_geocode.csv]</parent-name>
            <remote-alias>urban_village</remote-alias>
            <ordinal>56</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>geographical_area</remote-name>
            <remote-type>129</remote-type>
            <local-name>[geographical_area]</local-name>
            <parent-name>[Blockgroup_geocode.csv]</parent-name>
            <remote-alias>geographical_area</remote-alias>
            <ordinal>57</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[latitude]</local-name>
            <parent-name>[Blockgroup_geocode.csv]</parent-name>
            <remote-alias>latitude</remote-alias>
            <ordinal>58</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[longitude]</local-name>
            <parent-name>[Blockgroup_geocode.csv]</parent-name>
            <remote-alias>longitude</remote-alias>
            <ordinal>59</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GEO_ID_GRP</remote-name>
            <remote-type>129</remote-type>
            <local-name>[GEO_ID_GRP]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>GEO_ID_GRP</remote-alias>
            <ordinal>60</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FEATURE_ID</remote-name>
            <remote-type>20</remote-type>
            <local-name>[FEATURE_ID]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>FEATURE_ID</remote-alias>
            <ordinal>61</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BLKGRP_LBL</remote-name>
            <remote-type>129</remote-type>
            <local-name>[BLKGRP_LBL]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>BLKGRP_LBL</remote-alias>
            <ordinal>62</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BLKGRP_STR</remote-name>
            <remote-type>129</remote-type>
            <local-name>[BLKGRP_STR]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>BLKGRP_STR</remote-alias>
            <ordinal>63</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BLKGRP_INT</remote-name>
            <remote-type>20</remote-type>
            <local-name>[BLKGRP_INT]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>BLKGRP_INT</remote-alias>
            <ordinal>64</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GRPLABEL_F</remote-name>
            <remote-type>129</remote-type>
            <local-name>[GRPLABEL_F]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>GRPLABEL_F</remote-alias>
            <ordinal>65</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GRPLABEL_C</remote-name>
            <remote-type>129</remote-type>
            <local-name>[GRPLABEL_C]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>GRPLABEL_C</remote-alias>
            <ordinal>66</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GRPLABEL_T</remote-name>
            <remote-type>129</remote-type>
            <local-name>[GRPLABEL_T]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>GRPLABEL_T</remote-alias>
            <ordinal>67</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TRACT_LBL</remote-name>
            <remote-type>129</remote-type>
            <local-name>[TRACT_LBL]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>TRACT_LBL</remote-alias>
            <ordinal>68</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TRACT_STR</remote-name>
            <remote-type>129</remote-type>
            <local-name>[TRACT_STR]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>TRACT_STR</remote-alias>
            <ordinal>69</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TRACT_INT</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TRACT_INT]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>TRACT_INT</remote-alias>
            <ordinal>70</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TRACT_FLT</remote-name>
            <remote-type>5</remote-type>
            <local-name>[TRACT_FLT]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>TRACT_FLT</remote-alias>
            <ordinal>71</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TRACT_DEL</remote-name>
            <remote-type>129</remote-type>
            <local-name>[TRACT_DEL]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>TRACT_DEL</remote-alias>
            <ordinal>72</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TRTLABEL_F</remote-name>
            <remote-type>129</remote-type>
            <local-name>[TRTLABEL_F]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>TRTLABEL_F</remote-alias>
            <ordinal>73</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TRTLABEL_C</remote-name>
            <remote-type>129</remote-type>
            <local-name>[TRTLABEL_C]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>TRTLABEL_C</remote-alias>
            <ordinal>74</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TRTLABEL_T</remote-name>
            <remote-type>129</remote-type>
            <local-name>[TRTLABEL_T]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>TRTLABEL_T</remote-alias>
            <ordinal>75</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>COUNTY_STR</remote-name>
            <remote-type>129</remote-type>
            <local-name>[COUNTY_STR]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>COUNTY_STR</remote-alias>
            <ordinal>76</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>COUNTY_INT</remote-name>
            <remote-type>20</remote-type>
            <local-name>[COUNTY_INT]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>COUNTY_INT</remote-alias>
            <ordinal>77</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>STATE_STR</remote-name>
            <remote-type>129</remote-type>
            <local-name>[STATE_STR]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>STATE_STR</remote-alias>
            <ordinal>78</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>STATE_INT</remote-name>
            <remote-type>20</remote-type>
            <local-name>[STATE_INT]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>STATE_INT</remote-alias>
            <ordinal>79</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LEVEL_1</remote-name>
            <remote-type>129</remote-type>
            <local-name>[LEVEL_1]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>LEVEL_1</remote-alias>
            <ordinal>80</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LEVEL_2</remote-name>
            <remote-type>129</remote-type>
            <local-name>[LEVEL_2]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>LEVEL_2</remote-alias>
            <ordinal>81</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LEVEL_3</remote-name>
            <remote-type>129</remote-type>
            <local-name>[LEVEL_3]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>LEVEL_3</remote-alias>
            <ordinal>82</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LEVEL_4</remote-name>
            <remote-type>129</remote-type>
            <local-name>[LEVEL_4]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>LEVEL_4</remote-alias>
            <ordinal>83</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GROUP_AREA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[GROUP_AREA]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>GROUP_AREA</remote-alias>
            <ordinal>84</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GROUP_PERI</remote-name>
            <remote-type>5</remote-type>
            <local-name>[GROUP_PERI]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>GROUP_PERI</remote-alias>
            <ordinal>85</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Shape_area</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Shape_area]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>Shape_area</remote-alias>
            <ordinal>86</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Shape_len</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Shape_len]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>Shape_len</remote-alias>
            <ordinal>87</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='measure'>
            <remote-name>Geometry</remote-name>
            <remote-type>8</remote-type>
            <local-name>[Geometry]</local-name>
            <parent-name>[blkgrp10_shore.shp]</parent-name>
            <remote-alias>Geometry</remote-alias>
            <ordinal>88</ordinal>
            <local-type>spatial</local-type>
            <aggregation>Collect</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[two_indices_and_a_bg.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[two_indices_and_a_bg.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>89</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>block_group</remote-name>
            <remote-type>129</remote-type>
            <local-name>[block_group]</local-name>
            <parent-name>[two_indices_and_a_bg.csv]</parent-name>
            <remote-alias>block_group</remote-alias>
            <ordinal>90</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>mode_index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[mode_index]</local-name>
            <parent-name>[two_indices_and_a_bg.csv]</parent-name>
            <remote-alias>mode_index</remote-alias>
            <ordinal>91</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>affordability_index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[affordability_index]</local-name>
            <parent-name>[two_indices_and_a_bg.csv]</parent-name>
            <remote-alias>affordability_index</remote-alias>
            <ordinal>92</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='10Th Grade' datatype='integer' name='[10th grade]' role='measure' type='quantitative' />
      <column caption='11Th Grade' datatype='integer' name='[11th grade]' role='measure' type='quantitative' />
      <column caption='12Th Grade, No Diploma' datatype='integer' name='[12th grade, no diploma]' role='measure' type='quantitative' />
      <column caption='1St Grade' datatype='integer' name='[1st grade]' role='measure' type='quantitative' />
      <column caption='2Nd Grade' datatype='integer' name='[2nd grade]' role='measure' type='quantitative' />
      <column caption='3Rd Grade' datatype='integer' name='[3rd grade]' role='measure' type='quantitative' />
      <column caption='4Th Grade' datatype='integer' name='[4th grade]' role='measure' type='quantitative' />
      <column caption='5Th Grade' datatype='integer' name='[5th grade]' role='measure' type='quantitative' />
      <column caption='6Th Grade' datatype='integer' name='[6th grade]' role='measure' type='quantitative' />
      <column caption='7Th Grade' datatype='integer' name='[7th grade]' role='measure' type='quantitative' />
      <column caption='8Th Grade' datatype='integer' name='[8th grade]' role='measure' type='quantitative' />
      <column caption='9Th Grade' datatype='integer' name='[9th grade]' role='measure' type='quantitative' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[federated.004akfr0ztvque1dvtnym0ol9g6i].[med:Indicator 0 (copy):qk]&quot;' value='Median' />
          <alias key='&quot;[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator 1 (copy 2):qk]&quot;' value='Average' />
        </aliases>
      </column>
      <column caption='Blkgrp Int' datatype='integer' name='[BLKGRP_INT]' role='measure' type='quantitative' />
      <column caption='Blkgrp Lbl' datatype='string' name='[BLKGRP_LBL]' role='dimension' type='nominal' />
      <column caption='Blkgrp Str' datatype='string' name='[BLKGRP_STR]' role='dimension' type='nominal' />
      <column datatype='string' name='[Blockgroup]' role='dimension' type='nominal' />
      <column caption='County Int' datatype='integer' name='[COUNTY_INT]' role='measure' type='quantitative' />
      <column caption='County Str' datatype='string' name='[COUNTY_STR]' role='dimension' semantic-role='[County].[Name]' type='nominal' />
      <column caption='Compare Header' datatype='string' name='[Calculation_-7112872654698848246]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='&quot;Are &quot; + Replace([Parameters].[Parameter 1],&quot;Percent &quot;,&quot;&quot;) + &quot; and &quot; + REPLACE([Parameters].[Indicator1 Parameter (copy)],&quot;Percent &quot;,&quot;&quot; ) + &quot; correlated?&quot;' />
      </column>
      <column caption='Indicator1Text' datatype='string' name='[Calculation_-7112872654770298880]' role='measure' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &quot;Dist Downtown&quot; THEN  STR(ROUND([Calculation_1115766813349150721],1)) + &quot; Miles&quot; // Distance&#13;&#10;&#13;&#10;ELSEIF [Calculation_1115766813349150721] &lt;= 1 THEN STR(ROUND([Calculation_1115766813349150721]*100,0)) + &quot;%&quot; // Percentage&#13;&#10;ELSEIF [Calculation_1115766813349150721] &lt;= 3000 THEN STR(ROUND([Calculation_1115766813349150721],0))  // Population&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 3000 THEN &quot;$&quot; +  STR(ROUND([Calculation_1115766813349150721]/1000)) + &quot;,000&quot; // Currency&#13;&#10;END' />
      </column>
      <column caption='Indicator 1' datatype='real' name='[Calculation_1115766813349150721]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &quot;Percent POC&quot; THEN (1-AVG([White alone]))&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Own&quot; THEN AVG([Own])&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Rent&quot; THEN AVG([Rent]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Asian&quot; THEN AVG([Asian alone]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Black&quot; THEN AVG([Black or African American alone])&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent White&quot; THEN AVG([White alone]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Food Stamps&quot; THEN AVG([Food Stamps]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Four Year College&quot; THEN AVG([Four Year College]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Median Household Income&quot; THEN AVG([Med_Hh_Income]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Per Capita Income&quot; THEN AVG([Pc_income]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Population&quot; THEN AVG([Population])&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Dist Downtown&quot; THEN AVG([Dist Downtown])&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Sales Price&quot; THEN AVG([AveSalePrice])&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Sales Volume&quot; THEN AVG([ParcelCount])&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Mobility Index&quot; THEN MAX([Calculation_125748977171722240])&#10;&#13;&#10;&#13;&#10;END' />
      </column>
      <column caption='Indicator 2' datatype='real' name='[Calculation_1115766813349253122]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent POC&quot; THEN (1-AVG([White alone]))&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Own&quot; THEN AVG([Own])&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Rent&quot; THEN AVG([Rent]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Asian&quot; THEN AVG([Asian alone]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Black&quot; THEN AVG([Black or African American alone])&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent White&quot; THEN AVG([White alone]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Food Stamps&quot; THEN AVG([Food Stamps]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Four Year College&quot; THEN AVG([Four Year College]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Median Household Income&quot; THEN AVG([Med_Hh_Income]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Per Capita Income&quot; THEN AVG([Pc_income]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Population&quot; THEN AVG([Population])&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Dist Downtown&quot; THEN AVG([Dist Downtown])&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Sales Price&quot; THEN AVG([AveSalePrice])&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Sales Volume&quot; THEN AVG([ParcelCount])&#13;&#10;&#13;&#10;END' />
      </column>
      <column caption='Filter Council District' datatype='boolean' name='[Calculation_1115766813350019075]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[council_district] != &quot;None&quot;' />
      </column>
      <column caption='Indicator 1 Bin' datatype='real' name='[Calculation_1115766813361057796]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &quot;Dist Downtown&quot; THEN ROUND([Calculation_1115766813349150721],1)&#13;&#10;&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.95 AND [Calculation_1115766813349150721] &lt;= 1.0 THEN .95&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.90 AND [Calculation_1115766813349150721] &lt;= .95 THEN .90&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.85 AND [Calculation_1115766813349150721] &lt;= .90 THEN .85&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.80 AND [Calculation_1115766813349150721] &lt;= .85 THEN .80&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.75 AND [Calculation_1115766813349150721] &lt;= .80 THEN .75&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.70 AND [Calculation_1115766813349150721] &lt;= .75 THEN .70&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.65 AND [Calculation_1115766813349150721] &lt;= .70 THEN .65&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.60 AND [Calculation_1115766813349150721] &lt;= .65 THEN .60&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.55 AND [Calculation_1115766813349150721] &lt;= .60 THEN .55&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.50 AND [Calculation_1115766813349150721] &lt;= .55 THEN .50&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.45 AND [Calculation_1115766813349150721] &lt;= .50 THEN .45&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.40 AND [Calculation_1115766813349150721] &lt;= .45 THEN .40&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.35 AND [Calculation_1115766813349150721] &lt;= .40 THEN .35&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.30 AND [Calculation_1115766813349150721] &lt;= .35 THEN .30&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.25 AND [Calculation_1115766813349150721] &lt;= .30 THEN .25&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.20 AND [Calculation_1115766813349150721] &lt;= .25 THEN .20&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.15 AND [Calculation_1115766813349150721] &lt;= .20 THEN .15&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.10 AND [Calculation_1115766813349150721] &lt;= .15 THEN .10&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.05 AND [Calculation_1115766813349150721] &lt;= .10 THEN .05&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.00 AND [Calculation_1115766813349150721] &lt;= .05 THEN .00&#13;&#10;ELSEIF [Calculation_1115766813349150721] &lt; 5000 THEN ROUND([Calculation_1115766813349150721]/100,0)*100&#13;&#10;ELSE ROUND([Calculation_1115766813349150721]/10000,0)*10000&#13;&#10;END' />
      </column>
      <column caption='Indicator 1 Label' datatype='string' name='[Calculation_1115766813401026565]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[Parameters].[Parameter 1]' />
      </column>
      <column caption='Filter Year Parameter' datatype='boolean' name='[Calculation_1115766813408124936]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[Year] = [Parameters].[Parameter 4] OR [Parameters].[Parameter 4] = &quot;ALL YEARS&quot;' />
      </column>
      <column caption='Mobility Index' datatype='real' name='[Calculation_125748977171722240]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([affordability_index]) * 100' />
      </column>
      <column caption='Compare Narrative' datatype='string' name='[Compare Header (copy)]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='&quot;Each dot in the chart above represents one census block group of around 1,500 people. &quot; + &#13;&#10;&quot;The trend line can provide a sense of whether there is a relationship between the two metrics. &quot; +&#13;&#10;&quot;A upward sloping line indicates that &quot; + [Parameters].[Parameter 1] + &quot; is correlated with &quot; + [Parameters].[Indicator1 Parameter (copy)] + &quot;. &quot; +&#13;&#10;&quot;An downward sloping line implies a negative correlation, so the higher the &quot; + [Parameters].[Parameter 1] + &quot;, the lower the &quot; + [Parameters].[Indicator1 Parameter (copy)] + &quot;.&quot;' />
      </column>
      <column caption='Feature Id' datatype='integer' name='[FEATURE_ID]' role='dimension' type='ordinal' />
      <column caption='Geo Id Grp' datatype='string' name='[GEO_ID_GRP]' role='dimension' type='nominal' />
      <column caption='Group Area' datatype='real' name='[GROUP_AREA]' role='measure' type='quantitative' />
      <column caption='Group Peri' datatype='real' name='[GROUP_PERI]' role='measure' type='quantitative' />
      <column caption='Grplabel C' datatype='string' name='[GRPLABEL_C]' role='dimension' type='nominal' />
      <column caption='Grplabel F' datatype='string' name='[GRPLABEL_F]' role='dimension' type='nominal' />
      <column caption='Grplabel T' datatype='string' name='[GRPLABEL_T]' role='dimension' type='nominal' />
      <column caption='Indicator 0 NonAgg' datatype='real' name='[Indicator 0 (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent POC&quot; THEN 1-[White alone]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Own&quot; THEN [Own]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Rent&quot; THEN [Rent]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Asian&quot; THEN [Asian alone]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Black&quot; THEN [Black or African American alone]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent White&quot; THEN [White alone]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Food Stamps&quot; THEN [Food Stamps]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Four Year College&quot; THEN [Four Year College]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Median Household Income&quot; THEN [Med_Hh_Income]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Per Capita Income&quot; THEN [Pc_income]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Population&quot; THEN [Population]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN [Dist Downtown]&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Sales Price&quot; THEN [AveSalePrice]&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Sales Volume&quot; THEN [ParcelCount]&#13;&#10;END' />
      </column>
      <column caption='Indicator 0' datatype='real' name='[Indicator 1 (copy 2)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent POC&quot; THEN (1-AVG([White alone]))&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Own&quot; THEN AVG([Own])&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Rent&quot; THEN AVG([Rent]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Asian&quot; THEN AVG([Asian alone]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Black&quot; THEN AVG([Black or African American alone])&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent White&quot; THEN AVG([White alone]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Food Stamps&quot; THEN AVG([Food Stamps]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Four Year College&quot; THEN AVG([Four Year College]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Median Household Income&quot; THEN AVG([Med_Hh_Income]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Per Capita Income&quot; THEN AVG([Pc_income]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Population&quot; THEN AVG([Population]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN AVG([Dist Downtown])&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Sales Price&quot; THEN AVG([AveSalePrice])&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Sales Volume&quot; THEN AVG([ParcelCount])&#13;&#10;END' />
      </column>
      <column caption='Geocode' datatype='string' name='[Indicator 1 (copy)]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Parameter 2] = &quot;Council District&quot; THEN [council_district]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Neighborhood Long&quot; THEN [neigbhorhood_long]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Neighborhood Short&quot; THEN [neighborhood_short]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Zip Code&quot; THEN [zipcode]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Urban Village&quot; THEN [urban_village]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Blockgroup&quot; THEN [location]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;CITYWIDE&quot; THEN &quot;Seattle&quot;&#13;&#10;ELSE &quot;None&quot; END' />
      </column>
      <column caption='Indicator 0 Bin' datatype='real' name='[Indicator 1 Bin (copy 2)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN ROUND([Indicator 1 (copy 2)],1)&#13;&#10;&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.95 AND [Indicator 1 (copy 2)] &lt;= 1.0 THEN .95&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.90 AND [Indicator 1 (copy 2)] &lt;= .95 THEN .90&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.85 AND [Indicator 1 (copy 2)] &lt;= .90 THEN .85&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.80 AND [Indicator 1 (copy 2)] &lt;= .85 THEN .80&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.75 AND [Indicator 1 (copy 2)] &lt;= .80 THEN .75&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.70 AND [Indicator 1 (copy 2)] &lt;= .75 THEN .70&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.65 AND [Indicator 1 (copy 2)] &lt;= .70 THEN .65&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.60 AND [Indicator 1 (copy 2)] &lt;= .65 THEN .60&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.55 AND [Indicator 1 (copy 2)] &lt;= .60 THEN .55&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.50 AND [Indicator 1 (copy 2)] &lt;= .55 THEN .50&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.45 AND [Indicator 1 (copy 2)] &lt;= .50 THEN .45&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.40 AND [Indicator 1 (copy 2)] &lt;= .45 THEN .40&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.35 AND [Indicator 1 (copy 2)] &lt;= .40 THEN .35&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.30 AND [Indicator 1 (copy 2)] &lt;= .35 THEN .30&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.25 AND [Indicator 1 (copy 2)] &lt;= .30 THEN .25&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.20 AND [Indicator 1 (copy 2)] &lt;= .25 THEN .20&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.15 AND [Indicator 1 (copy 2)] &lt;= .20 THEN .15&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.10 AND [Indicator 1 (copy 2)] &lt;= .15 THEN .10&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.05 AND [Indicator 1 (copy 2)] &lt;= .10 THEN .05&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.00 AND [Indicator 1 (copy 2)] &lt;= .05 THEN .00&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &lt; 5000 THEN ROUND([Indicator 1 (copy 2)]/100,0)*100&#13;&#10;ELSE ROUND([Indicator 1 (copy 2)]/10000,0)*10000&#13;&#10;END' />
      </column>
      <column caption='Indicator 2 Bin' datatype='real' name='[Indicator 1 Bin (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Parameters].[Indicator1 Parameter (copy)] = &quot;Dist Downtown&quot; THEN ROUND([Calculation_1115766813349253122],1)&#13;&#10;&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.95 AND [Calculation_1115766813349253122] &lt;= 1.0 THEN .95&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.90 AND [Calculation_1115766813349253122] &lt;= .95 THEN .90&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.85 AND [Calculation_1115766813349253122] &lt;= .90 THEN .85&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.80 AND [Calculation_1115766813349253122] &lt;= .85 THEN .80&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.75 AND [Calculation_1115766813349253122] &lt;= .80 THEN .75&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.70 AND [Calculation_1115766813349253122] &lt;= .75 THEN .70&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.65 AND [Calculation_1115766813349253122] &lt;= .70 THEN .65&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.60 AND [Calculation_1115766813349253122] &lt;= .65 THEN .60&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.55 AND [Calculation_1115766813349253122] &lt;= .60 THEN .55&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.50 AND [Calculation_1115766813349253122] &lt;= .55 THEN .50&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.45 AND [Calculation_1115766813349253122] &lt;= .50 THEN .45&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.40 AND [Calculation_1115766813349253122] &lt;= .45 THEN .40&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.35 AND [Calculation_1115766813349253122] &lt;= .40 THEN .35&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.30 AND [Calculation_1115766813349253122] &lt;= .35 THEN .30&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.25 AND [Calculation_1115766813349253122] &lt;= .30 THEN .25&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.20 AND [Calculation_1115766813349253122] &lt;= .25 THEN .20&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.15 AND [Calculation_1115766813349253122] &lt;= .20 THEN .15&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.10 AND [Calculation_1115766813349253122] &lt;= .15 THEN .10&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.05 AND [Calculation_1115766813349253122] &lt;= .10 THEN .05&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.00 AND [Calculation_1115766813349253122] &lt;= .05 THEN .00&#13;&#10;ELSEIF [Calculation_1115766813349253122] &lt; 5000 THEN ROUND([Calculation_1115766813349253122]/100,0)*100&#13;&#10;ELSE ROUND([Calculation_1115766813349253122]/10000,0)*10000&#13;&#10;END' />
      </column>
      <column caption='Indicator 2 Label' datatype='string' name='[Indicator 1 Label (copy)]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[Parameters].[Indicator1 Parameter (copy)]' />
      </column>
      <column caption='Indicator 0 Label' datatype='string' name='[Indicator 2 Label (copy)]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[Parameters].[Indicator2 Parameter (copy)]' />
      </column>
      <column caption='Indicator0TextMed' datatype='string' name='[Indicator0Text (copy)]' role='measure' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN  STR(ROUND(MEDIAN([Indicator 0 (copy)]),1)) + &quot; Miles&quot; // Distance&#13;&#10;&#13;&#10;ELSEIF MEDIAN([Indicator 0 (copy)]) &lt;= 1 THEN STR(ROUND(MEDIAN([Indicator 0 (copy)])*100,0)) + &quot;%&quot; // Percentage&#13;&#10;ELSEIF MEDIAN([Indicator 0 (copy)]) &lt;= 3000 THEN STR(ROUND(MEDIAN([Indicator 0 (copy)]),0))  // Population&#13;&#10;ELSEIF MEDIAN([Indicator 0 (copy)]) &gt; 3000 THEN &quot;$ &quot; +  STR(ROUND(MEDIAN([Indicator 0 (copy)])/1000)) + &quot;,000&quot; // Currency&#13;&#10;END' />
      </column>
      <column caption='Indicator0Text' datatype='string' name='[Indicator1Text (copy 2)]' role='measure' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN STR(ROUND([Indicator 1 (copy 2)],1)) + &quot; Miles&quot; // Distance&#13;&#10;&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &lt;= 1 THEN STR(ROUND([Indicator 1 (copy 2)]*100,0)) + &quot;%&quot; // Percentage&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &lt;= 3000 THEN STR(ROUND([Indicator 1 (copy 2)],0))  // Population&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 3000 THEN &quot;$ &quot; +  STR(ROUND([Indicator 1 (copy 2)]/1000)) + &quot;,000&quot; // Currency&#13;&#10;END' />
      </column>
      <column caption='Indicator2Text' datatype='string' name='[Indicator1Text (copy)]' role='measure' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Indicator1 Parameter (copy)] = &quot;Dist Downtown&quot; THEN  STR(ROUND([Calculation_1115766813349253122],1)) + &quot; Miles&quot; // Distance&#13;&#10;&#13;&#10;ELSEIF [Calculation_1115766813349253122] &lt;= 1 THEN STR(ROUND([Calculation_1115766813349253122]*100,0)) + &quot;%&quot; // Percentage&#13;&#10;ELSEIF [Calculation_1115766813349253122] &lt;= 3000 THEN STR(ROUND([Calculation_1115766813349253122],0))  // Population&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 3000 THEN &quot;$ &quot; +  STR(ROUND([Calculation_1115766813349253122]/1000,0)) + &quot;,000&quot; // Currency&#13;&#10;END' />
      </column>
      <column caption='Level 1' datatype='string' name='[LEVEL_1]' role='dimension' type='nominal' />
      <column caption='Level 2' datatype='string' name='[LEVEL_2]' role='dimension' type='nominal' />
      <column caption='Level 3' datatype='string' name='[LEVEL_3]' role='dimension' type='nominal' />
      <column caption='Level 4' datatype='string' name='[LEVEL_4]' role='dimension' type='nominal' />
      <column caption='Med Hh Income' datatype='real' name='[Med_Hh_Income]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Pc income' datatype='real' name='[Pc_income]' role='measure' type='quantitative' />
      <column caption='State Int' datatype='integer' name='[STATE_INT]' role='measure' type='quantitative' />
      <column caption='State Str' datatype='string' name='[STATE_STR]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='Shape area' datatype='real' name='[Shape_area]' role='measure' type='quantitative' />
      <column caption='Shape len' datatype='real' name='[Shape_len]' role='measure' type='quantitative' />
      <column caption='Tract Del' datatype='string' name='[TRACT_DEL]' role='dimension' type='nominal' />
      <column caption='Tract Flt' datatype='real' name='[TRACT_FLT]' role='measure' type='quantitative' />
      <column caption='Tract Int' datatype='integer' name='[TRACT_INT]' role='measure' type='quantitative' />
      <column caption='Tract Lbl' datatype='string' name='[TRACT_LBL]' role='dimension' type='nominal' />
      <column caption='Tract Str' datatype='string' name='[TRACT_STR]' role='dimension' type='nominal' />
      <column caption='Trtlabel C' datatype='string' name='[TRTLABEL_C]' role='dimension' type='nominal' />
      <column caption='Trtlabel F' datatype='string' name='[TRTLABEL_F]' role='dimension' type='nominal' />
      <column caption='Trtlabel T' datatype='string' name='[TRTLABEL_T]' role='dimension' type='nominal' />
      <column datatype='string' name='[Year]' role='dimension' type='nominal' />
      <column caption='Affordability Index' datatype='real' name='[affordability_index]' role='measure' type='quantitative' />
      <column caption='Block Group' datatype='string' default-role='measure' default-type='quantitative' name='[block_group]' role='dimension' type='nominal' />
      <column caption='Council District' datatype='string' name='[council_district]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;SCC1&quot;' value='D1' />
          <alias key='&quot;SCC2&quot;' value='D2' />
          <alias key='&quot;SCC3&quot;' value='D3' />
          <alias key='&quot;SCC4&quot;' value='D4' />
          <alias key='&quot;SCC5&quot;' value='D5' />
          <alias key='&quot;SCC6&quot;' value='D6' />
          <alias key='&quot;SCC7&quot;' value='D7' />
        </aliases>
      </column>
      <column caption='Geographical Area' datatype='string' name='[geographical_area]' role='dimension' type='nominal' />
      <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative' />
      <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
      <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative' />
      <column caption='Mode Index' datatype='real' name='[mode_index]' role='measure' type='quantitative' />
      <column caption='Neigbhorhood Long' datatype='string' name='[neigbhorhood_long]' role='dimension' type='nominal' />
      <column caption='Neighborhood Short' datatype='string' name='[neighborhood_short]' role='dimension' type='nominal' />
      <column caption='Urban Village' datatype='string' name='[urban_village]' role='dimension' type='nominal' />
      <column caption='Zipcode' datatype='string' datatype-customized='true' default-format='*00000' name='[zipcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
      <column-instance column='[Indicator 0 (copy)]' derivation='Avg' name='[avg:Indicator 0 (copy):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Number of Records]' derivation='Count' name='[cnt:Number of Records:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Blockgroup]' derivation='CountD' name='[ctd:Blockgroup:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Number of Records]' derivation='CountD' name='[ctd:Number of Records:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Indicator 0 (copy)]' derivation='Median' name='[med:Indicator 0 (copy):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Number of Records]' derivation='Median' name='[med:Number of Records:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Indicator 1 (copy)]' derivation='None' name='[none:Indicator 1 (copy):nk]' pivot='key' type='nominal' />
      <column-instance column='[Year]' derivation='None' name='[none:Year:nk]' pivot='key' type='nominal' />
      <column-instance column='[council_district]' derivation='None' name='[none:council_district:nk]' pivot='key' type='nominal' />
      <column-instance column='[Indicator 1 (copy 2)]' derivation='User' name='[pcrk:usr:Indicator 1 (copy 2):qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' rank-options='Competition,Ascending' type='PctRank' />
      </column-instance>
      <column-instance column='[Indicator 1 (copy 2)]' derivation='User' name='[rank:usr:Indicator 1 (copy 2):qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' rank-options='Competition,Descending' type='Rank' />
      </column-instance>
      <column-instance column='[Indicator 0 (copy)]' derivation='Sum' name='[sum:Indicator 0 (copy):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_-7112872654770298880]' derivation='User' name='[usr:Calculation_-7112872654770298880:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_1115766813349150721]' derivation='User' name='[usr:Calculation_1115766813349150721:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1115766813349253122]' derivation='User' name='[usr:Calculation_1115766813349253122:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Indicator 1 (copy 2)]' derivation='User' name='[usr:Indicator 1 (copy 2):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Indicator0Text (copy)]' derivation='User' name='[usr:Indicator0Text (copy):nk]' pivot='key' type='nominal' />
      <column-instance column='[Indicator1Text (copy 2)]' derivation='User' name='[usr:Indicator1Text (copy 2):nk]' pivot='key' type='nominal' />
      <column-instance column='[Indicator1Text (copy)]' derivation='User' name='[usr:Indicator1Text (copy):nk]' pivot='key' type='nominal' />
      <group caption='Action (Blockgroup)' hidden='true' name='[Action (Blockgroup)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Blockgroup]' />
        </groupfilter>
      </group>
      <group caption='Action (Council District)' hidden='true' name='[Action (Council District)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[council_district]' />
        </groupfilter>
      </group>
      <group caption='Action (Geocode)' hidden='true' name='[Action (Geocode)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Indicator 1 (copy)]' />
        </groupfilter>
      </group>
      <group caption='Action (Geocode,Year)' hidden='true' name='[Action (Geocode,Year)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Indicator 1 (copy)]' />
          <groupfilter function='level-members' level='[Year]' />
        </groupfilter>
      </group>
      <group caption='Action (Location)' hidden='true' name='[Action (Location)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[location]' />
        </groupfilter>
      </group>
      <group caption='Action (Neigbhorhood Long)' hidden='true' name='[Action (Neigbhorhood Long)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[neigbhorhood_long]' />
        </groupfilter>
      </group>
      <group caption='Action (Year)' hidden='true' name='[Action (Year)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Year]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Exclusions (Geocode,Year)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:Indicator 1 (copy):nk]' />
          <groupfilter function='level-members' level='[none:Year:nk]' />
        </groupfilter>
      </group>
      <extract count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='en_US' class='hyper' dbname='/Users/xx/Documents/My Tableau Repository/Datasources/Demographics.hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='08/15/2018 11:10:37 PM' username='tableau_internal_user'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='1924' timestamp-start='2018-08-15 23:10:37.283' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Population</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Population]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Population</remote-alias>
              <ordinal>0</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1329</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Year</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Year]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Year</remote-alias>
              <ordinal>1</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>4</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Blockgroup</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Blockgroup]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Blockgroup</remote-alias>
              <ordinal>2</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>497</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Race Total</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Race Total]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Race Total</remote-alias>
              <ordinal>3</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1329</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>White alone</remote-name>
              <remote-type>5</remote-type>
              <local-name>[White alone]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>White alone</remote-alias>
              <ordinal>4</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1924</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Black or African American alone</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Black or African American alone]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Black or African American alone</remote-alias>
              <ordinal>5</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>393</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>American Indian and Alaska Native alone</remote-name>
              <remote-type>5</remote-type>
              <local-name>[American Indian and Alaska Native alone]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>American Indian and Alaska Native alone</remote-alias>
              <ordinal>6</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>86</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Asian alone</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Asian alone]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Asian alone</remote-alias>
              <ordinal>7</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1924</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Native Hawaiian and Other Pacific Islander alone</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Native Hawaiian and Other Pacific Islander alone]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Native Hawaiian and Other Pacific Islander alone</remote-alias>
              <ordinal>8</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>30</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Some other race alone</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Some other race alone]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Some other race alone</remote-alias>
              <ordinal>9</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>67</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Two or more races</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Two or more races]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Two or more races</remote-alias>
              <ordinal>10</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1640</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Two or more races: - Two races including Some other race</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Two or more races: - Two races including Some other race]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Two or more races: - Two races including Some other race</remote-alias>
              <ordinal>11</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>34</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Two or more races: - Two races excluding Some other race, and three or more races</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Two or more races: - Two races excluding Some other race, and three or more races]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Two or more races: - Two races excluding Some other race, and three or more races</remote-alias>
              <ordinal>12</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>178</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Edu Total</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Edu Total]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Edu Total</remote-alias>
              <ordinal>13</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>911</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>No schooling completed</remote-name>
              <remote-type>20</remote-type>
              <local-name>[No schooling completed]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>No schooling completed</remote-alias>
              <ordinal>14</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>51</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Nursery school</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Nursery school]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Nursery school</remote-alias>
              <ordinal>15</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>6</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Kindergarten</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Kindergarten]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Kindergarten</remote-alias>
              <ordinal>16</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>6</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>1st grade</remote-name>
              <remote-type>20</remote-type>
              <local-name>[1st grade]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>1st grade</remote-alias>
              <ordinal>17</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>4</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>2nd grade</remote-name>
              <remote-type>20</remote-type>
              <local-name>[2nd grade]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>2nd grade</remote-alias>
              <ordinal>18</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>13</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>3rd grade</remote-name>
              <remote-type>20</remote-type>
              <local-name>[3rd grade]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>3rd grade</remote-alias>
              <ordinal>19</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>13</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>4th grade</remote-name>
              <remote-type>20</remote-type>
              <local-name>[4th grade]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>4th grade</remote-alias>
              <ordinal>20</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>11</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>5th grade</remote-name>
              <remote-type>20</remote-type>
              <local-name>[5th grade]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>5th grade</remote-alias>
              <ordinal>21</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>19</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>6th grade</remote-name>
              <remote-type>20</remote-type>
              <local-name>[6th grade]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>6th grade</remote-alias>
              <ordinal>22</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>40</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>7th grade</remote-name>
              <remote-type>20</remote-type>
              <local-name>[7th grade]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>7th grade</remote-alias>
              <ordinal>23</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>14</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>8th grade</remote-name>
              <remote-type>20</remote-type>
              <local-name>[8th grade]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>8th grade</remote-alias>
              <ordinal>24</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>38</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>9th grade</remote-name>
              <remote-type>20</remote-type>
              <local-name>[9th grade]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>9th grade</remote-alias>
              <ordinal>25</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>43</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>10th grade</remote-name>
              <remote-type>20</remote-type>
              <local-name>[10th grade]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>10th grade</remote-alias>
              <ordinal>26</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>44</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>11th grade</remote-name>
              <remote-type>20</remote-type>
              <local-name>[11th grade]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>11th grade</remote-alias>
              <ordinal>27</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>39</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>12th grade, no diploma</remote-name>
              <remote-type>20</remote-type>
              <local-name>[12th grade, no diploma]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>12th grade, no diploma</remote-alias>
              <ordinal>28</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>49</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Regular high school diploma</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Regular high school diploma]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Regular high school diploma</remote-alias>
              <ordinal>29</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>214</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>GED or alternative credential</remote-name>
              <remote-type>20</remote-type>
              <local-name>[GED or alternative credential]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>GED or alternative credential</remote-alias>
              <ordinal>30</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>62</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Some college, less than 1 year</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Some college, less than 1 year]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Some college, less than 1 year</remote-alias>
              <ordinal>31</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>99</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Some college, 1 or more years, no degree</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Some college, 1 or more years, no degree]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Some college, 1 or more years, no degree</remote-alias>
              <ordinal>32</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>218</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Associate&apos;s degree</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Associate&apos;s degree]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Associate&apos;s degree</remote-alias>
              <ordinal>33</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>156</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Bachelor&apos;s degree</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Bachelor&apos;s degree]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Bachelor&apos;s degree</remote-alias>
              <ordinal>34</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>445</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Master&apos;s degree</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Master&apos;s degree]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Master&apos;s degree</remote-alias>
              <ordinal>35</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>257</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Professional school degree</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Professional school degree]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Professional school degree</remote-alias>
              <ordinal>36</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>106</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Doctorate degree</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Doctorate degree]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Doctorate degree</remote-alias>
              <ordinal>37</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>82</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Med_Hh_Income</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Med_Hh_Income]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Med_Hh_Income</remote-alias>
              <ordinal>38</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1924</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Pc_income</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Pc_income]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Pc_income</remote-alias>
              <ordinal>39</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1924</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Food Stamps Total</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Food Stamps Total]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Food Stamps Total</remote-alias>
              <ordinal>40</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>617</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Tenure Total</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Tenure Total]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Tenure Total</remote-alias>
              <ordinal>41</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>617</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Own</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Own]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Own</remote-alias>
              <ordinal>42</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1924</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Rent</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Rent]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Rent</remote-alias>
              <ordinal>43</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1924</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Some other race</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Some other race]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Some other race</remote-alias>
              <ordinal>44</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>142</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Food Stamps</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Food Stamps]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Food Stamps</remote-alias>
              <ordinal>45</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>483</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Four Year College</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Four Year College]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Four Year College</remote-alias>
              <ordinal>46</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1924</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Dist Downtown</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Dist Downtown]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Dist Downtown</remote-alias>
              <ordinal>47</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>497</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>blkgrp</remote-name>
              <remote-type>5</remote-type>
              <local-name>[blkgrp]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>blkgrp</remote-alias>
              <ordinal>48</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>51</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>AveSalePrice</remote-name>
              <remote-type>5</remote-type>
              <local-name>[AveSalePrice]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>AveSalePrice</remote-alias>
              <ordinal>49</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>51</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>ParcelCount</remote-name>
              <remote-type>5</remote-type>
              <local-name>[ParcelCount]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>ParcelCount</remote-alias>
              <ordinal>50</ordinal>
              <family>Blockgroup_demographics.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>20</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>location</remote-name>
              <remote-type>129</remote-type>
              <local-name>[location]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>location</remote-alias>
              <ordinal>51</ordinal>
              <family>Blockgroup_geocode.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>497</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>neighborhood_short</remote-name>
              <remote-type>129</remote-type>
              <local-name>[neighborhood_short]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>neighborhood_short</remote-alias>
              <ordinal>52</ordinal>
              <family>Blockgroup_geocode.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>80</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>neigbhorhood_long</remote-name>
              <remote-type>129</remote-type>
              <local-name>[neigbhorhood_long]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>neigbhorhood_long</remote-alias>
              <ordinal>53</ordinal>
              <family>Blockgroup_geocode.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>18</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>council_district</remote-name>
              <remote-type>129</remote-type>
              <local-name>[council_district]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>council_district</remote-alias>
              <ordinal>54</ordinal>
              <family>Blockgroup_geocode.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>8</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>zipcode</remote-name>
              <remote-type>129</remote-type>
              <local-name>[zipcode]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>zipcode</remote-alias>
              <ordinal>55</ordinal>
              <family>Blockgroup_geocode.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>26</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>urban_village</remote-name>
              <remote-type>129</remote-type>
              <local-name>[urban_village]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>urban_village</remote-alias>
              <ordinal>56</ordinal>
              <family>Blockgroup_geocode.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>32</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>geographical_area</remote-name>
              <remote-type>129</remote-type>
              <local-name>[geographical_area]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>geographical_area</remote-alias>
              <ordinal>57</ordinal>
              <family>Blockgroup_geocode.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>latitude</remote-name>
              <remote-type>5</remote-type>
              <local-name>[latitude]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>latitude</remote-alias>
              <ordinal>58</ordinal>
              <family>Blockgroup_geocode.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>470</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>longitude</remote-name>
              <remote-type>5</remote-type>
              <local-name>[longitude]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>longitude</remote-alias>
              <ordinal>59</ordinal>
              <family>Blockgroup_geocode.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>483</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>GEO_ID_GRP</remote-name>
              <remote-type>129</remote-type>
              <local-name>[GEO_ID_GRP]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>GEO_ID_GRP</remote-alias>
              <ordinal>60</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>497</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>FEATURE_ID</remote-name>
              <remote-type>20</remote-type>
              <local-name>[FEATURE_ID]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>FEATURE_ID</remote-alias>
              <ordinal>61</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>497</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>BLKGRP_LBL</remote-name>
              <remote-type>129</remote-type>
              <local-name>[BLKGRP_LBL]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>BLKGRP_LBL</remote-alias>
              <ordinal>62</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>497</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>BLKGRP_STR</remote-name>
              <remote-type>129</remote-type>
              <local-name>[BLKGRP_STR]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>BLKGRP_STR</remote-alias>
              <ordinal>63</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>497</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>BLKGRP_INT</remote-name>
              <remote-type>20</remote-type>
              <local-name>[BLKGRP_INT]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>BLKGRP_INT</remote-alias>
              <ordinal>64</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>497</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>GRPLABEL_F</remote-name>
              <remote-type>129</remote-type>
              <local-name>[GRPLABEL_F]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>GRPLABEL_F</remote-alias>
              <ordinal>65</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>497</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>GRPLABEL_C</remote-name>
              <remote-type>129</remote-type>
              <local-name>[GRPLABEL_C]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>GRPLABEL_C</remote-alias>
              <ordinal>66</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>497</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>GRPLABEL_T</remote-name>
              <remote-type>129</remote-type>
              <local-name>[GRPLABEL_T]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>GRPLABEL_T</remote-alias>
              <ordinal>67</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>497</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>TRACT_LBL</remote-name>
              <remote-type>129</remote-type>
              <local-name>[TRACT_LBL]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>TRACT_LBL</remote-alias>
              <ordinal>68</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>121</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>TRACT_STR</remote-name>
              <remote-type>129</remote-type>
              <local-name>[TRACT_STR]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>TRACT_STR</remote-alias>
              <ordinal>69</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>121</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>TRACT_INT</remote-name>
              <remote-type>20</remote-type>
              <local-name>[TRACT_INT]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>TRACT_INT</remote-alias>
              <ordinal>70</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>121</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>TRACT_FLT</remote-name>
              <remote-type>5</remote-type>
              <local-name>[TRACT_FLT]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>TRACT_FLT</remote-alias>
              <ordinal>71</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>121</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>TRACT_DEL</remote-name>
              <remote-type>129</remote-type>
              <local-name>[TRACT_DEL]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>TRACT_DEL</remote-alias>
              <ordinal>72</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>121</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>TRTLABEL_F</remote-name>
              <remote-type>129</remote-type>
              <local-name>[TRTLABEL_F]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>TRTLABEL_F</remote-alias>
              <ordinal>73</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>121</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>TRTLABEL_C</remote-name>
              <remote-type>129</remote-type>
              <local-name>[TRTLABEL_C]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>TRTLABEL_C</remote-alias>
              <ordinal>74</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>121</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>TRTLABEL_T</remote-name>
              <remote-type>129</remote-type>
              <local-name>[TRTLABEL_T]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>TRTLABEL_T</remote-alias>
              <ordinal>75</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>121</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>COUNTY_STR</remote-name>
              <remote-type>129</remote-type>
              <local-name>[COUNTY_STR]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>COUNTY_STR</remote-alias>
              <ordinal>76</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>1</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>COUNTY_INT</remote-name>
              <remote-type>20</remote-type>
              <local-name>[COUNTY_INT]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>COUNTY_INT</remote-alias>
              <ordinal>77</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>STATE_STR</remote-name>
              <remote-type>129</remote-type>
              <local-name>[STATE_STR]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>STATE_STR</remote-alias>
              <ordinal>78</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>1</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>STATE_INT</remote-name>
              <remote-type>20</remote-type>
              <local-name>[STATE_INT]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>STATE_INT</remote-alias>
              <ordinal>79</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>LEVEL_1</remote-name>
              <remote-type>129</remote-type>
              <local-name>[LEVEL_1]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>LEVEL_1</remote-alias>
              <ordinal>80</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>1</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>LEVEL_2</remote-name>
              <remote-type>129</remote-type>
              <local-name>[LEVEL_2]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>LEVEL_2</remote-alias>
              <ordinal>81</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>1</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>LEVEL_3</remote-name>
              <remote-type>129</remote-type>
              <local-name>[LEVEL_3]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>LEVEL_3</remote-alias>
              <ordinal>82</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>121</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>LEVEL_4</remote-name>
              <remote-type>129</remote-type>
              <local-name>[LEVEL_4]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>LEVEL_4</remote-alias>
              <ordinal>83</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>497</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>GROUP_AREA</remote-name>
              <remote-type>5</remote-type>
              <local-name>[GROUP_AREA]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>GROUP_AREA</remote-alias>
              <ordinal>84</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>497</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>GROUP_PERI</remote-name>
              <remote-type>5</remote-type>
              <local-name>[GROUP_PERI]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>GROUP_PERI</remote-alias>
              <ordinal>85</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>497</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Shape_area</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Shape_area]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Shape_area</remote-alias>
              <ordinal>86</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>497</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Shape_len</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Shape_len]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Shape_len</remote-alias>
              <ordinal>87</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>497</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Geometry</remote-name>
              <remote-type>128</remote-type>
              <local-name>[Geometry]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Geometry</remote-alias>
              <ordinal>88</ordinal>
              <family>blkgrp10_shore.shp</family>
              <local-type>spatial</local-type>
              <aggregation>Collect</aggregation>
              <approx-count>497</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>F1</remote-name>
              <remote-type>20</remote-type>
              <local-name>[F1]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>F1</remote-alias>
              <ordinal>89</ordinal>
              <family>two_indices_and_a_bg.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>497</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>block_group</remote-name>
              <remote-type>129</remote-type>
              <local-name>[block_group]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>block_group</remote-alias>
              <ordinal>90</ordinal>
              <family>two_indices_and_a_bg.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>497</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>mode_index</remote-name>
              <remote-type>5</remote-type>
              <local-name>[mode_index]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>mode_index</remote-alias>
              <ordinal>91</ordinal>
              <family>two_indices_and_a_bg.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>301</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>affordability_index</remote-name>
              <remote-type>5</remote-type>
              <local-name>[affordability_index]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>affordability_index</remote-alias>
              <ordinal>92</ordinal>
              <family>two_indices_and_a_bg.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>497</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.349237' measure-ordering='alphabetic' measure-percentage='0.532443' parameter-percentage='0.118321' show-structure='true' user-set-layout='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.004akfr0ztvque1dvtnym0ol9g6i].[avg:Indicator 0 (copy):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.004akfr0ztvque1dvtnym0ol9g6i].[pcrk:usr:Indicator 1 (copy 2):qk:2]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.004akfr0ztvque1dvtnym0ol9g6i].[rank:usr:Indicator 1 (copy 2):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.004akfr0ztvque1dvtnym0ol9g6i].[sum:Indicator 0 (copy):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_-7112872654770298880:nk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813422235657:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator 1 (copy 2):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator0Text (copy):nk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy 2):nk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.004akfr0ztvque1dvtnym0ol9g6i].[ctd:Blockgroup:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.004akfr0ztvque1dvtnym0ol9g6i].[cnt:Number of Records:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.004akfr0ztvque1dvtnym0ol9g6i].[ctd:Number of Records:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.004akfr0ztvque1dvtnym0ol9g6i].[med:Number of Records:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.004akfr0ztvque1dvtnym0ol9g6i].[sum:Number of Records:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy):nk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:council_district:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;None&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;SCC4&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;SCC3&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;SCC6&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;SCC2&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;SCC5&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;SCC1&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;SCC7&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Indicator 1 (copy):nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;530330002004&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;530330006006&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;530330013003&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;530330019001&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;530330026003&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;530330031004&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;530330036001&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;530330042005&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;530330048002&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;530330053012&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;530330057006&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;530330061004&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;530330068001&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;530330074011&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;530330078002&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;530330082003&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;530330089003&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;530330096001&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;530330099002&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;530330103002&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;530330106005&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;530330111013&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;530330115001&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;530330119003&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;98109&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Broadview&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Capitol Hill&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Harrison/Denny-Blaine&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;LAKE CITY&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Montlake&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Roxhill&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Windermere&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;12th Avenue&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330001001&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330005001&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330011002&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330017013&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330022004&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330029003&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330033004&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330041003&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330046001&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330051002&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330056003&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330059005&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330065002&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330071001&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330076001&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330080015&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330087001&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330094002&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330097024&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330101003&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330105002&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330110011&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330113004&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;530330117004&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;98101&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;98134&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Adams&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;BALLARD&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;First Hill&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Madison Park&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Pinehurst&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;SCC1&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Seattle&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Victory Heights&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;West Seattle Junction&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330001005&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330006002&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330012004&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330017024&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330025001&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330030004&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330034003&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330042001&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330047002&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330052003&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330057002&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330060004&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330067001&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330072003&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330077002&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330081002&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330088002&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330095001&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330098003&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330102002&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330106001&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330110022&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330114013&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;530330118004&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;98105&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;98177&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ballard&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Belltown&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;CENTRAL AREA&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Georgetown&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Matthews Beach&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Rainier View&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;SCC5&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;West Queen Anne&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;SCC4&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330003002&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330007004&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330014004&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330020002&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330027003&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330032003&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330038001&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330043021&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330049002&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330053022&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330058014&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330063001&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330069003&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330074021&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330079002&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330084002&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330091001&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330096005&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330100012&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330104011&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330107021&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330111023&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330116002&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;530330120002&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;98117&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Central Business District&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Industrial District&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Morgan Junction&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;North Beach/Blue Ridge&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;NORTHGATE&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;South Beacon Hill&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330002005&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330007001&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330014001&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330019002&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330026004&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330031005&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330036002&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330043011&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330048003&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330053013&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330058011&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330062001&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330068002&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330074012&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330078003&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330083001&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330089004&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330096002&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330099003&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330103003&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330106006&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330111014&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330115002&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;530330119004&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;98112&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Broadway&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Chinatown-International District&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;High Point&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;MAGNOLIA&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Mount Baker&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sand Point&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Yesler Terrace&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330002001&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330006003&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330012005&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330018001&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330025002&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330031001&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330035001&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330042002&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330047003&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330052004&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330057003&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330061001&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330067002&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330073001&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330077003&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330081003&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330088003&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330095002&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330098004&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330102003&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330106002&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330110023&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330114021&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;530330118005&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;98106&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;98178&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ballard-Interbay-Northend&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bitter Lake&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;DELRIDGE&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Green Lake&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Meadowbrook&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ravenna&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;West Woodland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;530330004023&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;530330010002&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;530330017011&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;530330022002&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;530330029001&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;530330033002&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;530330041001&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;530330045001&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;530330050003&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;530330056001&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;530330059003&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;530330064003&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;530330070005&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;530330075004&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;530330080013&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;530330086002&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;530330093003&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;530330097022&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;530330101001&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;530330104024&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;530330109001&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;530330113002&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;530330117002&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;98126&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Fairmount Park&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Lower Queen Anne&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Phinney Ridge&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Pike/Pine&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Sunset Hill&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Uptown&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;23rd &amp; Union-Jackson&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330001002&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330005002&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330012001&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330017021&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330024001&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330030001&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330033005&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330041004&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330046002&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330051003&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330056004&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330060001&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330065003&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330071002&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330076002&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330080021&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330087002&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330094003&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330097025&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330101004&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330105003&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330110012&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330113005&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;530330118001&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;98102&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;98136&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Alki&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;BEACON HILL&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Fremont&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Madrona&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Pioneer Square&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;View Ridge&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Westwood-Highland Park&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330004021&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330009002&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330016002&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330021003&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330028003&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330032007&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330040001&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330044003&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330050001&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330054003&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330059001&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330064001&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330070003&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330075002&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330080011&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330085003&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330093001&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330097014&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330100023&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330104022&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330108002&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330112003&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330116006&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;530330265001&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;98122&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;East Queen Anne&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lawton Park&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;North Queen Anne&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Othello&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;SCC7&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Southeast Magnolia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;UNIVERSITY DISTRICT&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;University District Northwest&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330002002&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330006004&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330013001&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330018002&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330026001&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330031002&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330035002&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330042003&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330047004&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330052005&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330057004&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330061002&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330067003&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330073002&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330077004&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330082001&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330089001&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330095003&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330098005&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330102004&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330106003&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330111011&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330114022&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;530330118006&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;98107&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;98195&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Briarcliff&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;DOWNTOWN&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Greenwood&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Lake City&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mid-Beacon Hill&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Riverview&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Westlake&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330004011&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330008001&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330015001&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330020003&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330027004&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330032004&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330038002&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330043022&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330049003&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330053023&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330058021&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330063002&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330069004&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330074022&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330079003&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330084003&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330091002&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330097011&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330100013&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330104012&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330107022&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330111024&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330116003&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;530330120003&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;98118&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Columbia City&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Denny Triangle&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Interbay&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;North Beacon Hill&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;QUEEN ANNE&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;South Delridge&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330004012&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330008002&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330015002&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330021001&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330028001&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330032005&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330039001&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330044001&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330049004&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330054001&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330058022&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330063003&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330070001&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330074023&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330079004&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330085001&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330092001&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330097012&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330100021&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330104013&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330107023&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330112001&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330116004&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;530330121001&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;98119&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Crown Hill&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;International District&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;North College Park&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;North Rainier&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;RAINIER VALLEY&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;South Lake Union&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;530330004022&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;530330010001&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;530330016003&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;530330022001&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;530330028004&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;530330033001&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;530330040002&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;530330044004&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;530330050002&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;530330054004&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;530330059002&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;530330064002&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;530330070004&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;530330075003&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;530330080012&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;530330086001&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;530330093002&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;530330097021&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;530330100024&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;530330104023&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;530330108003&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;530330113001&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;530330117001&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;98125&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Eastlake&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Greater Duwamish&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Leschi&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Olympic Hills&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Stevens&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Upper Queen Anne&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;WEST SEATTLE&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;530330004024&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;530330011001&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;530330017012&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;530330022003&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;530330029002&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;530330033003&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;530330041002&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;530330045002&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;530330051001&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;530330056002&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;530330059004&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;530330065001&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;530330070006&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;530330075005&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;530330080014&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;530330086003&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;530330094001&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;530330097023&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;530330101002&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;530330105001&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;530330109002&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;530330113003&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;530330117003&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;98133&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Fauntleroy&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Greenwood-Phinney Ridge&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Loyal Heights&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Pike-Market&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;University District&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330002006&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330007002&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330014002&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330019003&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330027001&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330032001&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330036003&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330043012&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330048004&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330053014&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330058012&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330062002&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330069001&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330074013&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330078004&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330083002&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330090001&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330096003&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330099004&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330103004&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330107011&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330111021&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330115003&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;530330119005&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;98115&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bryant&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Highland Park&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Madison-Miller&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;None&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;SCC3&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Seaview&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;SCC6&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330002003&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330006005&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330013002&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330018003&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330026002&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330031003&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330035003&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330042004&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330048001&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330053011&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330057005&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330061003&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330067004&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330073003&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330078001&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330082002&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330089002&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330095004&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330099001&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330103001&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330106004&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330111012&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330114023&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;530330119001&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;98108&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;98199&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bitter Lake Village&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Brighton&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Haller Lake&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;INTERBAY&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Minor&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Roosevelt&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Whittier Heights&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330001003&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330005003&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330012002&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330017022&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330024002&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330030002&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330034001&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330041005&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330046003&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330052001&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330056005&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330060002&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330066001&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330072001&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330076003&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330080022&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330087003&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330094004&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330098001&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330101005&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330105004&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330110013&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330114011&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;530330118002&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;98103&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;98144&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Admiral&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Arbor Heights&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;CAPITOL HILL&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Gatewood&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mann&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Portage Bay&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;SCC2&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Wallingford&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330004013&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330009001&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330016001&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330021002&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330028002&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330032006&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330039002&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330044002&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330049005&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330054002&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330058023&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330063004&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330070002&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330075001&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330079005&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330085002&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330092002&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330097013&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330100022&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330104021&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330108001&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330112002&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330116005&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;530330121002&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;98121&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Dunlap&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Laurelhurst&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;North Delridge&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Northgate&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;SEWARD PARK&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;South Park&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;University Campus&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330003001&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330007003&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330014003&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330020001&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330027002&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330032002&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330036004&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330043013&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330049001&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330053021&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330058013&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330062003&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330069002&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330074014&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330079001&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330084001&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330090002&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330096004&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330100011&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330103005&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330107012&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330111022&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330116001&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;530330120001&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;98116&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cedar Park&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Commercial Core&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Holly Park&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;NO BROADER TERM&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;North Admiral&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Seward Park&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330001004&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330006001&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330012003&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330017023&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330024003&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330030003&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330034002&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330041006&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330047001&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330052002&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330057001&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330060003&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330066002&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330072002&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330077001&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330081001&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330088001&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330094005&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330098002&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330102001&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330105005&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330110021&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330114012&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;530330118003&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;98104&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;98146&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Atlantic&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Aurora-Licton Springs&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;CASCADE&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Genesee&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Maple Leaf&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Rainier Beach&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Wedgwood&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Indicator2 Parameter' datatype='string' name='[Indicator1 Parameter (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Median Household Income&quot;'>
          <calculation class='tableau' formula='&quot;Median Household Income&quot;' />
        </column>
        <column caption='Indicator0 Parameter' datatype='string' name='[Indicator2 Parameter (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Median Household Income&quot;'>
          <calculation class='tableau' formula='&quot;Median Household Income&quot;' />
        </column>
        <column caption='Indicator1 Parameter' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Mobility Index&quot;'>
          <calculation class='tableau' formula='&quot;Mobility Index&quot;' />
        </column>
        <column caption='Geocode Parameter' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Neighborhood Long&quot;'>
          <calculation class='tableau' formula='&quot;Neighborhood Long&quot;' />
        </column>
        <column caption='Year Parameter' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;2016&quot;'>
          <calculation class='tableau' formula='&quot;2016&quot;' />
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Filter 1 (generated)' name='[Action1]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='SLICE' type='sheet' worksheet='SliceDistrict' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='SLICE' />
      </command>
    </action>
    <action caption='Highlight1' name='[Action2]'>
      <activation auto-clear='true' type='on-hover' />
      <source type='all'>
        <exclude-sheet name='CompareHistogram1' />
        <exclude-sheet name='Explore Bubble' />
      </source>
      <command command='tsc:brush'>
        <param name='field-captions' value='Location' />
        <param name='target' value='COMPARE' />
      </command>
    </action>
    <action caption='Filter 2 (generated)' name='[Action3]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='SLICE' type='sheet' worksheet='MapSlice' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='SLICE' />
      </command>
    </action>
    <action caption='Filter 3 (generated)' name='[Action4]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='EXPLORE TRENDS' type='sheet' worksheet='Explore Bubble' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='EXPLORE TRENDS' />
      </command>
    </action>
    <action caption='Filter 4 (generated)' name='[Action5]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='SLICE' type='sheet' worksheet='Slice Histogram' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='SLICE' />
      </command>
    </action>
    <action caption='Filter 5 (generated)' name='[Action6]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='SLICE' type='sheet' worksheet='SliceNeigborhood' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='SLICE' />
      </command>
    </action>
    <action caption='Highlight 1 (generated)' name='[Action7]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Explore Bubble' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Geocode' />
        <param name='target' value='Explore Bubble' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='BlockGroup'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Æ </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Demographics' name='federated.004akfr0ztvque1dvtnym0ol9g6i' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Indicator2 Parameter' datatype='string' name='[Indicator1 Parameter (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Median Household Income&quot;'>
              <calculation class='tableau' formula='&quot;Median Household Income&quot;' />
            </column>
            <column caption='Indicator1 Parameter' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Mobility Index&quot;'>
              <calculation class='tableau' formula='&quot;Mobility Index&quot;' />
            </column>
            <column caption='Year Parameter' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;2016&quot;'>
              <calculation class='tableau' formula='&quot;2016&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.004akfr0ztvque1dvtnym0ol9g6i'>
            <column datatype='real' name='[Asian alone]' role='measure' type='quantitative' />
            <column datatype='real' name='[AveSalePrice]' role='measure' type='quantitative' />
            <column datatype='real' name='[Black or African American alone]' role='measure' type='quantitative' />
            <column caption='Indicator1Text' datatype='string' name='[Calculation_-7112872654770298880]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &quot;Dist Downtown&quot; THEN  STR(ROUND([Calculation_1115766813349150721],1)) + &quot; Miles&quot; // Distance&#13;&#10;&#13;&#10;ELSEIF [Calculation_1115766813349150721] &lt;= 1 THEN STR(ROUND([Calculation_1115766813349150721]*100,0)) + &quot;%&quot; // Percentage&#13;&#10;ELSEIF [Calculation_1115766813349150721] &lt;= 3000 THEN STR(ROUND([Calculation_1115766813349150721],0))  // Population&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 3000 THEN &quot;$&quot; +  STR(ROUND([Calculation_1115766813349150721]/1000)) + &quot;,000&quot; // Currency&#13;&#10;END' />
            </column>
            <column caption='Indicator 1' datatype='real' name='[Calculation_1115766813349150721]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &quot;Percent POC&quot; THEN (1-AVG([White alone]))&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Own&quot; THEN AVG([Own])&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Rent&quot; THEN AVG([Rent]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Asian&quot; THEN AVG([Asian alone]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Black&quot; THEN AVG([Black or African American alone])&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent White&quot; THEN AVG([White alone]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Food Stamps&quot; THEN AVG([Food Stamps]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Four Year College&quot; THEN AVG([Four Year College]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Median Household Income&quot; THEN AVG([Med_Hh_Income]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Per Capita Income&quot; THEN AVG([Pc_income]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Population&quot; THEN AVG([Population])&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Dist Downtown&quot; THEN AVG([Dist Downtown])&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Sales Price&quot; THEN AVG([AveSalePrice])&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Sales Volume&quot; THEN AVG([ParcelCount])&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Mobility Index&quot; THEN MAX([Calculation_125748977171722240])&#10;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Indicator 2' datatype='real' name='[Calculation_1115766813349253122]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent POC&quot; THEN (1-AVG([White alone]))&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Own&quot; THEN AVG([Own])&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Rent&quot; THEN AVG([Rent]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Asian&quot; THEN AVG([Asian alone]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Black&quot; THEN AVG([Black or African American alone])&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent White&quot; THEN AVG([White alone]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Food Stamps&quot; THEN AVG([Food Stamps]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Four Year College&quot; THEN AVG([Four Year College]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Median Household Income&quot; THEN AVG([Med_Hh_Income]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Per Capita Income&quot; THEN AVG([Pc_income]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Population&quot; THEN AVG([Population])&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Dist Downtown&quot; THEN AVG([Dist Downtown])&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Sales Price&quot; THEN AVG([AveSalePrice])&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Sales Volume&quot; THEN AVG([ParcelCount])&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Filter Council District' datatype='boolean' name='[Calculation_1115766813350019075]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[council_district] != &quot;None&quot;' />
            </column>
            <column caption='Filter Year Parameter' datatype='boolean' name='[Calculation_1115766813408124936]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Year] = [Parameters].[Parameter 4] OR [Parameters].[Parameter 4] = &quot;ALL YEARS&quot;' />
            </column>
            <column caption='Mobility Index' datatype='real' name='[Calculation_125748977171722240]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([affordability_index]) * 100' />
            </column>
            <column datatype='real' name='[Dist Downtown]' role='measure' type='quantitative' />
            <column datatype='real' name='[Food Stamps]' role='measure' type='quantitative' />
            <column datatype='real' name='[Four Year College]' role='measure' type='quantitative' />
            <column caption='Indicator2Text' datatype='string' name='[Indicator1Text (copy)]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator1 Parameter (copy)] = &quot;Dist Downtown&quot; THEN  STR(ROUND([Calculation_1115766813349253122],1)) + &quot; Miles&quot; // Distance&#13;&#10;&#13;&#10;ELSEIF [Calculation_1115766813349253122] &lt;= 1 THEN STR(ROUND([Calculation_1115766813349253122]*100,0)) + &quot;%&quot; // Percentage&#13;&#10;ELSEIF [Calculation_1115766813349253122] &lt;= 3000 THEN STR(ROUND([Calculation_1115766813349253122],0))  // Population&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 3000 THEN &quot;$ &quot; +  STR(ROUND([Calculation_1115766813349253122]/1000,0)) + &quot;,000&quot; // Currency&#13;&#10;END' />
            </column>
            <column caption='Med Hh Income' datatype='real' name='[Med_Hh_Income]' role='measure' type='quantitative' />
            <column datatype='real' name='[Own]' role='measure' type='quantitative' />
            <column datatype='real' name='[ParcelCount]' role='measure' type='quantitative' />
            <column caption='Pc income' datatype='real' name='[Pc_income]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column datatype='real' name='[Rent]' role='measure' type='quantitative' />
            <column datatype='real' name='[White alone]' role='measure' type='quantitative' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column caption='Affordability Index' datatype='real' name='[affordability_index]' role='measure' type='quantitative' />
            <column caption='Council District' datatype='string' name='[council_district]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;SCC1&quot;' value='D1' />
                <alias key='&quot;SCC2&quot;' value='D2' />
                <alias key='&quot;SCC3&quot;' value='D3' />
                <alias key='&quot;SCC4&quot;' value='D4' />
                <alias key='&quot;SCC5&quot;' value='D5' />
                <alias key='&quot;SCC6&quot;' value='D6' />
                <alias key='&quot;SCC7&quot;' value='D7' />
              </aliases>
            </column>
            <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1115766813350019075]' derivation='None' name='[none:Calculation_1115766813350019075:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1115766813408124936]' derivation='None' name='[none:Calculation_1115766813408124936:nk]' pivot='key' type='nominal' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_-7112872654770298880]' derivation='User' name='[usr:Calculation_-7112872654770298880:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1115766813349150721]' derivation='User' name='[usr:Calculation_1115766813349150721:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1115766813349253122]' derivation='User' name='[usr:Calculation_1115766813349253122:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Indicator1Text (copy)]' derivation='User' name='[usr:Indicator1Text (copy):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813350019075:nk]'>
            <groupfilter function='member' level='[none:Calculation_1115766813350019075:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]'>
            <groupfilter function='member' level='[none:Calculation_1115766813408124936:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813350019075:nk]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' domain-expand='false' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]' field-type='quantitative' scope='cols' type='space' />
            <format attr='subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]' scope='cols' value='true' />
            <encoding attr='space' class='0' domain-expand='false' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' field-type='quantitative' scope='rows' type='space' />
            <format attr='subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' scope='rows' value='true' />
            <format attr='width' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' value='56' />
            <format attr='title' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' scope='rows' value=' ' />
            <format attr='title' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]' scope='cols' value=' ' />
            <format attr='height' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]' value='36' />
          </style-rule>
        </style>
        <panes>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:location:nk]' />
              <tooltip column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_-7112872654770298880:nk]' />
              <tooltip column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy):nk]' />
            </encodings>
            <trendline enable-confidence-bands='true' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Location:&#9;</run>
                <run bold='true'>&lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:location:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>&lt;[Parameters].[Parameter 1]&gt;:&#9;</run>
                <run bold='true'>&lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_-7112872654770298880:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>&lt;[Parameters].[Indicator1 Parameter (copy)]&gt;:&#9;</run>
                <run bold='true'>&lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy):nk]&gt;</run>
                <run>Æ&#10;&#10;</run>
                <run fontcolor='#787878'>Council District:&#9;</run>
                <run bold='true'>&lt;[federated.0d0gcge13r4nep1fh11bu04aw7pm].[attr:council_district:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Geographical Area:&#9;</run>
                <run bold='true'>&lt;[federated.0d0gcge13r4nep1fh11bu04aw7pm].[attr:geographical_area:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Neigbhorhood Long:&#9;</run>
                <run bold='true'>&lt;[federated.0d0gcge13r4nep1fh11bu04aw7pm].[attr:neigbhorhood_long:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Neighborhood Short:&#9;</run>
                <run bold='true'>&lt;[federated.0d0gcge13r4nep1fh11bu04aw7pm].[attr:neighborhood_short:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Urban Village:&#9;</run>
                <run bold='true'>&lt;[federated.0d0gcge13r4nep1fh11bu04aw7pm].[attr:urban_village:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Zipcode:&#9;</run>
                <run bold='true'>&lt;[federated.0d0gcge13r4nep1fh11bu04aw7pm].[attr:zipcode:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.58171272277832031' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-color' value='#555555' />
                <format attr='mark-transparency' value='180' />
              </style-rule>
              <style-rule element='trendline'>
                <format attr='stroke-size' value='2' />
                <format attr='stroke-color' value='#1691d0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</rows>
        <cols>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Compare Header'>
      <table>
        <view>
          <datasources>
            <datasource caption='Demographics' name='federated.004akfr0ztvque1dvtnym0ol9g6i' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Indicator2 Parameter' datatype='string' name='[Indicator1 Parameter (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Median Household Income&quot;'>
              <calculation class='tableau' formula='&quot;Median Household Income&quot;' />
            </column>
            <column caption='Indicator1 Parameter' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Mobility Index&quot;'>
              <calculation class='tableau' formula='&quot;Mobility Index&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.004akfr0ztvque1dvtnym0ol9g6i'>
            <column caption='Compare Header' datatype='string' name='[Calculation_-7112872654698848246]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='&quot;Are &quot; + Replace([Parameters].[Parameter 1],&quot;Percent &quot;,&quot;&quot;) + &quot; and &quot; + REPLACE([Parameters].[Indicator1 Parameter (copy)],&quot;Percent &quot;,&quot;&quot; ) + &quot; correlated?&quot;' />
            </column>
            <column-instance column='[Calculation_-7112872654698848246]' derivation='None' name='[none:Calculation_-7112872654698848246:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='932' />
            <format attr='font-family' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_-7112872654698848246:nk]' value='Tableau Semibold' />
            <format attr='font-weight' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_-7112872654698848246:nk]' value='bold' />
            <format attr='color' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_-7112872654698848246:nk]' value='#000000' />
            <format attr='text-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_-7112872654698848246:nk]' value='center' />
            <format attr='vertical-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_-7112872654698848246:nk]' value='center' />
            <format attr='font-size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_-7112872654698848246:nk]' value='12' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_-7112872654698848246:nk]' value='center' />
            <format attr='font-family' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_-7112872654698848246:nk]' value='Tableau Semibold' />
            <format attr='font-size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_-7112872654698848246:nk]' value='14' />
            <format attr='color' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_-7112872654698848246:nk]' value='#1b1b1b' />
            <format attr='font-weight' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_-7112872654698848246:nk]' value='bold' />
            <format attr='vertical-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_-7112872654698848246:nk]' value='bottom' />
            <format attr='wrap' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_-7112872654698848246:nk]' value='on' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_-7112872654698848246:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='Compare Narrative'>
      <table>
        <view>
          <datasources>
            <datasource caption='Demographics' name='federated.004akfr0ztvque1dvtnym0ol9g6i' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Indicator2 Parameter' datatype='string' name='[Indicator1 Parameter (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Median Household Income&quot;'>
              <calculation class='tableau' formula='&quot;Median Household Income&quot;' />
            </column>
            <column caption='Indicator1 Parameter' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Mobility Index&quot;'>
              <calculation class='tableau' formula='&quot;Mobility Index&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.004akfr0ztvque1dvtnym0ol9g6i'>
            <column caption='Compare Narrative' datatype='string' name='[Compare Header (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='&quot;Each dot in the chart above represents one census block group of around 1,500 people. &quot; + &#13;&#10;&quot;The trend line can provide a sense of whether there is a relationship between the two metrics. &quot; +&#13;&#10;&quot;A upward sloping line indicates that &quot; + [Parameters].[Parameter 1] + &quot; is correlated with &quot; + [Parameters].[Indicator1 Parameter (copy)] + &quot;. &quot; +&#13;&#10;&quot;An downward sloping line implies a negative correlation, so the higher the &quot; + [Parameters].[Parameter 1] + &quot;, the lower the &quot; + [Parameters].[Indicator1 Parameter (copy)] + &quot;.&quot;' />
            </column>
            <column-instance column='[Compare Header (copy)]' derivation='None' name='[none:Compare Header (copy):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='932' />
            <format attr='height' value='71' />
            <format attr='font-size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Compare Header (copy):nk]' value='10' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Compare Header (copy):nk]' value='11' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Compare Header (copy):nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='CompareHistogram1'>
      <table>
        <view>
          <datasources>
            <datasource caption='Demographics' name='federated.004akfr0ztvque1dvtnym0ol9g6i' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Indicator1 Parameter' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Mobility Index&quot;'>
              <calculation class='tableau' formula='&quot;Mobility Index&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.004akfr0ztvque1dvtnym0ol9g6i'>
            <column datatype='real' name='[Asian alone]' role='measure' type='quantitative' />
            <column datatype='real' name='[AveSalePrice]' role='measure' type='quantitative' />
            <column datatype='real' name='[Black or African American alone]' role='measure' type='quantitative' />
            <column datatype='string' name='[Blockgroup]' role='dimension' type='nominal' />
            <column caption='Indicator 1' datatype='real' name='[Calculation_1115766813349150721]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &quot;Percent POC&quot; THEN (1-AVG([White alone]))&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Own&quot; THEN AVG([Own])&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Rent&quot; THEN AVG([Rent]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Asian&quot; THEN AVG([Asian alone]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Black&quot; THEN AVG([Black or African American alone])&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent White&quot; THEN AVG([White alone]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Food Stamps&quot; THEN AVG([Food Stamps]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Four Year College&quot; THEN AVG([Four Year College]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Median Household Income&quot; THEN AVG([Med_Hh_Income]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Per Capita Income&quot; THEN AVG([Pc_income]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Population&quot; THEN AVG([Population])&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Dist Downtown&quot; THEN AVG([Dist Downtown])&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Sales Price&quot; THEN AVG([AveSalePrice])&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Sales Volume&quot; THEN AVG([ParcelCount])&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Mobility Index&quot; THEN MAX([Calculation_125748977171722240])&#10;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Filter Council District' datatype='boolean' name='[Calculation_1115766813350019075]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[council_district] != &quot;None&quot;' />
            </column>
            <column caption='Indicator 1 Bin' datatype='real' name='[Calculation_1115766813361057796]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &quot;Dist Downtown&quot; THEN ROUND([Calculation_1115766813349150721],1)&#13;&#10;&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.95 AND [Calculation_1115766813349150721] &lt;= 1.0 THEN .95&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.90 AND [Calculation_1115766813349150721] &lt;= .95 THEN .90&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.85 AND [Calculation_1115766813349150721] &lt;= .90 THEN .85&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.80 AND [Calculation_1115766813349150721] &lt;= .85 THEN .80&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.75 AND [Calculation_1115766813349150721] &lt;= .80 THEN .75&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.70 AND [Calculation_1115766813349150721] &lt;= .75 THEN .70&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.65 AND [Calculation_1115766813349150721] &lt;= .70 THEN .65&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.60 AND [Calculation_1115766813349150721] &lt;= .65 THEN .60&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.55 AND [Calculation_1115766813349150721] &lt;= .60 THEN .55&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.50 AND [Calculation_1115766813349150721] &lt;= .55 THEN .50&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.45 AND [Calculation_1115766813349150721] &lt;= .50 THEN .45&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.40 AND [Calculation_1115766813349150721] &lt;= .45 THEN .40&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.35 AND [Calculation_1115766813349150721] &lt;= .40 THEN .35&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.30 AND [Calculation_1115766813349150721] &lt;= .35 THEN .30&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.25 AND [Calculation_1115766813349150721] &lt;= .30 THEN .25&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.20 AND [Calculation_1115766813349150721] &lt;= .25 THEN .20&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.15 AND [Calculation_1115766813349150721] &lt;= .20 THEN .15&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.10 AND [Calculation_1115766813349150721] &lt;= .15 THEN .10&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.05 AND [Calculation_1115766813349150721] &lt;= .10 THEN .05&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 0.00 AND [Calculation_1115766813349150721] &lt;= .05 THEN .00&#13;&#10;ELSEIF [Calculation_1115766813349150721] &lt; 5000 THEN ROUND([Calculation_1115766813349150721]/100,0)*100&#13;&#10;ELSE ROUND([Calculation_1115766813349150721]/10000,0)*10000&#13;&#10;END' />
            </column>
            <column caption='Mobility Index' datatype='real' name='[Calculation_125748977171722240]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([affordability_index]) * 100' />
            </column>
            <column datatype='real' name='[Dist Downtown]' role='measure' type='quantitative' />
            <column datatype='real' name='[Food Stamps]' role='measure' type='quantitative' />
            <column datatype='real' name='[Four Year College]' role='measure' type='quantitative' />
            <column caption='Med Hh Income' datatype='real' name='[Med_Hh_Income]' role='measure' type='quantitative' />
            <column datatype='real' name='[Own]' role='measure' type='quantitative' />
            <column datatype='real' name='[ParcelCount]' role='measure' type='quantitative' />
            <column caption='Pc income' datatype='real' name='[Pc_income]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column datatype='real' name='[Rent]' role='measure' type='quantitative' />
            <column datatype='real' name='[White alone]' role='measure' type='quantitative' />
            <column caption='Affordability Index' datatype='real' name='[affordability_index]' role='measure' type='quantitative' />
            <column caption='Council District' datatype='string' name='[council_district]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;SCC1&quot;' value='D1' />
                <alias key='&quot;SCC2&quot;' value='D2' />
                <alias key='&quot;SCC3&quot;' value='D3' />
                <alias key='&quot;SCC4&quot;' value='D4' />
                <alias key='&quot;SCC5&quot;' value='D5' />
                <alias key='&quot;SCC6&quot;' value='D6' />
                <alias key='&quot;SCC7&quot;' value='D7' />
              </aliases>
            </column>
            <column-instance column='[Blockgroup]' derivation='CountD' name='[ctd:Blockgroup:qk]' pivot='key' type='quantitative' />
            <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1115766813350019075]' derivation='None' name='[none:Calculation_1115766813350019075:nk]' pivot='key' type='nominal' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1115766813349150721]' derivation='User' name='[usr:Calculation_1115766813349150721:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1115766813361057796]' derivation='User' name='[usr:Calculation_1115766813361057796:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813350019075:nk]'>
            <groupfilter function='member' level='[none:Calculation_1115766813350019075:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813350019075:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[ctd:Blockgroup:qk]' scope='rows' value='' />
            <format attr='subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[ctd:Blockgroup:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[ctd:Blockgroup:qk]' scope='rows' value='true' />
            <format attr='title' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813361057796:qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813361057796:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813361057796:qk]' scope='cols' value='true' />
            <format attr='height' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813361057796:qk]' value='21' />
            <format attr='display' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[ctd:Blockgroup:qk]' scope='rows' value='false' />
            <format attr='line-visibility' scope='rows' value='off' />
            <format attr='tick-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='header'>
            <format attr='border-style' data-class='total' scope='rows' value='none' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]' palette='red_green_gold_diverging_10_0' reverse='true' type='interpolated' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='border-style' data-class='total' scope='rows' value='none' />
          </style-rule>
          <style-rule element='gridline'>
            <format attr='line-visibility' scope='cols' value='off' />
            <format attr='line-visibility' scope='rows' value='off' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='line-visibility' scope='cols' value='off' />
            <format attr='line-visibility' scope='rows' value='off' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]' />
              <lod column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:location:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.5487293004989624' />
                <format attr='mark-color' value='#492f92' />
                <format attr='has-stroke' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.004akfr0ztvque1dvtnym0ol9g6i].[ctd:Blockgroup:qk]</rows>
        <cols>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813361057796:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='CompareHistogram2'>
      <table>
        <view>
          <datasources>
            <datasource caption='Demographics' name='federated.004akfr0ztvque1dvtnym0ol9g6i' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Indicator2 Parameter' datatype='string' name='[Indicator1 Parameter (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Median Household Income&quot;'>
              <calculation class='tableau' formula='&quot;Median Household Income&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.004akfr0ztvque1dvtnym0ol9g6i'>
            <column datatype='real' name='[Asian alone]' role='measure' type='quantitative' />
            <column datatype='real' name='[AveSalePrice]' role='measure' type='quantitative' />
            <column datatype='real' name='[Black or African American alone]' role='measure' type='quantitative' />
            <column datatype='string' name='[Blockgroup]' role='dimension' type='nominal' />
            <column caption='Indicator 2' datatype='real' name='[Calculation_1115766813349253122]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent POC&quot; THEN (1-AVG([White alone]))&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Own&quot; THEN AVG([Own])&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Rent&quot; THEN AVG([Rent]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Asian&quot; THEN AVG([Asian alone]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Black&quot; THEN AVG([Black or African American alone])&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent White&quot; THEN AVG([White alone]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Food Stamps&quot; THEN AVG([Food Stamps]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Four Year College&quot; THEN AVG([Four Year College]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Median Household Income&quot; THEN AVG([Med_Hh_Income]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Per Capita Income&quot; THEN AVG([Pc_income]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Population&quot; THEN AVG([Population])&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Dist Downtown&quot; THEN AVG([Dist Downtown])&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Sales Price&quot; THEN AVG([AveSalePrice])&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Sales Volume&quot; THEN AVG([ParcelCount])&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Filter Council District' datatype='boolean' name='[Calculation_1115766813350019075]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[council_district] != &quot;None&quot;' />
            </column>
            <column datatype='real' name='[Dist Downtown]' role='measure' type='quantitative' />
            <column datatype='real' name='[Food Stamps]' role='measure' type='quantitative' />
            <column datatype='real' name='[Four Year College]' role='measure' type='quantitative' />
            <column caption='Indicator 2 Bin' datatype='real' name='[Indicator 1 Bin (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator1 Parameter (copy)] = &quot;Dist Downtown&quot; THEN ROUND([Calculation_1115766813349253122],1)&#13;&#10;&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.95 AND [Calculation_1115766813349253122] &lt;= 1.0 THEN .95&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.90 AND [Calculation_1115766813349253122] &lt;= .95 THEN .90&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.85 AND [Calculation_1115766813349253122] &lt;= .90 THEN .85&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.80 AND [Calculation_1115766813349253122] &lt;= .85 THEN .80&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.75 AND [Calculation_1115766813349253122] &lt;= .80 THEN .75&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.70 AND [Calculation_1115766813349253122] &lt;= .75 THEN .70&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.65 AND [Calculation_1115766813349253122] &lt;= .70 THEN .65&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.60 AND [Calculation_1115766813349253122] &lt;= .65 THEN .60&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.55 AND [Calculation_1115766813349253122] &lt;= .60 THEN .55&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.50 AND [Calculation_1115766813349253122] &lt;= .55 THEN .50&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.45 AND [Calculation_1115766813349253122] &lt;= .50 THEN .45&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.40 AND [Calculation_1115766813349253122] &lt;= .45 THEN .40&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.35 AND [Calculation_1115766813349253122] &lt;= .40 THEN .35&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.30 AND [Calculation_1115766813349253122] &lt;= .35 THEN .30&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.25 AND [Calculation_1115766813349253122] &lt;= .30 THEN .25&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.20 AND [Calculation_1115766813349253122] &lt;= .25 THEN .20&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.15 AND [Calculation_1115766813349253122] &lt;= .20 THEN .15&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.10 AND [Calculation_1115766813349253122] &lt;= .15 THEN .10&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.05 AND [Calculation_1115766813349253122] &lt;= .10 THEN .05&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 0.00 AND [Calculation_1115766813349253122] &lt;= .05 THEN .00&#13;&#10;ELSEIF [Calculation_1115766813349253122] &lt; 5000 THEN ROUND([Calculation_1115766813349253122]/100,0)*100&#13;&#10;ELSE ROUND([Calculation_1115766813349253122]/10000,0)*10000&#13;&#10;END' />
            </column>
            <column caption='Med Hh Income' datatype='real' name='[Med_Hh_Income]' role='measure' type='quantitative' />
            <column datatype='real' name='[Own]' role='measure' type='quantitative' />
            <column datatype='real' name='[ParcelCount]' role='measure' type='quantitative' />
            <column caption='Pc income' datatype='real' name='[Pc_income]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column datatype='real' name='[Rent]' role='measure' type='quantitative' />
            <column datatype='real' name='[White alone]' role='measure' type='quantitative' />
            <column caption='Council District' datatype='string' name='[council_district]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;SCC1&quot;' value='D1' />
                <alias key='&quot;SCC2&quot;' value='D2' />
                <alias key='&quot;SCC3&quot;' value='D3' />
                <alias key='&quot;SCC4&quot;' value='D4' />
                <alias key='&quot;SCC5&quot;' value='D5' />
                <alias key='&quot;SCC6&quot;' value='D6' />
                <alias key='&quot;SCC7&quot;' value='D7' />
              </aliases>
            </column>
            <column-instance column='[Blockgroup]' derivation='CountD' name='[ctd:Blockgroup:qk]' pivot='key' type='quantitative' />
            <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1115766813350019075]' derivation='None' name='[none:Calculation_1115766813350019075:nk]' pivot='key' type='nominal' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1115766813349253122]' derivation='User' name='[usr:Calculation_1115766813349253122:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Indicator 1 Bin (copy)]' derivation='User' name='[usr:Indicator 1 Bin (copy):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813350019075:nk]'>
            <groupfilter function='member' level='[none:Calculation_1115766813350019075:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813350019075:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[ctd:Blockgroup:qk]' scope='rows' value='' />
            <format attr='subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[ctd:Blockgroup:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[ctd:Blockgroup:qk]' scope='rows' value='true' />
            <format attr='title' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator 1 Bin (copy):qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator 1 Bin (copy):qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator 1 Bin (copy):qk]' scope='cols' value='true' />
            <format attr='display' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[ctd:Blockgroup:qk]' scope='rows' value='false' />
            <format attr='line-visibility' scope='rows' value='off' />
            <format attr='tick-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='header'>
            <format attr='border-style' data-class='total' scope='cols' value='none' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' palette='red_green_gold_diverging_10_0' reverse='true' type='interpolated' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='border-style' data-class='total' scope='cols' value='none' />
          </style-rule>
          <style-rule element='gridline'>
            <format attr='line-visibility' scope='cols' value='off' />
            <format attr='line-visibility' scope='rows' value='off' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='line-visibility' scope='cols' value='off' />
            <format attr='line-visibility' scope='rows' value='off' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' />
              <lod column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:location:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.5487293004989624' />
                <format attr='mark-color' value='#492f92' />
                <format attr='has-stroke' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.004akfr0ztvque1dvtnym0ol9g6i].[ctd:Blockgroup:qk]</rows>
        <cols>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator 1 Bin (copy):qk]</cols>
      </table>
    </worksheet>
    <worksheet name='CompareSlice1'>
      <table>
        <view>
          <datasources>
            <datasource caption='Demographics' name='federated.004akfr0ztvque1dvtnym0ol9g6i' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Indicator0 Parameter' datatype='string' name='[Indicator2 Parameter (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Median Household Income&quot;'>
              <calculation class='tableau' formula='&quot;Median Household Income&quot;' />
            </column>
            <column caption='Indicator1 Parameter' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Mobility Index&quot;'>
              <calculation class='tableau' formula='&quot;Mobility Index&quot;' />
            </column>
            <column caption='Year Parameter' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;2016&quot;'>
              <calculation class='tableau' formula='&quot;2016&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.004akfr0ztvque1dvtnym0ol9g6i'>
            <column datatype='real' name='[Asian alone]' role='measure' type='quantitative' />
            <column datatype='real' name='[AveSalePrice]' role='measure' type='quantitative' />
            <column datatype='real' name='[Black or African American alone]' role='measure' type='quantitative' />
            <column datatype='string' name='[Blockgroup]' role='dimension' type='nominal' />
            <column caption='Indicator 1' datatype='real' name='[Calculation_1115766813349150721]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &quot;Percent POC&quot; THEN (1-AVG([White alone]))&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Own&quot; THEN AVG([Own])&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Rent&quot; THEN AVG([Rent]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Asian&quot; THEN AVG([Asian alone]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Black&quot; THEN AVG([Black or African American alone])&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent White&quot; THEN AVG([White alone]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Food Stamps&quot; THEN AVG([Food Stamps]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Four Year College&quot; THEN AVG([Four Year College]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Median Household Income&quot; THEN AVG([Med_Hh_Income]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Per Capita Income&quot; THEN AVG([Pc_income]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Population&quot; THEN AVG([Population])&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Dist Downtown&quot; THEN AVG([Dist Downtown])&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Sales Price&quot; THEN AVG([AveSalePrice])&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Sales Volume&quot; THEN AVG([ParcelCount])&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Mobility Index&quot; THEN MAX([Calculation_125748977171722240])&#10;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Filter Year Parameter' datatype='boolean' name='[Calculation_1115766813408124936]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Year] = [Parameters].[Parameter 4] OR [Parameters].[Parameter 4] = &quot;ALL YEARS&quot;' />
            </column>
            <column caption='Mobility Index' datatype='real' name='[Calculation_125748977171722240]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([affordability_index]) * 100' />
            </column>
            <column datatype='real' name='[Dist Downtown]' role='measure' type='quantitative' />
            <column datatype='real' name='[Food Stamps]' role='measure' type='quantitative' />
            <column datatype='real' name='[Four Year College]' role='measure' type='quantitative' />
            <column datatype='spatial' name='[Geometry]' role='measure' type='nominal' />
            <column caption='Indicator 0 NonAgg' datatype='real' name='[Indicator 0 (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent POC&quot; THEN 1-[White alone]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Own&quot; THEN [Own]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Rent&quot; THEN [Rent]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Asian&quot; THEN [Asian alone]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Black&quot; THEN [Black or African American alone]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent White&quot; THEN [White alone]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Food Stamps&quot; THEN [Food Stamps]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Four Year College&quot; THEN [Four Year College]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Median Household Income&quot; THEN [Med_Hh_Income]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Per Capita Income&quot; THEN [Pc_income]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Population&quot; THEN [Population]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN [Dist Downtown]&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Sales Price&quot; THEN [AveSalePrice]&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Sales Volume&quot; THEN [ParcelCount]&#13;&#10;END' />
            </column>
            <column caption='Indicator 0 Label' datatype='string' name='[Indicator 2 Label (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Indicator2 Parameter (copy)]' />
            </column>
            <column caption='Indicator0TextMed' datatype='string' name='[Indicator0Text (copy)]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN  STR(ROUND(MEDIAN([Indicator 0 (copy)]),1)) + &quot; Miles&quot; // Distance&#13;&#10;&#13;&#10;ELSEIF MEDIAN([Indicator 0 (copy)]) &lt;= 1 THEN STR(ROUND(MEDIAN([Indicator 0 (copy)])*100,0)) + &quot;%&quot; // Percentage&#13;&#10;ELSEIF MEDIAN([Indicator 0 (copy)]) &lt;= 3000 THEN STR(ROUND(MEDIAN([Indicator 0 (copy)]),0))  // Population&#13;&#10;ELSEIF MEDIAN([Indicator 0 (copy)]) &gt; 3000 THEN &quot;$ &quot; +  STR(ROUND(MEDIAN([Indicator 0 (copy)])/1000)) + &quot;,000&quot; // Currency&#13;&#10;END' />
            </column>
            <column caption='Med Hh Income' datatype='real' name='[Med_Hh_Income]' role='measure' type='quantitative' />
            <column datatype='real' name='[Own]' role='measure' type='quantitative' />
            <column datatype='real' name='[ParcelCount]' role='measure' type='quantitative' />
            <column caption='Pc income' datatype='real' name='[Pc_income]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column datatype='real' name='[Rent]' role='measure' type='quantitative' />
            <column datatype='real' name='[White alone]' role='measure' type='quantitative' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column caption='Affordability Index' datatype='real' name='[affordability_index]' role='measure' type='quantitative' />
            <column-instance column='[Indicator 2 Label (copy)]' derivation='Attribute' name='[attr:Indicator 2 Label (copy):nk]' pivot='key' type='nominal' />
            <column-instance column='[Geometry]' derivation='Collect' name='[clct:Geometry:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blockgroup]' derivation='None' name='[none:Blockgroup:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1115766813408124936]' derivation='None' name='[none:Calculation_1115766813408124936:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1115766813349150721]' derivation='User' name='[usr:Calculation_1115766813349150721:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Indicator0Text (copy)]' derivation='User' name='[usr:Indicator0Text (copy):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]'>
            <groupfilter function='member' level='[none:Calculation_1115766813408124936:nk]' member='true' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]' num-steps='5' palette='red_green_gold_diverging_10_0' reverse='true' type='interpolated' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-visibility' scope='rows' value='off' />
            <format attr='line-visibility' scope='cols' value='off' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='1' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]' />
              <lod column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[clct:Geometry:nk]' />
              <lod column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Blockgroup:nk]' />
              <tooltip column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[attr:Indicator 2 Label (copy):nk]' />
              <tooltip column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator0Text (copy):nk]' />
              <geometry column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[clct:Geometry:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>BG </run>
                <run bold='true'>&lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Blockgroup:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run bold='true'>&lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator0Text (copy):nk]&gt; &lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[attr:Indicator 2 Label (copy):nk]&gt;</run>
                <run>Æ&#10;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='true' />
                <format attr='stroke-color' value='#ffffff' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Latitude (generated)]</rows>
        <cols>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='CompareSlice2'>
      <table>
        <view>
          <datasources>
            <datasource caption='Demographics' name='federated.004akfr0ztvque1dvtnym0ol9g6i' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Indicator2 Parameter' datatype='string' name='[Indicator1 Parameter (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Median Household Income&quot;'>
              <calculation class='tableau' formula='&quot;Median Household Income&quot;' />
            </column>
            <column caption='Indicator0 Parameter' datatype='string' name='[Indicator2 Parameter (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Median Household Income&quot;'>
              <calculation class='tableau' formula='&quot;Median Household Income&quot;' />
            </column>
            <column caption='Year Parameter' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;2016&quot;'>
              <calculation class='tableau' formula='&quot;2016&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.004akfr0ztvque1dvtnym0ol9g6i'>
            <column datatype='real' name='[Asian alone]' role='measure' type='quantitative' />
            <column datatype='real' name='[AveSalePrice]' role='measure' type='quantitative' />
            <column datatype='real' name='[Black or African American alone]' role='measure' type='quantitative' />
            <column datatype='string' name='[Blockgroup]' role='dimension' type='nominal' />
            <column caption='Indicator 2' datatype='real' name='[Calculation_1115766813349253122]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent POC&quot; THEN (1-AVG([White alone]))&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Own&quot; THEN AVG([Own])&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Rent&quot; THEN AVG([Rent]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Asian&quot; THEN AVG([Asian alone]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Black&quot; THEN AVG([Black or African American alone])&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent White&quot; THEN AVG([White alone]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Food Stamps&quot; THEN AVG([Food Stamps]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Four Year College&quot; THEN AVG([Four Year College]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Median Household Income&quot; THEN AVG([Med_Hh_Income]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Per Capita Income&quot; THEN AVG([Pc_income]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Population&quot; THEN AVG([Population])&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Dist Downtown&quot; THEN AVG([Dist Downtown])&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Sales Price&quot; THEN AVG([AveSalePrice])&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Sales Volume&quot; THEN AVG([ParcelCount])&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Filter Year Parameter' datatype='boolean' name='[Calculation_1115766813408124936]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Year] = [Parameters].[Parameter 4] OR [Parameters].[Parameter 4] = &quot;ALL YEARS&quot;' />
            </column>
            <column datatype='real' name='[Dist Downtown]' role='measure' type='quantitative' />
            <column datatype='real' name='[Food Stamps]' role='measure' type='quantitative' />
            <column datatype='real' name='[Four Year College]' role='measure' type='quantitative' />
            <column datatype='spatial' name='[Geometry]' role='measure' type='nominal' />
            <column caption='Indicator 0 NonAgg' datatype='real' name='[Indicator 0 (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent POC&quot; THEN 1-[White alone]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Own&quot; THEN [Own]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Rent&quot; THEN [Rent]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Asian&quot; THEN [Asian alone]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Black&quot; THEN [Black or African American alone]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent White&quot; THEN [White alone]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Food Stamps&quot; THEN [Food Stamps]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Four Year College&quot; THEN [Four Year College]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Median Household Income&quot; THEN [Med_Hh_Income]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Per Capita Income&quot; THEN [Pc_income]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Population&quot; THEN [Population]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN [Dist Downtown]&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Sales Price&quot; THEN [AveSalePrice]&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Sales Volume&quot; THEN [ParcelCount]&#13;&#10;END' />
            </column>
            <column caption='Indicator 0 Label' datatype='string' name='[Indicator 2 Label (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Indicator2 Parameter (copy)]' />
            </column>
            <column caption='Indicator0TextMed' datatype='string' name='[Indicator0Text (copy)]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN  STR(ROUND(MEDIAN([Indicator 0 (copy)]),1)) + &quot; Miles&quot; // Distance&#13;&#10;&#13;&#10;ELSEIF MEDIAN([Indicator 0 (copy)]) &lt;= 1 THEN STR(ROUND(MEDIAN([Indicator 0 (copy)])*100,0)) + &quot;%&quot; // Percentage&#13;&#10;ELSEIF MEDIAN([Indicator 0 (copy)]) &lt;= 3000 THEN STR(ROUND(MEDIAN([Indicator 0 (copy)]),0))  // Population&#13;&#10;ELSEIF MEDIAN([Indicator 0 (copy)]) &gt; 3000 THEN &quot;$ &quot; +  STR(ROUND(MEDIAN([Indicator 0 (copy)])/1000)) + &quot;,000&quot; // Currency&#13;&#10;END' />
            </column>
            <column caption='Med Hh Income' datatype='real' name='[Med_Hh_Income]' role='measure' type='quantitative' />
            <column datatype='real' name='[Own]' role='measure' type='quantitative' />
            <column datatype='real' name='[ParcelCount]' role='measure' type='quantitative' />
            <column caption='Pc income' datatype='real' name='[Pc_income]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column datatype='real' name='[Rent]' role='measure' type='quantitative' />
            <column datatype='real' name='[White alone]' role='measure' type='quantitative' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column-instance column='[Indicator 2 Label (copy)]' derivation='Attribute' name='[attr:Indicator 2 Label (copy):nk]' pivot='key' type='nominal' />
            <column-instance column='[Geometry]' derivation='Collect' name='[clct:Geometry:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blockgroup]' derivation='None' name='[none:Blockgroup:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1115766813408124936]' derivation='None' name='[none:Calculation_1115766813408124936:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1115766813349253122]' derivation='User' name='[usr:Calculation_1115766813349253122:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Indicator0Text (copy)]' derivation='User' name='[usr:Indicator0Text (copy):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]'>
            <groupfilter function='member' level='[none:Calculation_1115766813408124936:nk]' member='true' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' num-steps='5' palette='red_green_gold_diverging_10_0' reverse='true' type='interpolated' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-visibility' scope='rows' value='off' />
            <format attr='line-visibility' scope='cols' value='off' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='1' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' />
              <lod column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[clct:Geometry:nk]' />
              <lod column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Blockgroup:nk]' />
              <tooltip column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[attr:Indicator 2 Label (copy):nk]' />
              <tooltip column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator0Text (copy):nk]' />
              <geometry column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[clct:Geometry:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>BG </run>
                <run bold='true'>&lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Blockgroup:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run bold='true'>&lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator0Text (copy):nk]&gt; &lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[attr:Indicator 2 Label (copy):nk]&gt;</run>
                <run>Æ&#10;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='true' />
                <format attr='stroke-color' value='#ffffff' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Latitude (generated)]</rows>
        <cols>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='CompareSummary1'>
      <table>
        <view>
          <datasources>
            <datasource caption='Demographics' name='federated.004akfr0ztvque1dvtnym0ol9g6i' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Indicator1 Parameter' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Mobility Index&quot;'>
              <calculation class='tableau' formula='&quot;Mobility Index&quot;' />
            </column>
            <column caption='Year Parameter' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;2016&quot;'>
              <calculation class='tableau' formula='&quot;2016&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.004akfr0ztvque1dvtnym0ol9g6i'>
            <column datatype='real' name='[Asian alone]' role='measure' type='quantitative' />
            <column datatype='real' name='[AveSalePrice]' role='measure' type='quantitative' />
            <column datatype='real' name='[Black or African American alone]' role='measure' type='quantitative' />
            <column caption='Indicator1Text' datatype='string' name='[Calculation_-7112872654770298880]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &quot;Dist Downtown&quot; THEN  STR(ROUND([Calculation_1115766813349150721],1)) + &quot; Miles&quot; // Distance&#13;&#10;&#13;&#10;ELSEIF [Calculation_1115766813349150721] &lt;= 1 THEN STR(ROUND([Calculation_1115766813349150721]*100,0)) + &quot;%&quot; // Percentage&#13;&#10;ELSEIF [Calculation_1115766813349150721] &lt;= 3000 THEN STR(ROUND([Calculation_1115766813349150721],0))  // Population&#13;&#10;ELSEIF [Calculation_1115766813349150721] &gt; 3000 THEN &quot;$&quot; +  STR(ROUND([Calculation_1115766813349150721]/1000)) + &quot;,000&quot; // Currency&#13;&#10;END' />
            </column>
            <column caption='Indicator 1' datatype='real' name='[Calculation_1115766813349150721]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &quot;Percent POC&quot; THEN (1-AVG([White alone]))&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Own&quot; THEN AVG([Own])&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Rent&quot; THEN AVG([Rent]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Asian&quot; THEN AVG([Asian alone]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Black&quot; THEN AVG([Black or African American alone])&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent White&quot; THEN AVG([White alone]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Food Stamps&quot; THEN AVG([Food Stamps]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Four Year College&quot; THEN AVG([Four Year College]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Median Household Income&quot; THEN AVG([Med_Hh_Income]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Per Capita Income&quot; THEN AVG([Pc_income]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Population&quot; THEN AVG([Population])&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Dist Downtown&quot; THEN AVG([Dist Downtown])&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Sales Price&quot; THEN AVG([AveSalePrice])&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Sales Volume&quot; THEN AVG([ParcelCount])&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Mobility Index&quot; THEN MAX([Calculation_125748977171722240])&#10;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Filter Council District' datatype='boolean' name='[Calculation_1115766813350019075]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[council_district] != &quot;None&quot;' />
            </column>
            <column caption='Indicator 1 Label' datatype='string' name='[Calculation_1115766813401026565]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1]' />
            </column>
            <column caption='Filter Year Parameter' datatype='boolean' name='[Calculation_1115766813408124936]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Year] = [Parameters].[Parameter 4] OR [Parameters].[Parameter 4] = &quot;ALL YEARS&quot;' />
            </column>
            <column caption='Mobility Index' datatype='real' name='[Calculation_125748977171722240]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([affordability_index]) * 100' />
            </column>
            <column datatype='real' name='[Dist Downtown]' role='measure' type='quantitative' />
            <column datatype='real' name='[Food Stamps]' role='measure' type='quantitative' />
            <column datatype='real' name='[Four Year College]' role='measure' type='quantitative' />
            <column caption='Med Hh Income' datatype='real' name='[Med_Hh_Income]' role='measure' type='quantitative' />
            <column datatype='real' name='[Own]' role='measure' type='quantitative' />
            <column datatype='real' name='[ParcelCount]' role='measure' type='quantitative' />
            <column caption='Pc income' datatype='real' name='[Pc_income]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column datatype='real' name='[Rent]' role='measure' type='quantitative' />
            <column datatype='real' name='[White alone]' role='measure' type='quantitative' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column caption='Affordability Index' datatype='real' name='[affordability_index]' role='measure' type='quantitative' />
            <column caption='Council District' datatype='string' name='[council_district]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;SCC1&quot;' value='D1' />
                <alias key='&quot;SCC2&quot;' value='D2' />
                <alias key='&quot;SCC3&quot;' value='D3' />
                <alias key='&quot;SCC4&quot;' value='D4' />
                <alias key='&quot;SCC5&quot;' value='D5' />
                <alias key='&quot;SCC6&quot;' value='D6' />
                <alias key='&quot;SCC7&quot;' value='D7' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1115766813350019075]' derivation='None' name='[none:Calculation_1115766813350019075:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1115766813401026565]' derivation='None' name='[none:Calculation_1115766813401026565:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1115766813408124936]' derivation='None' name='[none:Calculation_1115766813408124936:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_-7112872654770298880]' derivation='User' name='[usr:Calculation_-7112872654770298880:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813350019075:nk]'>
            <groupfilter function='member' level='[none:Calculation_1115766813350019075:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]'>
            <groupfilter function='member' level='[none:Calculation_1115766813408124936:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813350019075:nk]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]' value='213' />
            <format attr='text-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]' value='center' />
            <format attr='vertical-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]' value='center' />
            <format attr='font-family' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_-7112872654770298880:nk]' value='Tableau Bold' />
            <format attr='font-size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_-7112872654770298880:nk]' value='14' />
            <format attr='text-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_-7112872654770298880:nk]' value='center' />
            <format attr='vertical-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_-7112872654770298880:nk]' value='center' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]' value='40' />
            <format attr='border-style' data-class='total' scope='rows' value='none' />
          </style-rule>
          <style-rule element='field-labels-decoration'>
            <format attr='font-style' value='normal' />
            <format attr='font-weight' value='normal' />
            <format attr='text-orientation' value='-90' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-family' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]' value='Tableau Book' />
            <format attr='wrap' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]' value='on' />
            <format attr='font-weight' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]' value='bold' />
            <format attr='font-size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]' value='11' />
            <format attr='text-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]' value='center' />
            <format attr='vertical-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]' value='center' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='border-style' data-class='total' scope='cols' value='none' />
            <format attr='border-style' data-class='total' scope='rows' value='none' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-visibility' scope='rows' value='off' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_-7112872654770298880:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='CompareSummary2'>
      <table>
        <view>
          <datasources>
            <datasource caption='Demographics' name='federated.004akfr0ztvque1dvtnym0ol9g6i' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Indicator2 Parameter' datatype='string' name='[Indicator1 Parameter (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Median Household Income&quot;'>
              <calculation class='tableau' formula='&quot;Median Household Income&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.004akfr0ztvque1dvtnym0ol9g6i'>
            <column datatype='real' name='[Asian alone]' role='measure' type='quantitative' />
            <column datatype='real' name='[AveSalePrice]' role='measure' type='quantitative' />
            <column datatype='real' name='[Black or African American alone]' role='measure' type='quantitative' />
            <column caption='Indicator 2' datatype='real' name='[Calculation_1115766813349253122]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent POC&quot; THEN (1-AVG([White alone]))&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Own&quot; THEN AVG([Own])&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Rent&quot; THEN AVG([Rent]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Asian&quot; THEN AVG([Asian alone]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Black&quot; THEN AVG([Black or African American alone])&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent White&quot; THEN AVG([White alone]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Food Stamps&quot; THEN AVG([Food Stamps]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Four Year College&quot; THEN AVG([Four Year College]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Median Household Income&quot; THEN AVG([Med_Hh_Income]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Per Capita Income&quot; THEN AVG([Pc_income]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Population&quot; THEN AVG([Population])&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Dist Downtown&quot; THEN AVG([Dist Downtown])&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Sales Price&quot; THEN AVG([AveSalePrice])&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Sales Volume&quot; THEN AVG([ParcelCount])&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='real' name='[Dist Downtown]' role='measure' type='quantitative' />
            <column datatype='real' name='[Food Stamps]' role='measure' type='quantitative' />
            <column datatype='real' name='[Four Year College]' role='measure' type='quantitative' />
            <column caption='Indicator 2 Label' datatype='string' name='[Indicator 1 Label (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Indicator1 Parameter (copy)]' />
            </column>
            <column caption='Indicator2Text' datatype='string' name='[Indicator1Text (copy)]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator1 Parameter (copy)] = &quot;Dist Downtown&quot; THEN  STR(ROUND([Calculation_1115766813349253122],1)) + &quot; Miles&quot; // Distance&#13;&#10;&#13;&#10;ELSEIF [Calculation_1115766813349253122] &lt;= 1 THEN STR(ROUND([Calculation_1115766813349253122]*100,0)) + &quot;%&quot; // Percentage&#13;&#10;ELSEIF [Calculation_1115766813349253122] &lt;= 3000 THEN STR(ROUND([Calculation_1115766813349253122],0))  // Population&#13;&#10;ELSEIF [Calculation_1115766813349253122] &gt; 3000 THEN &quot;$ &quot; +  STR(ROUND([Calculation_1115766813349253122]/1000,0)) + &quot;,000&quot; // Currency&#13;&#10;END' />
            </column>
            <column caption='Med Hh Income' datatype='real' name='[Med_Hh_Income]' role='measure' type='quantitative' />
            <column datatype='real' name='[Own]' role='measure' type='quantitative' />
            <column datatype='real' name='[ParcelCount]' role='measure' type='quantitative' />
            <column caption='Pc income' datatype='real' name='[Pc_income]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column datatype='real' name='[Rent]' role='measure' type='quantitative' />
            <column datatype='real' name='[White alone]' role='measure' type='quantitative' />
            <column-instance column='[Indicator 1 Label (copy)]' derivation='None' name='[none:Indicator 1 Label (copy):nk]' pivot='key' type='nominal' />
            <column-instance column='[Indicator1Text (copy)]' derivation='User' name='[usr:Indicator1Text (copy):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 Label (copy):nk]' value='124' />
            <format attr='font-size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy):nk]' value='14' />
            <format attr='color' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy):nk]' value='#000000' />
            <format attr='font-weight' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy):nk]' value='bold' />
            <format attr='font-family' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy):nk]' value='Tableau Bold' />
            <format attr='text-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy):nk]' value='center' />
            <format attr='vertical-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy):nk]' value='center' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 Label (copy):nk]' value='40' />
            <format attr='border-style' data-class='total' scope='rows' value='none' />
          </style-rule>
          <style-rule element='field-labels-decoration'>
            <format attr='font-style' value='normal' />
            <format attr='font-weight' value='normal' />
            <format attr='text-orientation' value='-90' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 Label (copy):nk]' value='center' />
            <format attr='font-size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 Label (copy):nk]' value='11' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='border-style' data-class='total' scope='cols' value='none' />
            <format attr='border-style' data-class='total' scope='rows' value='none' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-visibility' scope='rows' value='off' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy):nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 Label (copy):nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Explore Bubble'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Æ  </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Demographics' name='federated.004akfr0ztvque1dvtnym0ol9g6i' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Indicator2 Parameter' datatype='string' name='[Indicator1 Parameter (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Median Household Income&quot;'>
              <calculation class='tableau' formula='&quot;Median Household Income&quot;' />
            </column>
            <column caption='Indicator1 Parameter' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Mobility Index&quot;'>
              <calculation class='tableau' formula='&quot;Mobility Index&quot;' />
            </column>
            <column caption='Geocode Parameter' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Neighborhood Long&quot;'>
              <calculation class='tableau' formula='&quot;Neighborhood Long&quot;' />
            </column>
            <column caption='Year Parameter' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;2016&quot;'>
              <calculation class='tableau' formula='&quot;2016&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.004akfr0ztvque1dvtnym0ol9g6i'>
            <column datatype='real' name='[Asian alone]' role='measure' type='quantitative' />
            <column datatype='real' name='[AveSalePrice]' role='measure' type='quantitative' />
            <column datatype='real' name='[Black or African American alone]' role='measure' type='quantitative' />
            <column caption='Indicator 1' datatype='real' name='[Calculation_1115766813349150721]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &quot;Percent POC&quot; THEN (1-AVG([White alone]))&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Own&quot; THEN AVG([Own])&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Rent&quot; THEN AVG([Rent]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Asian&quot; THEN AVG([Asian alone]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Black&quot; THEN AVG([Black or African American alone])&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent White&quot; THEN AVG([White alone]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Food Stamps&quot; THEN AVG([Food Stamps]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Four Year College&quot; THEN AVG([Four Year College]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Median Household Income&quot; THEN AVG([Med_Hh_Income]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Per Capita Income&quot; THEN AVG([Pc_income]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Population&quot; THEN AVG([Population])&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Dist Downtown&quot; THEN AVG([Dist Downtown])&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Sales Price&quot; THEN AVG([AveSalePrice])&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Sales Volume&quot; THEN AVG([ParcelCount])&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Mobility Index&quot; THEN MAX([Calculation_125748977171722240])&#10;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Indicator 2' datatype='real' name='[Calculation_1115766813349253122]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent POC&quot; THEN (1-AVG([White alone]))&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Own&quot; THEN AVG([Own])&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Rent&quot; THEN AVG([Rent]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Asian&quot; THEN AVG([Asian alone]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Black&quot; THEN AVG([Black or African American alone])&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent White&quot; THEN AVG([White alone]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Food Stamps&quot; THEN AVG([Food Stamps]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Four Year College&quot; THEN AVG([Four Year College]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Median Household Income&quot; THEN AVG([Med_Hh_Income]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Per Capita Income&quot; THEN AVG([Pc_income]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Population&quot; THEN AVG([Population])&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Dist Downtown&quot; THEN AVG([Dist Downtown])&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Sales Price&quot; THEN AVG([AveSalePrice])&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Sales Volume&quot; THEN AVG([ParcelCount])&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Filter Council District' datatype='boolean' name='[Calculation_1115766813350019075]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[council_district] != &quot;None&quot;' />
            </column>
            <column caption='Filter Year Parameter' datatype='boolean' name='[Calculation_1115766813408124936]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Year] = [Parameters].[Parameter 4] OR [Parameters].[Parameter 4] = &quot;ALL YEARS&quot;' />
            </column>
            <column caption='Mobility Index' datatype='real' name='[Calculation_125748977171722240]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([affordability_index]) * 100' />
            </column>
            <column datatype='real' name='[Dist Downtown]' role='measure' type='quantitative' />
            <column datatype='real' name='[Food Stamps]' role='measure' type='quantitative' />
            <column datatype='real' name='[Four Year College]' role='measure' type='quantitative' />
            <column caption='Geocode' datatype='string' name='[Indicator 1 (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 2] = &quot;Council District&quot; THEN [council_district]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Neighborhood Long&quot; THEN [neigbhorhood_long]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Neighborhood Short&quot; THEN [neighborhood_short]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Zip Code&quot; THEN [zipcode]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Urban Village&quot; THEN [urban_village]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Blockgroup&quot; THEN [location]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;CITYWIDE&quot; THEN &quot;Seattle&quot;&#13;&#10;ELSE &quot;None&quot; END' />
            </column>
            <column caption='Med Hh Income' datatype='real' name='[Med_Hh_Income]' role='measure' type='quantitative' />
            <column datatype='real' name='[Own]' role='measure' type='quantitative' />
            <column datatype='real' name='[ParcelCount]' role='measure' type='quantitative' />
            <column caption='Pc income' datatype='real' name='[Pc_income]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column datatype='real' name='[Rent]' role='measure' type='quantitative' />
            <column datatype='real' name='[White alone]' role='measure' type='quantitative' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column caption='Affordability Index' datatype='real' name='[affordability_index]' role='measure' type='quantitative' />
            <column caption='Council District' datatype='string' name='[council_district]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;SCC1&quot;' value='D1' />
                <alias key='&quot;SCC2&quot;' value='D2' />
                <alias key='&quot;SCC3&quot;' value='D3' />
                <alias key='&quot;SCC4&quot;' value='D4' />
                <alias key='&quot;SCC5&quot;' value='D5' />
                <alias key='&quot;SCC6&quot;' value='D6' />
                <alias key='&quot;SCC7&quot;' value='D7' />
              </aliases>
            </column>
            <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
            <column caption='Neigbhorhood Long' datatype='string' name='[neigbhorhood_long]' role='dimension' type='nominal' />
            <column caption='Neighborhood Short' datatype='string' name='[neighborhood_short]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1115766813350019075]' derivation='None' name='[none:Calculation_1115766813350019075:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1115766813408124936]' derivation='None' name='[none:Calculation_1115766813408124936:nk]' pivot='key' type='nominal' />
            <column-instance column='[Indicator 1 (copy)]' derivation='None' name='[none:Indicator 1 (copy):nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:nk]' pivot='key' type='nominal' />
            <column caption='Urban Village' datatype='string' name='[urban_village]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1115766813349150721]' derivation='User' name='[usr:Calculation_1115766813349150721:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1115766813349253122]' derivation='User' name='[usr:Calculation_1115766813349253122:qk]' pivot='key' type='quantitative' />
            <column caption='Zipcode' datatype='string' datatype-customized='true' default-format='*00000' name='[zipcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Geocode)]'>
            <groupfilter function='level-members' level='[Indicator 1 (copy)]' user:ui-action-filter='[Action1]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Exclusions (Geocode,Year)]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:Indicator 1 (copy):nk]' />
                <groupfilter function='level-members' level='[none:Year:nk]' />
              </groupfilter>
              <groupfilter function='reorder-dimensionality'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Year:nk]' member='&quot;2016&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Indicator 1 (copy):nk]' member='&quot;NO BROADER TERM&quot;' />
                    <groupfilter function='member' level='[none:Indicator 1 (copy):nk]' member='&quot;None&quot;' />
                  </groupfilter>
                </groupfilter>
                <order>
                  <hierarchy name='[none:Indicator 1 (copy):nk]' />
                  <hierarchy name='[none:Year:nk]' />
                </order>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813350019075:nk]'>
            <groupfilter function='member' level='[none:Calculation_1115766813350019075:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]'>
            <groupfilter function='member' level='[none:Calculation_1115766813408124936:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813350019075:nk]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Geocode)]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Exclusions (Geocode,Year)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' domain-expand='false' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' field-type='quantitative' scope='rows' type='space' />
            <format attr='subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' scope='rows' value='true' />
            <format attr='title' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' scope='rows' value='' />
            <encoding attr='space' class='1' domain-expand='false' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='subtitle' class='1' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='1' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' scope='rows' value='true' />
            <format attr='display' class='1' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' scope='rows' value='false' />
            <encoding attr='space' class='0' domain-expand='false' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]' field-type='quantitative' scope='cols' type='space' />
            <format attr='subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]' scope='cols' value='true' />
            <format attr='title' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]' scope='cols' value='' />
            <format attr='line-visibility' value='on' />
            <format attr='line-pattern-only' value='solid' />
            <format attr='stroke-color' value='#ffffff' />
            <format attr='stroke-size' value='2' />
            <format attr='line-visibility' scope='rows' value='on' />
            <format attr='line-pattern-only' scope='rows' value='solid' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='font-size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]' value='14' />
            <format attr='font-weight' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]' value='bold' />
          </style-rule>
          <style-rule element='label'>
            <format attr='color' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]' value='#ffffff' />
            <format attr='font-size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]' value='14' />
            <format attr='color' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' value='#ffffff' />
            <format attr='font-size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' value='14' />
            <format attr='text-format' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' value='c&quot;$&quot;#,##0,K;(&quot;$&quot;#,##0,K)' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]' field-type='nominal' max-size='1' min-size='0.222683' type='catsize' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#000000' />
          </style-rule>
          <style-rule element='gridline'>
            <format attr='line-visibility' value='off' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='line-visibility' scope='cols' value='off' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-visibility' scope='cols' value='off' />
            <format attr='line-visibility' scope='rows' value='off' />
          </style-rule>
        </style>
        <panes>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='661' />
                <format attr='maxwidth' value='661' />
                <format attr='minheight' value='498' />
                <format attr='maxheight' value='498' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
          <pane id='5' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]' />
              <size column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='2.9944751262664795' />
                <format attr='mark-labels-mode' value='range' />
                <format attr='mark-labels-range-min' value='false' />
                <format attr='mark-labels-range-field' value='' />
                <format attr='mark-labels-range-scope' value='table' />
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-transparency' value='255' />
                <format attr='has-stroke' value='false' />
              </style-rule>
            </style>
          </pane>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]' />
              <path column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]' />
              <text column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]' />
            </encodings>
            <customized-label>
              <formatted-text>
                <run>&lt;</run>
                <run>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]</run>
                <run>&gt;</run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='2.2872927188873291' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk] + [federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk])</rows>
        <cols>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</cols>
        <mark-labels>
          <mark-label id='0'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;UNIVERSITY DISTRICT&quot;</value>
                <value>&quot;2016&quot;</value>
                <value>71.624289428319216</value>
                <value>34409.54315206522</value>
              </tuple>
            </tuple-reference>
          </mark-label>
          <mark-label id='1'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;DELRIDGE&quot;</value>
                <value>&quot;2016&quot;</value>
                <value>55.07242476703005</value>
                <value>59239.386405081699</value>
              </tuple>
            </tuple-reference>
          </mark-label>
          <mark-label id='2'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;WEST SEATTLE&quot;</value>
                <value>&quot;2016&quot;</value>
                <value>57.556650216028729</value>
                <value>92483.588704425201</value>
              </tuple>
            </tuple-reference>
          </mark-label>
          <mark-label id='3'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;CASCADE&quot;</value>
                <value>&quot;2016&quot;</value>
                <value>76.557165127699406</value>
                <value>87883.429956256572</value>
              </tuple>
            </tuple-reference>
            <label-position x='-1' y='-23' />
          </mark-label>
          <mark-label id='4'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;CENTRAL AREA&quot;</value>
                <value>&quot;2016&quot;</value>
                <value>78.713122986920567</value>
                <value>88284.014588149279</value>
              </tuple>
            </tuple-reference>
            <label-position x='7' y='23' />
          </mark-label>
        </mark-labels>
      </table>
    </worksheet>
    <worksheet name='Explore Bubble (2)'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Æ  </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Demographics' name='federated.004akfr0ztvque1dvtnym0ol9g6i' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Indicator2 Parameter' datatype='string' name='[Indicator1 Parameter (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Median Household Income&quot;'>
              <calculation class='tableau' formula='&quot;Median Household Income&quot;' />
            </column>
            <column caption='Indicator1 Parameter' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Mobility Index&quot;'>
              <calculation class='tableau' formula='&quot;Mobility Index&quot;' />
            </column>
            <column caption='Geocode Parameter' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Neighborhood Long&quot;'>
              <calculation class='tableau' formula='&quot;Neighborhood Long&quot;' />
            </column>
            <column caption='Year Parameter' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;2016&quot;'>
              <calculation class='tableau' formula='&quot;2016&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.004akfr0ztvque1dvtnym0ol9g6i'>
            <column datatype='real' name='[Asian alone]' role='measure' type='quantitative' />
            <column datatype='real' name='[AveSalePrice]' role='measure' type='quantitative' />
            <column datatype='real' name='[Black or African American alone]' role='measure' type='quantitative' />
            <column caption='Indicator 1' datatype='real' name='[Calculation_1115766813349150721]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &quot;Percent POC&quot; THEN (1-AVG([White alone]))&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Own&quot; THEN AVG([Own])&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Rent&quot; THEN AVG([Rent]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Asian&quot; THEN AVG([Asian alone]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Black&quot; THEN AVG([Black or African American alone])&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent White&quot; THEN AVG([White alone]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Food Stamps&quot; THEN AVG([Food Stamps]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Percent Four Year College&quot; THEN AVG([Four Year College]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Median Household Income&quot; THEN AVG([Med_Hh_Income]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Per Capita Income&quot; THEN AVG([Pc_income]) &#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Population&quot; THEN AVG([Population])&#13;&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Dist Downtown&quot; THEN AVG([Dist Downtown])&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Sales Price&quot; THEN AVG([AveSalePrice])&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Sales Volume&quot; THEN AVG([ParcelCount])&#10;ELSEIF [Parameters].[Parameter 1] = &quot;Mobility Index&quot; THEN MAX([Calculation_125748977171722240])&#10;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Indicator 2' datatype='real' name='[Calculation_1115766813349253122]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent POC&quot; THEN (1-AVG([White alone]))&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Own&quot; THEN AVG([Own])&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Rent&quot; THEN AVG([Rent]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Asian&quot; THEN AVG([Asian alone]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Black&quot; THEN AVG([Black or African American alone])&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent White&quot; THEN AVG([White alone]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Food Stamps&quot; THEN AVG([Food Stamps]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Percent Four Year College&quot; THEN AVG([Four Year College]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Median Household Income&quot; THEN AVG([Med_Hh_Income]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Per Capita Income&quot; THEN AVG([Pc_income]) &#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Population&quot; THEN AVG([Population])&#13;&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Dist Downtown&quot; THEN AVG([Dist Downtown])&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Sales Price&quot; THEN AVG([AveSalePrice])&#10;ELSEIF [Parameters].[Indicator1 Parameter (copy)] = &quot;Sales Volume&quot; THEN AVG([ParcelCount])&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Filter Year Parameter' datatype='boolean' name='[Calculation_1115766813408124936]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Year] = [Parameters].[Parameter 4] OR [Parameters].[Parameter 4] = &quot;ALL YEARS&quot;' />
            </column>
            <column caption='Mobility Index' datatype='real' name='[Calculation_125748977171722240]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([affordability_index]) * 100' />
            </column>
            <column datatype='real' name='[Dist Downtown]' role='measure' type='quantitative' />
            <column datatype='real' name='[Food Stamps]' role='measure' type='quantitative' />
            <column datatype='real' name='[Four Year College]' role='measure' type='quantitative' />
            <column caption='Geocode' datatype='string' name='[Indicator 1 (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 2] = &quot;Council District&quot; THEN [council_district]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Neighborhood Long&quot; THEN [neigbhorhood_long]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Neighborhood Short&quot; THEN [neighborhood_short]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Zip Code&quot; THEN [zipcode]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Urban Village&quot; THEN [urban_village]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Blockgroup&quot; THEN [location]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;CITYWIDE&quot; THEN &quot;Seattle&quot;&#13;&#10;ELSE &quot;None&quot; END' />
            </column>
            <column caption='Med Hh Income' datatype='real' name='[Med_Hh_Income]' role='measure' type='quantitative' />
            <column datatype='real' name='[Own]' role='measure' type='quantitative' />
            <column datatype='real' name='[ParcelCount]' role='measure' type='quantitative' />
            <column caption='Pc income' datatype='real' name='[Pc_income]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column datatype='real' name='[Rent]' role='measure' type='quantitative' />
            <column datatype='real' name='[White alone]' role='measure' type='quantitative' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column caption='Affordability Index' datatype='real' name='[affordability_index]' role='measure' type='quantitative' />
            <column caption='Council District' datatype='string' name='[council_district]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;SCC1&quot;' value='D1' />
                <alias key='&quot;SCC2&quot;' value='D2' />
                <alias key='&quot;SCC3&quot;' value='D3' />
                <alias key='&quot;SCC4&quot;' value='D4' />
                <alias key='&quot;SCC5&quot;' value='D5' />
                <alias key='&quot;SCC6&quot;' value='D6' />
                <alias key='&quot;SCC7&quot;' value='D7' />
              </aliases>
            </column>
            <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
            <column caption='Neigbhorhood Long' datatype='string' name='[neigbhorhood_long]' role='dimension' type='nominal' />
            <column caption='Neighborhood Short' datatype='string' name='[neighborhood_short]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1115766813408124936]' derivation='None' name='[none:Calculation_1115766813408124936:nk]' pivot='key' type='nominal' />
            <column-instance column='[Indicator 1 (copy)]' derivation='None' name='[none:Indicator 1 (copy):nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:nk]' pivot='key' type='nominal' />
            <column caption='Urban Village' datatype='string' name='[urban_village]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1115766813349150721]' derivation='User' name='[usr:Calculation_1115766813349150721:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1115766813349253122]' derivation='User' name='[usr:Calculation_1115766813349253122:qk]' pivot='key' type='quantitative' />
            <column caption='Zipcode' datatype='string' datatype-customized='true' default-format='*00000' name='[zipcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Exclusions (Geocode,Year)]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:Indicator 1 (copy):nk]' />
                <groupfilter function='level-members' level='[none:Year:nk]' />
              </groupfilter>
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[none:Indicator 1 (copy):nk]' member='&quot;NO BROADER TERM&quot;' />
                <groupfilter function='member' level='[none:Year:nk]' member='&quot;2016&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]'>
            <groupfilter function='member' level='[none:Calculation_1115766813408124936:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter from='&quot;BALLARD&quot;' function='range' level='[none:Indicator 1 (copy):nk]' to='&quot;MAGNOLIA&quot;' />
              <groupfilter from='&quot;NORTHGATE&quot;' function='range' level='[none:Indicator 1 (copy):nk]' to='&quot;WEST SEATTLE&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Exclusions (Geocode,Year)]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' domain-expand='false' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' field-type='quantitative' scope='rows' type='space' />
            <format attr='subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' scope='rows' value='true' />
            <format attr='title' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' scope='rows' value='' />
            <encoding attr='space' class='0' domain-expand='false' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]' field-type='quantitative' scope='cols' type='space' />
            <format attr='subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]' scope='cols' value='true' />
            <format attr='title' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]' scope='cols' value='' />
            <format attr='line-visibility' value='on' />
            <format attr='line-pattern-only' value='solid' />
            <format attr='stroke-color' value='#ffffff' />
            <format attr='stroke-size' value='2' />
            <format attr='line-visibility' scope='rows' value='on' />
            <format attr='line-pattern-only' scope='rows' value='solid' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='font-size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]' value='14' />
            <format attr='font-weight' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]' value='bold' />
          </style-rule>
          <style-rule element='label'>
            <format attr='color' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]' value='#ffffff' />
            <format attr='font-size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]' value='14' />
            <format attr='color' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' value='#ffffff' />
            <format attr='font-size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' value='14' />
            <format attr='text-format' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' value='c&quot;$&quot;#,##0,K;(&quot;$&quot;#,##0,K)' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]' field-type='nominal' max-size='1' min-size='0.222683' type='catsize' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#000000' />
          </style-rule>
          <style-rule element='gridline'>
            <format attr='line-visibility' value='off' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='line-visibility' scope='cols' value='off' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-visibility' scope='cols' value='off' />
            <format attr='line-visibility' scope='rows' value='off' />
          </style-rule>
        </style>
        <panes>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <text column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]' />
              <path column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]' />
            </encodings>
            <customized-label>
              <formatted-text>
                <run>&lt;</run>
                <run>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]</run>
                <run>&gt;</run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='8.0265865325927734' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-color' value='#ffcc00' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='661' />
                <format attr='maxwidth' value='661' />
                <format attr='minheight' value='498' />
                <format attr='maxheight' value='498' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</rows>
        <cols>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</cols>
        <mark-labels>
          <mark-label id='0'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;UNIVERSITY DISTRICT&quot;</value>
                <value>&quot;2016&quot;</value>
                <value>71.624289428319216</value>
                <value>34409.54315206522</value>
              </tuple>
            </tuple-reference>
          </mark-label>
          <mark-label id='1'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;DELRIDGE&quot;</value>
                <value>&quot;2016&quot;</value>
                <value>55.07242476703005</value>
                <value>59239.386405081699</value>
              </tuple>
            </tuple-reference>
          </mark-label>
          <mark-label id='2'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;WEST SEATTLE&quot;</value>
                <value>&quot;2016&quot;</value>
                <value>57.556650216028729</value>
                <value>92483.588704425201</value>
              </tuple>
            </tuple-reference>
            <label-position x='-39' y='23' />
          </mark-label>
          <mark-label id='3'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;CASCADE&quot;</value>
                <value>&quot;2016&quot;</value>
                <value>76.557165127699406</value>
                <value>87883.429956256572</value>
              </tuple>
            </tuple-reference>
            <label-position x='-1' y='-23' />
          </mark-label>
          <mark-label id='4'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;CENTRAL AREA&quot;</value>
                <value>&quot;2016&quot;</value>
                <value>78.713122986920567</value>
                <value>88284.014588149279</value>
              </tuple>
            </tuple-reference>
            <label-position x='7' y='23' />
          </mark-label>
          <mark-label id='5'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;RAINIER VALLEY&quot;</value>
                <value>&quot;2016&quot;</value>
                <value>53.21894623151281</value>
                <value>62565.75200187153</value>
              </tuple>
            </tuple-reference>
            <label-position x='-69' y='35' />
          </mark-label>
          <mark-label id='6'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;INTERBAY&quot;</value>
                <value>&quot;2016&quot;</value>
                <value>38.143495490272677</value>
                <value>60641.050127918126</value>
              </tuple>
            </tuple-reference>
            <label-position x='24' y='-30' />
          </mark-label>
          <mark-label id='7'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;SEWARD PARK&quot;</value>
                <value>&quot;2016&quot;</value>
                <value>41.224048790242854</value>
                <value>95488.770710554745</value>
              </tuple>
            </tuple-reference>
            <label-position x='24' y='32' />
          </mark-label>
          <mark-label id='8'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;MAGNOLIA&quot;</value>
                <value>&quot;2016&quot;</value>
                <value>39.258175381698038</value>
                <value>111787.27528504205</value>
              </tuple>
            </tuple-reference>
            <label-position x='65' y='16' />
          </mark-label>
          <mark-label id='9'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
                  <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;CAPITOL HILL&quot;</value>
                <value>&quot;2016&quot;</value>
                <value>94.605142221387041</value>
                <value>89771.997482619539</value>
              </tuple>
            </tuple-reference>
            <label-position x='24' y='31' />
          </mark-label>
        </mark-labels>
      </table>
    </worksheet>
    <worksheet name='Label0'>
      <table>
        <view>
          <datasources>
            <datasource caption='Demographics' name='federated.004akfr0ztvque1dvtnym0ol9g6i' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Indicator0 Parameter' datatype='string' name='[Indicator2 Parameter (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Median Household Income&quot;'>
              <calculation class='tableau' formula='&quot;Median Household Income&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.004akfr0ztvque1dvtnym0ol9g6i'>
            <column datatype='string' name='[Blockgroup]' role='dimension' type='nominal' />
            <column caption='Indicator 0 Label' datatype='string' name='[Indicator 2 Label (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Indicator2 Parameter (copy)]' />
            </column>
            <column caption='Council District' datatype='string' name='[council_district]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;SCC1&quot;' value='D1' />
                <alias key='&quot;SCC2&quot;' value='D2' />
                <alias key='&quot;SCC3&quot;' value='D3' />
                <alias key='&quot;SCC4&quot;' value='D4' />
                <alias key='&quot;SCC5&quot;' value='D5' />
                <alias key='&quot;SCC6&quot;' value='D6' />
                <alias key='&quot;SCC7&quot;' value='D7' />
              </aliases>
            </column>
            <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
            <column caption='Neigbhorhood Long' datatype='string' name='[neigbhorhood_long]' role='dimension' type='nominal' />
            <column-instance column='[Indicator 2 Label (copy)]' derivation='None' name='[none:Indicator 2 Label (copy):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Blockgroup)]'>
            <groupfilter function='level-members' level='[Blockgroup]' user:ui-action-filter='[Action3]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Council District)]'>
            <groupfilter function='level-members' level='[council_district]' user:ui-action-filter='[Action1]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Location)]'>
            <groupfilter function='level-members' level='[location]' user:ui-action-filter='[Action5]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Neigbhorhood Long)]'>
            <groupfilter function='level-members' level='[neigbhorhood_long]' user:ui-action-filter='[Action6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Council District)]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Neigbhorhood Long)]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Location)]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Blockgroup)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='184' />
            <format attr='height' value='67' />
            <format attr='font-size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 2 Label (copy):nk]' value='24' />
            <format attr='font-family' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 2 Label (copy):nk]' value='Tableau Bold' />
            <format attr='text-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 2 Label (copy):nk]' value='center' />
            <format attr='vertical-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 2 Label (copy):nk]' value='top' />
            <format attr='color' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 2 Label (copy):nk]' value='#000000' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 2 Label (copy):nk]' value='center' />
            <format attr='vertical-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 2 Label (copy):nk]' value='center' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#00000000' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 2 Label (copy):nk]' />
            </encodings>
            <customized-label>
              <formatted-text>
                <run>&lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 2 Label (copy):nk]&gt;</run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='Label1'>
      <table>
        <view>
          <datasources>
            <datasource caption='Demographics' name='federated.004akfr0ztvque1dvtnym0ol9g6i' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Indicator1 Parameter' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Mobility Index&quot;'>
              <calculation class='tableau' formula='&quot;Mobility Index&quot;' />
            </column>
            <column caption='Geocode Parameter' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Neighborhood Long&quot;'>
              <calculation class='tableau' formula='&quot;Neighborhood Long&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.004akfr0ztvque1dvtnym0ol9g6i'>
            <column caption='Indicator 1 Label' datatype='string' name='[Calculation_1115766813401026565]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1]' />
            </column>
            <column caption='Geocode' datatype='string' name='[Indicator 1 (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 2] = &quot;Council District&quot; THEN [council_district]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Neighborhood Long&quot; THEN [neigbhorhood_long]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Neighborhood Short&quot; THEN [neighborhood_short]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Zip Code&quot; THEN [zipcode]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Urban Village&quot; THEN [urban_village]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Blockgroup&quot; THEN [location]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;CITYWIDE&quot; THEN &quot;Seattle&quot;&#13;&#10;ELSE &quot;None&quot; END' />
            </column>
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column caption='Council District' datatype='string' name='[council_district]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;SCC1&quot;' value='D1' />
                <alias key='&quot;SCC2&quot;' value='D2' />
                <alias key='&quot;SCC3&quot;' value='D3' />
                <alias key='&quot;SCC4&quot;' value='D4' />
                <alias key='&quot;SCC5&quot;' value='D5' />
                <alias key='&quot;SCC6&quot;' value='D6' />
                <alias key='&quot;SCC7&quot;' value='D7' />
              </aliases>
            </column>
            <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
            <column caption='Neigbhorhood Long' datatype='string' name='[neigbhorhood_long]' role='dimension' type='nominal' />
            <column caption='Neighborhood Short' datatype='string' name='[neighborhood_short]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1115766813401026565]' derivation='None' name='[none:Calculation_1115766813401026565:nk]' pivot='key' type='nominal' />
            <column caption='Urban Village' datatype='string' name='[urban_village]' role='dimension' type='nominal' />
            <column caption='Zipcode' datatype='string' datatype-customized='true' default-format='*00000' name='[zipcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Geocode)]'>
            <groupfilter function='level-members' level='[Indicator 1 (copy)]' user:ui-action-filter='[Action1]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Geocode,Year)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action4]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Indicator 1 (copy)]' />
              <groupfilter function='level-members' level='[Year]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Geocode)]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Geocode,Year)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='184' />
            <format attr='height' value='21' />
            <format attr='text-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]' value='center' />
            <format attr='vertical-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]' value='center' />
            <format attr='font-size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]' value='12' />
            <format attr='font-family' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]' value='Tableau Medium' />
            <format attr='color' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]' value='#555555' />
            <format attr='font-weight' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]' value='normal' />
          </style-rule>
          <style-rule element='header'>
            <format attr='background-color' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]' value='#ffffff' />
            <format attr='color' data-class='subtotal' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]' value='#ffffff' />
          </style-rule>
          <style-rule element='label'>
            <format attr='color' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]' value='#000000' />
            <format attr='font-family' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]' value='Tableau Bold' />
            <format attr='font-size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]' value='14' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#00000000' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]' />
            </encodings>
            <customized-label>
              <formatted-text>
                <run>&lt;</run>
                <run>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813401026565:nk]</run>
                <run>&gt;</run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='Label2'>
      <table>
        <view>
          <datasources>
            <datasource caption='Demographics' name='federated.004akfr0ztvque1dvtnym0ol9g6i' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Indicator2 Parameter' datatype='string' name='[Indicator1 Parameter (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Median Household Income&quot;'>
              <calculation class='tableau' formula='&quot;Median Household Income&quot;' />
            </column>
            <column caption='Geocode Parameter' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Neighborhood Long&quot;'>
              <calculation class='tableau' formula='&quot;Neighborhood Long&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.004akfr0ztvque1dvtnym0ol9g6i'>
            <column caption='Geocode' datatype='string' name='[Indicator 1 (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 2] = &quot;Council District&quot; THEN [council_district]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Neighborhood Long&quot; THEN [neigbhorhood_long]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Neighborhood Short&quot; THEN [neighborhood_short]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Zip Code&quot; THEN [zipcode]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Urban Village&quot; THEN [urban_village]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Blockgroup&quot; THEN [location]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;CITYWIDE&quot; THEN &quot;Seattle&quot;&#13;&#10;ELSE &quot;None&quot; END' />
            </column>
            <column caption='Indicator 2 Label' datatype='string' name='[Indicator 1 Label (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Indicator1 Parameter (copy)]' />
            </column>
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column caption='Council District' datatype='string' name='[council_district]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;SCC1&quot;' value='D1' />
                <alias key='&quot;SCC2&quot;' value='D2' />
                <alias key='&quot;SCC3&quot;' value='D3' />
                <alias key='&quot;SCC4&quot;' value='D4' />
                <alias key='&quot;SCC5&quot;' value='D5' />
                <alias key='&quot;SCC6&quot;' value='D6' />
                <alias key='&quot;SCC7&quot;' value='D7' />
              </aliases>
            </column>
            <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
            <column caption='Neigbhorhood Long' datatype='string' name='[neigbhorhood_long]' role='dimension' type='nominal' />
            <column caption='Neighborhood Short' datatype='string' name='[neighborhood_short]' role='dimension' type='nominal' />
            <column-instance column='[Indicator 1 Label (copy)]' derivation='None' name='[none:Indicator 1 Label (copy):nk]' pivot='key' type='nominal' />
            <column caption='Urban Village' datatype='string' name='[urban_village]' role='dimension' type='nominal' />
            <column caption='Zipcode' datatype='string' datatype-customized='true' default-format='*00000' name='[zipcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Geocode)]'>
            <groupfilter function='level-members' level='[Indicator 1 (copy)]' user:ui-action-filter='[Action1]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Geocode,Year)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action4]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Indicator 1 (copy)]' />
              <groupfilter function='level-members' level='[Year]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Geocode)]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Geocode,Year)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='20' />
            <format attr='height' value='213' />
            <format attr='vertical-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 Label (copy):nk]' value='center' />
            <format attr='font-size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 Label (copy):nk]' value='12' />
            <format attr='text-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 Label (copy):nk]' value='right' />
            <format attr='text-orientation' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 Label (copy):nk]' value='-90' />
            <format attr='color' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 Label (copy):nk]' value='#555555' />
            <format attr='font-weight' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 Label (copy):nk]' value='normal' />
            <format attr='font-family' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 Label (copy):nk]' value='Tableau Medium' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#00000000' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 Label (copy):nk]' />
            </encodings>
            <customized-label>
              <formatted-text>
                <run>&lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 Label (copy):nk]&gt;</run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='MapSlice'>
      <table>
        <view>
          <datasources>
            <datasource caption='Demographics' name='federated.004akfr0ztvque1dvtnym0ol9g6i' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Indicator0 Parameter' datatype='string' name='[Indicator2 Parameter (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Median Household Income&quot;'>
              <calculation class='tableau' formula='&quot;Median Household Income&quot;' />
            </column>
            <column caption='Year Parameter' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;2016&quot;'>
              <calculation class='tableau' formula='&quot;2016&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.004akfr0ztvque1dvtnym0ol9g6i'>
            <column datatype='real' name='[Asian alone]' role='measure' type='quantitative' />
            <column datatype='real' name='[AveSalePrice]' role='measure' type='quantitative' />
            <column datatype='real' name='[Black or African American alone]' role='measure' type='quantitative' />
            <column datatype='string' name='[Blockgroup]' role='dimension' type='nominal' />
            <column caption='Filter Year Parameter' datatype='boolean' name='[Calculation_1115766813408124936]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Year] = [Parameters].[Parameter 4] OR [Parameters].[Parameter 4] = &quot;ALL YEARS&quot;' />
            </column>
            <column datatype='real' name='[Dist Downtown]' role='measure' type='quantitative' />
            <column datatype='real' name='[Food Stamps]' role='measure' type='quantitative' />
            <column datatype='real' name='[Four Year College]' role='measure' type='quantitative' />
            <column datatype='spatial' name='[Geometry]' role='measure' type='nominal' />
            <column caption='Indicator 0 NonAgg' datatype='real' name='[Indicator 0 (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent POC&quot; THEN 1-[White alone]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Own&quot; THEN [Own]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Rent&quot; THEN [Rent]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Asian&quot; THEN [Asian alone]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Black&quot; THEN [Black or African American alone]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent White&quot; THEN [White alone]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Food Stamps&quot; THEN [Food Stamps]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Four Year College&quot; THEN [Four Year College]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Median Household Income&quot; THEN [Med_Hh_Income]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Per Capita Income&quot; THEN [Pc_income]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Population&quot; THEN [Population]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN [Dist Downtown]&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Sales Price&quot; THEN [AveSalePrice]&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Sales Volume&quot; THEN [ParcelCount]&#13;&#10;END' />
            </column>
            <column caption='Indicator 0 Label' datatype='string' name='[Indicator 2 Label (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Indicator2 Parameter (copy)]' />
            </column>
            <column caption='Indicator0TextMed' datatype='string' name='[Indicator0Text (copy)]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN  STR(ROUND(MEDIAN([Indicator 0 (copy)]),1)) + &quot; Miles&quot; // Distance&#13;&#10;&#13;&#10;ELSEIF MEDIAN([Indicator 0 (copy)]) &lt;= 1 THEN STR(ROUND(MEDIAN([Indicator 0 (copy)])*100,0)) + &quot;%&quot; // Percentage&#13;&#10;ELSEIF MEDIAN([Indicator 0 (copy)]) &lt;= 3000 THEN STR(ROUND(MEDIAN([Indicator 0 (copy)]),0))  // Population&#13;&#10;ELSEIF MEDIAN([Indicator 0 (copy)]) &gt; 3000 THEN &quot;$ &quot; +  STR(ROUND(MEDIAN([Indicator 0 (copy)])/1000)) + &quot;,000&quot; // Currency&#13;&#10;END' />
            </column>
            <column caption='Med Hh Income' datatype='real' name='[Med_Hh_Income]' role='measure' type='quantitative' />
            <column datatype='real' name='[Own]' role='measure' type='quantitative' />
            <column datatype='real' name='[ParcelCount]' role='measure' type='quantitative' />
            <column caption='Pc income' datatype='real' name='[Pc_income]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column datatype='real' name='[Rent]' role='measure' type='quantitative' />
            <column datatype='real' name='[White alone]' role='measure' type='quantitative' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column-instance column='[Indicator 2 Label (copy)]' derivation='Attribute' name='[attr:Indicator 2 Label (copy):nk]' pivot='key' type='nominal' />
            <column-instance column='[Indicator 0 (copy)]' derivation='Avg' name='[avg:Indicator 0 (copy):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Geometry]' derivation='Collect' name='[clct:Geometry:nk]' pivot='key' type='nominal' />
            <column-instance column='[Blockgroup]' derivation='None' name='[none:Blockgroup:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1115766813408124936]' derivation='None' name='[none:Calculation_1115766813408124936:nk]' pivot='key' type='nominal' />
            <column-instance column='[Indicator0Text (copy)]' derivation='User' name='[usr:Indicator0Text (copy):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]'>
            <groupfilter function='member' level='[none:Calculation_1115766813408124936:nk]' member='true' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[avg:Indicator 0 (copy):qk]' num-steps='5' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-sequential'>
                <color>#f1f1f1</color>
                <color>#dbd7e7</color>
                <color>#c7bfde</color>
                <color>#b4a9d4</color>
                <color>#a293cb</color>
                <color>#917fc1</color>
                <color>#806db8</color>
                <color>#715bae</color>
                <color>#624ba5</color>
                <color>#553c9b</color>
                <color>#492f92</color>
              </color-palette>
            </encoding>
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-visibility' scope='rows' value='off' />
            <format attr='line-visibility' scope='cols' value='off' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='1' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[avg:Indicator 0 (copy):qk]' />
              <lod column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[clct:Geometry:nk]' />
              <lod column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Blockgroup:nk]' />
              <tooltip column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[attr:Indicator 2 Label (copy):nk]' />
              <tooltip column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator0Text (copy):nk]' />
              <geometry column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[clct:Geometry:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>BG </run>
                <run bold='true'>&lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Blockgroup:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run bold='true'>&lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator0Text (copy):nk]&gt; &lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[attr:Indicator 2 Label (copy):nk]&gt;</run>
                <run>Æ&#10;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='true' />
                <format attr='stroke-color' value='#ffffff' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Latitude (generated)]</rows>
        <cols>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Slice Histogram'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#555555' fontname='Tableau Medium' fontsize='12'>Distribution</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Demographics' name='federated.004akfr0ztvque1dvtnym0ol9g6i' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Indicator0 Parameter' datatype='string' name='[Indicator2 Parameter (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Median Household Income&quot;'>
              <calculation class='tableau' formula='&quot;Median Household Income&quot;' />
            </column>
            <column caption='Year Parameter' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;2016&quot;'>
              <calculation class='tableau' formula='&quot;2016&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.004akfr0ztvque1dvtnym0ol9g6i'>
            <column datatype='real' name='[Asian alone]' role='measure' type='quantitative' />
            <column datatype='real' name='[AveSalePrice]' role='measure' type='quantitative' />
            <column datatype='real' name='[Black or African American alone]' role='measure' type='quantitative' />
            <column datatype='string' name='[Blockgroup]' role='dimension' type='nominal' />
            <column caption='Filter Council District' datatype='boolean' name='[Calculation_1115766813350019075]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[council_district] != &quot;None&quot;' />
            </column>
            <column caption='Filter Year Parameter' datatype='boolean' name='[Calculation_1115766813408124936]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Year] = [Parameters].[Parameter 4] OR [Parameters].[Parameter 4] = &quot;ALL YEARS&quot;' />
            </column>
            <column datatype='real' name='[Dist Downtown]' role='measure' type='quantitative' />
            <column datatype='real' name='[Food Stamps]' role='measure' type='quantitative' />
            <column datatype='real' name='[Four Year College]' role='measure' type='quantitative' />
            <column caption='Indicator 0' datatype='real' name='[Indicator 1 (copy 2)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent POC&quot; THEN (1-AVG([White alone]))&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Own&quot; THEN AVG([Own])&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Rent&quot; THEN AVG([Rent]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Asian&quot; THEN AVG([Asian alone]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Black&quot; THEN AVG([Black or African American alone])&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent White&quot; THEN AVG([White alone]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Food Stamps&quot; THEN AVG([Food Stamps]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Four Year College&quot; THEN AVG([Four Year College]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Median Household Income&quot; THEN AVG([Med_Hh_Income]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Per Capita Income&quot; THEN AVG([Pc_income]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Population&quot; THEN AVG([Population]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN AVG([Dist Downtown])&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Sales Price&quot; THEN AVG([AveSalePrice])&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Sales Volume&quot; THEN AVG([ParcelCount])&#13;&#10;END' />
            </column>
            <column caption='Indicator 0 Bin' datatype='real' name='[Indicator 1 Bin (copy 2)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN ROUND([Indicator 1 (copy 2)],1)&#13;&#10;&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.95 AND [Indicator 1 (copy 2)] &lt;= 1.0 THEN .95&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.90 AND [Indicator 1 (copy 2)] &lt;= .95 THEN .90&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.85 AND [Indicator 1 (copy 2)] &lt;= .90 THEN .85&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.80 AND [Indicator 1 (copy 2)] &lt;= .85 THEN .80&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.75 AND [Indicator 1 (copy 2)] &lt;= .80 THEN .75&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.70 AND [Indicator 1 (copy 2)] &lt;= .75 THEN .70&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.65 AND [Indicator 1 (copy 2)] &lt;= .70 THEN .65&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.60 AND [Indicator 1 (copy 2)] &lt;= .65 THEN .60&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.55 AND [Indicator 1 (copy 2)] &lt;= .60 THEN .55&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.50 AND [Indicator 1 (copy 2)] &lt;= .55 THEN .50&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.45 AND [Indicator 1 (copy 2)] &lt;= .50 THEN .45&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.40 AND [Indicator 1 (copy 2)] &lt;= .45 THEN .40&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.35 AND [Indicator 1 (copy 2)] &lt;= .40 THEN .35&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.30 AND [Indicator 1 (copy 2)] &lt;= .35 THEN .30&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.25 AND [Indicator 1 (copy 2)] &lt;= .30 THEN .25&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.20 AND [Indicator 1 (copy 2)] &lt;= .25 THEN .20&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.15 AND [Indicator 1 (copy 2)] &lt;= .20 THEN .15&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.10 AND [Indicator 1 (copy 2)] &lt;= .15 THEN .10&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.05 AND [Indicator 1 (copy 2)] &lt;= .10 THEN .05&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 0.00 AND [Indicator 1 (copy 2)] &lt;= .05 THEN .00&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &lt; 5000 THEN ROUND([Indicator 1 (copy 2)]/100,0)*100&#13;&#10;ELSE ROUND([Indicator 1 (copy 2)]/10000,0)*10000&#13;&#10;END' />
            </column>
            <column caption='Indicator0Text' datatype='string' name='[Indicator1Text (copy 2)]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN STR(ROUND([Indicator 1 (copy 2)],1)) + &quot; Miles&quot; // Distance&#13;&#10;&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &lt;= 1 THEN STR(ROUND([Indicator 1 (copy 2)]*100,0)) + &quot;%&quot; // Percentage&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &lt;= 3000 THEN STR(ROUND([Indicator 1 (copy 2)],0))  // Population&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 3000 THEN &quot;$ &quot; +  STR(ROUND([Indicator 1 (copy 2)]/1000)) + &quot;,000&quot; // Currency&#13;&#10;END' />
            </column>
            <column caption='Med Hh Income' datatype='real' name='[Med_Hh_Income]' role='measure' type='quantitative' />
            <column datatype='real' name='[Own]' role='measure' type='quantitative' />
            <column datatype='real' name='[ParcelCount]' role='measure' type='quantitative' />
            <column caption='Pc income' datatype='real' name='[Pc_income]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column datatype='real' name='[Rent]' role='measure' type='quantitative' />
            <column datatype='real' name='[White alone]' role='measure' type='quantitative' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column caption='Council District' datatype='string' name='[council_district]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;SCC1&quot;' value='D1' />
                <alias key='&quot;SCC2&quot;' value='D2' />
                <alias key='&quot;SCC3&quot;' value='D3' />
                <alias key='&quot;SCC4&quot;' value='D4' />
                <alias key='&quot;SCC5&quot;' value='D5' />
                <alias key='&quot;SCC6&quot;' value='D6' />
                <alias key='&quot;SCC7&quot;' value='D7' />
              </aliases>
            </column>
            <column-instance column='[Blockgroup]' derivation='CountD' name='[ctd:Blockgroup:qk]' pivot='key' type='quantitative' />
            <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
            <column caption='Neigbhorhood Long' datatype='string' name='[neigbhorhood_long]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1115766813350019075]' derivation='None' name='[none:Calculation_1115766813350019075:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1115766813408124936]' derivation='None' name='[none:Calculation_1115766813408124936:nk]' pivot='key' type='nominal' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column-instance column='[Indicator 1 Bin (copy 2)]' derivation='User' name='[usr:Indicator 1 Bin (copy 2):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Indicator1Text (copy 2)]' derivation='User' name='[usr:Indicator1Text (copy 2):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Blockgroup)]'>
            <groupfilter function='level-members' level='[Blockgroup]' user:ui-action-filter='[Action3]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Council District)]'>
            <groupfilter function='level-members' level='[council_district]' user:ui-action-filter='[Action1]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Neigbhorhood Long)]'>
            <groupfilter function='level-members' level='[neigbhorhood_long]' user:ui-action-filter='[Action6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813350019075:nk]'>
            <groupfilter function='member' level='[none:Calculation_1115766813350019075:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]'>
            <groupfilter function='member' level='[none:Calculation_1115766813408124936:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813350019075:nk]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Neigbhorhood Long)]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Council District)]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Blockgroup)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[ctd:Blockgroup:qk]' scope='rows' value='' />
            <format attr='subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[ctd:Blockgroup:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[ctd:Blockgroup:qk]' scope='rows' value='true' />
            <format attr='display' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[ctd:Blockgroup:qk]' scope='rows' value='false' />
            <format attr='line-visibility' scope='rows' value='off' />
            <format attr='tick-color' scope='rows' value='#00000000' />
            <format attr='title' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator 1 Bin (copy 2):qk]' scope='cols' value='' />
            <format attr='subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator 1 Bin (copy 2):qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator 1 Bin (copy 2):qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='header'>
            <format attr='border-style' data-class='total' scope='rows' value='none' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='border-style' data-class='total' scope='rows' value='none' />
          </style-rule>
          <style-rule element='gridline'>
            <format attr='line-visibility' scope='cols' value='off' />
            <format attr='line-visibility' scope='rows' value='off' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='line-visibility' scope='cols' value='off' />
            <format attr='line-visibility' scope='rows' value='off' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:location:nk]' />
              <tooltip column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy 2):nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Location:&#9;</run>
                <run bold='true'>&lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:location:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>&lt;[Parameters].[Indicator2 Parameter (copy)]&gt;:&#9;&lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy 2):nk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.64767956733703613' />
                <format attr='mark-color' value='#492f92' />
                <format attr='has-stroke' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.004akfr0ztvque1dvtnym0ol9g6i].[ctd:Blockgroup:qk]</rows>
        <cols>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator 1 Bin (copy 2):qk]</cols>
      </table>
    </worksheet>
    <worksheet name='SliceAnnual'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#555555' fontname='Tableau Medium' fontsize='12'>  Trend</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Demographics' name='federated.004akfr0ztvque1dvtnym0ol9g6i' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Indicator0 Parameter' datatype='string' name='[Indicator2 Parameter (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Median Household Income&quot;'>
              <calculation class='tableau' formula='&quot;Median Household Income&quot;' />
            </column>
            <column caption='Geocode Parameter' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Neighborhood Long&quot;'>
              <calculation class='tableau' formula='&quot;Neighborhood Long&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.004akfr0ztvque1dvtnym0ol9g6i'>
            <column datatype='real' name='[Asian alone]' role='measure' type='quantitative' />
            <column datatype='real' name='[AveSalePrice]' role='measure' type='quantitative' />
            <column datatype='real' name='[Black or African American alone]' role='measure' type='quantitative' />
            <column datatype='string' name='[Blockgroup]' role='dimension' type='nominal' />
            <column caption='Filter Council District' datatype='boolean' name='[Calculation_1115766813350019075]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[council_district] != &quot;None&quot;' />
            </column>
            <column datatype='real' name='[Dist Downtown]' role='measure' type='quantitative' />
            <column datatype='real' name='[Food Stamps]' role='measure' type='quantitative' />
            <column datatype='real' name='[Four Year College]' role='measure' type='quantitative' />
            <column caption='Indicator 0' datatype='real' name='[Indicator 1 (copy 2)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent POC&quot; THEN (1-AVG([White alone]))&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Own&quot; THEN AVG([Own])&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Rent&quot; THEN AVG([Rent]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Asian&quot; THEN AVG([Asian alone]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Black&quot; THEN AVG([Black or African American alone])&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent White&quot; THEN AVG([White alone]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Food Stamps&quot; THEN AVG([Food Stamps]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Four Year College&quot; THEN AVG([Four Year College]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Median Household Income&quot; THEN AVG([Med_Hh_Income]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Per Capita Income&quot; THEN AVG([Pc_income]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Population&quot; THEN AVG([Population]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN AVG([Dist Downtown])&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Sales Price&quot; THEN AVG([AveSalePrice])&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Sales Volume&quot; THEN AVG([ParcelCount])&#13;&#10;END' />
            </column>
            <column caption='Geocode' datatype='string' name='[Indicator 1 (copy)]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 2] = &quot;Council District&quot; THEN [council_district]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Neighborhood Long&quot; THEN [neigbhorhood_long]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Neighborhood Short&quot; THEN [neighborhood_short]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Zip Code&quot; THEN [zipcode]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Urban Village&quot; THEN [urban_village]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;Blockgroup&quot; THEN [location]&#13;&#10;ELSEIF [Parameters].[Parameter 2] = &quot;CITYWIDE&quot; THEN &quot;Seattle&quot;&#13;&#10;ELSE &quot;None&quot; END' />
            </column>
            <column caption='Indicator0Text' datatype='string' name='[Indicator1Text (copy 2)]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN STR(ROUND([Indicator 1 (copy 2)],1)) + &quot; Miles&quot; // Distance&#13;&#10;&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &lt;= 1 THEN STR(ROUND([Indicator 1 (copy 2)]*100,0)) + &quot;%&quot; // Percentage&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &lt;= 3000 THEN STR(ROUND([Indicator 1 (copy 2)],0))  // Population&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 3000 THEN &quot;$ &quot; +  STR(ROUND([Indicator 1 (copy 2)]/1000)) + &quot;,000&quot; // Currency&#13;&#10;END' />
            </column>
            <column caption='Med Hh Income' datatype='real' name='[Med_Hh_Income]' role='measure' type='quantitative' />
            <column datatype='real' name='[Own]' role='measure' type='quantitative' />
            <column datatype='real' name='[ParcelCount]' role='measure' type='quantitative' />
            <column caption='Pc income' datatype='real' name='[Pc_income]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column datatype='real' name='[Rent]' role='measure' type='quantitative' />
            <column datatype='real' name='[White alone]' role='measure' type='quantitative' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column caption='Council District' datatype='string' name='[council_district]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;SCC1&quot;' value='D1' />
                <alias key='&quot;SCC2&quot;' value='D2' />
                <alias key='&quot;SCC3&quot;' value='D3' />
                <alias key='&quot;SCC4&quot;' value='D4' />
                <alias key='&quot;SCC5&quot;' value='D5' />
                <alias key='&quot;SCC6&quot;' value='D6' />
                <alias key='&quot;SCC7&quot;' value='D7' />
              </aliases>
            </column>
            <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
            <column caption='Neigbhorhood Long' datatype='string' name='[neigbhorhood_long]' role='dimension' type='nominal' />
            <column caption='Neighborhood Short' datatype='string' name='[neighborhood_short]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1115766813350019075]' derivation='None' name='[none:Calculation_1115766813350019075:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:nk]' pivot='key' type='nominal' />
            <column caption='Urban Village' datatype='string' name='[urban_village]' role='dimension' type='nominal' />
            <column-instance column='[Indicator 1 (copy 2)]' derivation='User' name='[usr:Indicator 1 (copy 2):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Indicator1Text (copy 2)]' derivation='User' name='[usr:Indicator1Text (copy 2):nk]' pivot='key' type='nominal' />
            <column caption='Zipcode' datatype='string' datatype-customized='true' default-format='*00000' name='[zipcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Blockgroup)]'>
            <groupfilter function='level-members' level='[Blockgroup]' user:ui-action-filter='[Action3]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Council District)]'>
            <groupfilter function='level-members' level='[council_district]' user:ui-action-filter='[Action1]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Geocode)]'>
            <groupfilter function='level-members' level='[Indicator 1 (copy)]' user:ui-action-filter='[Action1]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Location)]'>
            <groupfilter function='level-members' level='[location]' user:ui-action-filter='[Action5]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Neigbhorhood Long)]'>
            <groupfilter function='level-members' level='[neigbhorhood_long]' user:ui-action-filter='[Action6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813350019075:nk]'>
            <groupfilter function='member' level='[none:Calculation_1115766813350019075:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813350019075:nk]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Geocode)]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Neigbhorhood Long)]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Council District)]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Location)]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Blockgroup)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator 1 (copy 2):qk]' scope='rows' value='false' />
            <format attr='line-visibility' scope='cols' value='off' />
            <format attr='tick-color' scope='cols' value='#00000000' />
            <format attr='line-visibility' scope='rows' value='off' />
            <format attr='tick-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]' value='64' />
            <format attr='font-weight' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy 2):nk]' value='normal' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]' field-type='nominal' max-size='1' min-size='0.222683' type='catsize' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='border-style' data-class='total' scope='cols' value='none' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='gridline'>
            <format attr='line-visibility' scope='rows' value='off' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='line-visibility' scope='cols' value='off' />
            <format attr='line-visibility' scope='rows' value='off' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-visibility' scope='cols' value='off' />
            <format attr='line-visibility' scope='rows' value='off' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <text column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy 2):nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Year:&#9;</run>
                <run bold='true'>&lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Average:&#9;</run>
                <run bold='true'>&lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator 1 (copy 2):qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>&lt;[Parameters].[Indicator2 Parameter (copy)]&gt;:&#9;</run>
                <run bold='true'>&lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy 2):nk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <customized-label>
              <formatted-text>
                <run fontname='Tableau Medium' fontsize='10'>&lt;</run>
                <run fontname='Tableau Medium' fontsize='10'>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy 2):nk]</run>
                <run fontname='Tableau Medium' fontsize='10'>&gt;</run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='size' value='1' />
                <format attr='mark-color' value='#492f92' />
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-labels-mode' value='range' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator 1 (copy 2):qk]</rows>
        <cols>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='SliceAvg'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#555555' fontname='Tableau Medium' fontsize='12'>Average</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Demographics' name='federated.004akfr0ztvque1dvtnym0ol9g6i' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Indicator0 Parameter' datatype='string' name='[Indicator2 Parameter (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Median Household Income&quot;'>
              <calculation class='tableau' formula='&quot;Median Household Income&quot;' />
            </column>
            <column caption='Year Parameter' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;2016&quot;'>
              <calculation class='tableau' formula='&quot;2016&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.004akfr0ztvque1dvtnym0ol9g6i'>
            <column datatype='real' name='[Asian alone]' role='measure' type='quantitative' />
            <column datatype='real' name='[AveSalePrice]' role='measure' type='quantitative' />
            <column datatype='real' name='[Black or African American alone]' role='measure' type='quantitative' />
            <column datatype='string' name='[Blockgroup]' role='dimension' type='nominal' />
            <column caption='Filter Year Parameter' datatype='boolean' name='[Calculation_1115766813408124936]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Year] = [Parameters].[Parameter 4] OR [Parameters].[Parameter 4] = &quot;ALL YEARS&quot;' />
            </column>
            <column datatype='real' name='[Dist Downtown]' role='measure' type='quantitative' />
            <column datatype='real' name='[Food Stamps]' role='measure' type='quantitative' />
            <column datatype='real' name='[Four Year College]' role='measure' type='quantitative' />
            <column caption='Indicator 0' datatype='real' name='[Indicator 1 (copy 2)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent POC&quot; THEN (1-AVG([White alone]))&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Own&quot; THEN AVG([Own])&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Rent&quot; THEN AVG([Rent]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Asian&quot; THEN AVG([Asian alone]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Black&quot; THEN AVG([Black or African American alone])&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent White&quot; THEN AVG([White alone]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Food Stamps&quot; THEN AVG([Food Stamps]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Four Year College&quot; THEN AVG([Four Year College]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Median Household Income&quot; THEN AVG([Med_Hh_Income]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Per Capita Income&quot; THEN AVG([Pc_income]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Population&quot; THEN AVG([Population]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN AVG([Dist Downtown])&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Sales Price&quot; THEN AVG([AveSalePrice])&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Sales Volume&quot; THEN AVG([ParcelCount])&#13;&#10;END' />
            </column>
            <column caption='Indicator0Text' datatype='string' name='[Indicator1Text (copy 2)]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN STR(ROUND([Indicator 1 (copy 2)],1)) + &quot; Miles&quot; // Distance&#13;&#10;&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &lt;= 1 THEN STR(ROUND([Indicator 1 (copy 2)]*100,0)) + &quot;%&quot; // Percentage&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &lt;= 3000 THEN STR(ROUND([Indicator 1 (copy 2)],0))  // Population&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 3000 THEN &quot;$ &quot; +  STR(ROUND([Indicator 1 (copy 2)]/1000)) + &quot;,000&quot; // Currency&#13;&#10;END' />
            </column>
            <column caption='Med Hh Income' datatype='real' name='[Med_Hh_Income]' role='measure' type='quantitative' />
            <column datatype='real' name='[Own]' role='measure' type='quantitative' />
            <column datatype='real' name='[ParcelCount]' role='measure' type='quantitative' />
            <column caption='Pc income' datatype='real' name='[Pc_income]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column datatype='real' name='[Rent]' role='measure' type='quantitative' />
            <column datatype='real' name='[White alone]' role='measure' type='quantitative' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column caption='Council District' datatype='string' name='[council_district]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;SCC1&quot;' value='D1' />
                <alias key='&quot;SCC2&quot;' value='D2' />
                <alias key='&quot;SCC3&quot;' value='D3' />
                <alias key='&quot;SCC4&quot;' value='D4' />
                <alias key='&quot;SCC5&quot;' value='D5' />
                <alias key='&quot;SCC6&quot;' value='D6' />
                <alias key='&quot;SCC7&quot;' value='D7' />
              </aliases>
            </column>
            <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
            <column caption='Neigbhorhood Long' datatype='string' name='[neigbhorhood_long]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1115766813408124936]' derivation='None' name='[none:Calculation_1115766813408124936:nk]' pivot='key' type='nominal' />
            <column-instance column='[Indicator1Text (copy 2)]' derivation='User' name='[usr:Indicator1Text (copy 2):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Blockgroup)]'>
            <groupfilter function='level-members' level='[Blockgroup]' user:ui-action-filter='[Action3]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Council District)]'>
            <groupfilter function='level-members' level='[council_district]' user:ui-action-filter='[Action1]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Location)]'>
            <groupfilter function='level-members' level='[location]' user:ui-action-filter='[Action5]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Neigbhorhood Long)]'>
            <groupfilter function='level-members' level='[neigbhorhood_long]' user:ui-action-filter='[Action6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]'>
            <groupfilter function='member' level='[none:Calculation_1115766813408124936:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Council District)]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Neigbhorhood Long)]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Location)]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Blockgroup)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-family' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy 2):nk]' value='Tableau Bold' />
            <format attr='text-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy 2):nk]' value='center' />
            <format attr='vertical-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy 2):nk]' value='center' />
            <format attr='font-size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy 2):nk]' value='18' />
            <format attr='color' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy 2):nk]' value='#492f92' />
            <format attr='height' value='32' />
          </style-rule>
          <style-rule element='caption'>
            <format attr='border-style' value='solid' />
            <format attr='background-color' value='#d4d4d4' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Text' />
            <encodings>
              <text column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy 2):nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='SliceDistrict'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#000000' fontname='Tableau Medium' fontsize='12'>By Council District</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Demographics' name='federated.004akfr0ztvque1dvtnym0ol9g6i' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Indicator0 Parameter' datatype='string' name='[Indicator2 Parameter (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Median Household Income&quot;'>
              <calculation class='tableau' formula='&quot;Median Household Income&quot;' />
            </column>
            <column caption='Year Parameter' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;2016&quot;'>
              <calculation class='tableau' formula='&quot;2016&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.004akfr0ztvque1dvtnym0ol9g6i'>
            <column datatype='real' name='[Asian alone]' role='measure' type='quantitative' />
            <column datatype='real' name='[AveSalePrice]' role='measure' type='quantitative' />
            <column datatype='real' name='[Black or African American alone]' role='measure' type='quantitative' />
            <column datatype='string' name='[Blockgroup]' role='dimension' type='nominal' />
            <column caption='Filter Council District' datatype='boolean' name='[Calculation_1115766813350019075]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[council_district] != &quot;None&quot;' />
            </column>
            <column caption='Filter Year Parameter' datatype='boolean' name='[Calculation_1115766813408124936]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Year] = [Parameters].[Parameter 4] OR [Parameters].[Parameter 4] = &quot;ALL YEARS&quot;' />
            </column>
            <column datatype='real' name='[Dist Downtown]' role='measure' type='quantitative' />
            <column datatype='real' name='[Food Stamps]' role='measure' type='quantitative' />
            <column datatype='real' name='[Four Year College]' role='measure' type='quantitative' />
            <column caption='Indicator 0' datatype='real' name='[Indicator 1 (copy 2)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent POC&quot; THEN (1-AVG([White alone]))&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Own&quot; THEN AVG([Own])&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Rent&quot; THEN AVG([Rent]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Asian&quot; THEN AVG([Asian alone]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Black&quot; THEN AVG([Black or African American alone])&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent White&quot; THEN AVG([White alone]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Food Stamps&quot; THEN AVG([Food Stamps]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Four Year College&quot; THEN AVG([Four Year College]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Median Household Income&quot; THEN AVG([Med_Hh_Income]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Per Capita Income&quot; THEN AVG([Pc_income]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Population&quot; THEN AVG([Population]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN AVG([Dist Downtown])&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Sales Price&quot; THEN AVG([AveSalePrice])&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Sales Volume&quot; THEN AVG([ParcelCount])&#13;&#10;END' />
            </column>
            <column caption='Indicator0Text' datatype='string' name='[Indicator1Text (copy 2)]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN STR(ROUND([Indicator 1 (copy 2)],1)) + &quot; Miles&quot; // Distance&#13;&#10;&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &lt;= 1 THEN STR(ROUND([Indicator 1 (copy 2)]*100,0)) + &quot;%&quot; // Percentage&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &lt;= 3000 THEN STR(ROUND([Indicator 1 (copy 2)],0))  // Population&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 3000 THEN &quot;$ &quot; +  STR(ROUND([Indicator 1 (copy 2)]/1000)) + &quot;,000&quot; // Currency&#13;&#10;END' />
            </column>
            <column caption='Med Hh Income' datatype='real' name='[Med_Hh_Income]' role='measure' type='quantitative' />
            <column datatype='real' name='[Own]' role='measure' type='quantitative' />
            <column datatype='real' name='[ParcelCount]' role='measure' type='quantitative' />
            <column caption='Pc income' datatype='real' name='[Pc_income]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column datatype='real' name='[Rent]' role='measure' type='quantitative' />
            <column datatype='real' name='[White alone]' role='measure' type='quantitative' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column caption='Council District' datatype='string' name='[council_district]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;SCC1&quot;' value='D1' />
                <alias key='&quot;SCC2&quot;' value='D2' />
                <alias key='&quot;SCC3&quot;' value='D3' />
                <alias key='&quot;SCC4&quot;' value='D4' />
                <alias key='&quot;SCC5&quot;' value='D5' />
                <alias key='&quot;SCC6&quot;' value='D6' />
                <alias key='&quot;SCC7&quot;' value='D7' />
              </aliases>
            </column>
            <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
            <column caption='Neigbhorhood Long' datatype='string' name='[neigbhorhood_long]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1115766813350019075]' derivation='None' name='[none:Calculation_1115766813350019075:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1115766813408124936]' derivation='None' name='[none:Calculation_1115766813408124936:nk]' pivot='key' type='nominal' />
            <column-instance column='[council_district]' derivation='None' name='[none:council_district:nk]' pivot='key' type='nominal' />
            <column-instance column='[Indicator 1 (copy 2)]' derivation='User' name='[usr:Indicator 1 (copy 2):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Indicator1Text (copy 2)]' derivation='User' name='[usr:Indicator1Text (copy 2):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Blockgroup)]'>
            <groupfilter function='level-members' level='[Blockgroup]' user:ui-action-filter='[Action3]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Location)]'>
            <groupfilter function='level-members' level='[location]' user:ui-action-filter='[Action5]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Neigbhorhood Long)]'>
            <groupfilter function='level-members' level='[neigbhorhood_long]' user:ui-action-filter='[Action6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813350019075:nk]'>
            <groupfilter function='member' level='[none:Calculation_1115766813350019075:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]'>
            <groupfilter function='member' level='[none:Calculation_1115766813408124936:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813350019075:nk]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Neigbhorhood Long)]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Location)]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Blockgroup)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator 1 (copy 2):qk]' scope='cols' value='false' />
            <format attr='line-visibility' scope='rows' value='off' />
            <format attr='tick-color' scope='rows' value='#00000000' />
            <format attr='line-visibility' scope='cols' value='off' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height-header' value='17' />
            <format attr='border-style' data-class='total' scope='rows' value='none' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='border-style' data-class='total' scope='rows' value='none' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='gridline'>
            <format attr='line-visibility' scope='cols' value='off' />
            <format attr='line-visibility' scope='rows' value='off' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='line-visibility' scope='cols' value='off' />
            <format attr='line-visibility' scope='rows' value='off' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <text column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy 2):nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Council District:&#9;</run>
                <run bold='true'>&lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:council_district:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Average:&#9;</run>
                <run bold='true'>&lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator 1 (copy 2):qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>&lt;[Parameters].[Indicator2 Parameter (copy)]&gt;t:&#9;</run>
                <run bold='true'>&lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy 2):nk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#492f92' />
                <format attr='has-stroke' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:council_district:nk]</rows>
        <cols>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator 1 (copy 2):qk]</cols>
      </table>
    </worksheet>
    <worksheet name='SliceMed'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#555555' fontname='Tableau Medium' fontsize='12'>Median</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Demographics' name='federated.004akfr0ztvque1dvtnym0ol9g6i' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Indicator0 Parameter' datatype='string' name='[Indicator2 Parameter (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Median Household Income&quot;'>
              <calculation class='tableau' formula='&quot;Median Household Income&quot;' />
            </column>
            <column caption='Year Parameter' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;2016&quot;'>
              <calculation class='tableau' formula='&quot;2016&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.004akfr0ztvque1dvtnym0ol9g6i'>
            <column datatype='real' name='[Asian alone]' role='measure' type='quantitative' />
            <column datatype='real' name='[AveSalePrice]' role='measure' type='quantitative' />
            <column datatype='real' name='[Black or African American alone]' role='measure' type='quantitative' />
            <column datatype='string' name='[Blockgroup]' role='dimension' type='nominal' />
            <column caption='Filter Year Parameter' datatype='boolean' name='[Calculation_1115766813408124936]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Year] = [Parameters].[Parameter 4] OR [Parameters].[Parameter 4] = &quot;ALL YEARS&quot;' />
            </column>
            <column datatype='real' name='[Dist Downtown]' role='measure' type='quantitative' />
            <column datatype='real' name='[Food Stamps]' role='measure' type='quantitative' />
            <column datatype='real' name='[Four Year College]' role='measure' type='quantitative' />
            <column caption='Indicator 0 NonAgg' datatype='real' name='[Indicator 0 (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent POC&quot; THEN 1-[White alone]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Own&quot; THEN [Own]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Rent&quot; THEN [Rent]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Asian&quot; THEN [Asian alone]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Black&quot; THEN [Black or African American alone]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent White&quot; THEN [White alone]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Food Stamps&quot; THEN [Food Stamps]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Four Year College&quot; THEN [Four Year College]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Median Household Income&quot; THEN [Med_Hh_Income]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Per Capita Income&quot; THEN [Pc_income]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Population&quot; THEN [Population]&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN [Dist Downtown]&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Sales Price&quot; THEN [AveSalePrice]&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Sales Volume&quot; THEN [ParcelCount]&#13;&#10;END' />
            </column>
            <column caption='Indicator0TextMed' datatype='string' name='[Indicator0Text (copy)]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN  STR(ROUND(MEDIAN([Indicator 0 (copy)]),1)) + &quot; Miles&quot; // Distance&#13;&#10;&#13;&#10;ELSEIF MEDIAN([Indicator 0 (copy)]) &lt;= 1 THEN STR(ROUND(MEDIAN([Indicator 0 (copy)])*100,0)) + &quot;%&quot; // Percentage&#13;&#10;ELSEIF MEDIAN([Indicator 0 (copy)]) &lt;= 3000 THEN STR(ROUND(MEDIAN([Indicator 0 (copy)]),0))  // Population&#13;&#10;ELSEIF MEDIAN([Indicator 0 (copy)]) &gt; 3000 THEN &quot;$ &quot; +  STR(ROUND(MEDIAN([Indicator 0 (copy)])/1000)) + &quot;,000&quot; // Currency&#13;&#10;END' />
            </column>
            <column caption='Med Hh Income' datatype='real' name='[Med_Hh_Income]' role='measure' type='quantitative' />
            <column datatype='real' name='[Own]' role='measure' type='quantitative' />
            <column datatype='real' name='[ParcelCount]' role='measure' type='quantitative' />
            <column caption='Pc income' datatype='real' name='[Pc_income]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column datatype='real' name='[Rent]' role='measure' type='quantitative' />
            <column datatype='real' name='[White alone]' role='measure' type='quantitative' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column caption='Council District' datatype='string' name='[council_district]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;SCC1&quot;' value='D1' />
                <alias key='&quot;SCC2&quot;' value='D2' />
                <alias key='&quot;SCC3&quot;' value='D3' />
                <alias key='&quot;SCC4&quot;' value='D4' />
                <alias key='&quot;SCC5&quot;' value='D5' />
                <alias key='&quot;SCC6&quot;' value='D6' />
                <alias key='&quot;SCC7&quot;' value='D7' />
              </aliases>
            </column>
            <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
            <column caption='Neigbhorhood Long' datatype='string' name='[neigbhorhood_long]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1115766813408124936]' derivation='None' name='[none:Calculation_1115766813408124936:nk]' pivot='key' type='nominal' />
            <column-instance column='[Indicator0Text (copy)]' derivation='User' name='[usr:Indicator0Text (copy):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Blockgroup)]'>
            <groupfilter function='level-members' level='[Blockgroup]' user:ui-action-filter='[Action3]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Council District)]'>
            <groupfilter function='level-members' level='[council_district]' user:ui-action-filter='[Action1]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Location)]'>
            <groupfilter function='level-members' level='[location]' user:ui-action-filter='[Action5]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Neigbhorhood Long)]'>
            <groupfilter function='level-members' level='[neigbhorhood_long]' user:ui-action-filter='[Action6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]'>
            <groupfilter function='member' level='[none:Calculation_1115766813408124936:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Neigbhorhood Long)]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Council District)]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Location)]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[Action (Blockgroup)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-family' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator0Text (copy):nk]' value='Tableau Bold' />
            <format attr='text-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator0Text (copy):nk]' value='center' />
            <format attr='vertical-align' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator0Text (copy):nk]' value='center' />
            <format attr='font-size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator0Text (copy):nk]' value='18' />
            <format attr='color' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator0Text (copy):nk]' value='#492f92' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-family' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator0Text (copy):nk]' value='Tableau Bold' />
            <format attr='font-weight' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator0Text (copy):nk]' value='bold' />
            <format attr='font-size' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator0Text (copy):nk]' value='20' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Text' />
            <encodings>
              <text column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator0Text (copy):nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='SliceNeigborhood'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#555555' fontname='Tableau Medium' fontsize='12'>By Neighborhood</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Demographics' name='federated.004akfr0ztvque1dvtnym0ol9g6i' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Indicator0 Parameter' datatype='string' name='[Indicator2 Parameter (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Median Household Income&quot;'>
              <calculation class='tableau' formula='&quot;Median Household Income&quot;' />
            </column>
            <column caption='Year Parameter' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;2016&quot;'>
              <calculation class='tableau' formula='&quot;2016&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.004akfr0ztvque1dvtnym0ol9g6i'>
            <column datatype='real' name='[Asian alone]' role='measure' type='quantitative' />
            <column datatype='real' name='[AveSalePrice]' role='measure' type='quantitative' />
            <column datatype='real' name='[Black or African American alone]' role='measure' type='quantitative' />
            <column caption='Filter Council District' datatype='boolean' name='[Calculation_1115766813350019075]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[council_district] != &quot;None&quot;' />
            </column>
            <column caption='Filter Year Parameter' datatype='boolean' name='[Calculation_1115766813408124936]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Year] = [Parameters].[Parameter 4] OR [Parameters].[Parameter 4] = &quot;ALL YEARS&quot;' />
            </column>
            <column datatype='real' name='[Dist Downtown]' role='measure' type='quantitative' />
            <column datatype='real' name='[Food Stamps]' role='measure' type='quantitative' />
            <column datatype='real' name='[Four Year College]' role='measure' type='quantitative' />
            <column caption='Indicator 0' datatype='real' name='[Indicator 1 (copy 2)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent POC&quot; THEN (1-AVG([White alone]))&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Own&quot; THEN AVG([Own])&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Rent&quot; THEN AVG([Rent]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Asian&quot; THEN AVG([Asian alone]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Black&quot; THEN AVG([Black or African American alone])&#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent White&quot; THEN AVG([White alone]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Food Stamps&quot; THEN AVG([Food Stamps]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Percent Four Year College&quot; THEN AVG([Four Year College]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Median Household Income&quot; THEN AVG([Med_Hh_Income]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Per Capita Income&quot; THEN AVG([Pc_income]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Population&quot; THEN AVG([Population]) &#13;&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN AVG([Dist Downtown])&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Sales Price&quot; THEN AVG([AveSalePrice])&#10;ELSEIF [Parameters].[Indicator2 Parameter (copy)] = &quot;Sales Volume&quot; THEN AVG([ParcelCount])&#13;&#10;END' />
            </column>
            <column caption='Indicator0Text' datatype='string' name='[Indicator1Text (copy 2)]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Indicator2 Parameter (copy)] = &quot;Dist Downtown&quot; THEN STR(ROUND([Indicator 1 (copy 2)],1)) + &quot; Miles&quot; // Distance&#13;&#10;&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &lt;= 1 THEN STR(ROUND([Indicator 1 (copy 2)]*100,0)) + &quot;%&quot; // Percentage&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &lt;= 3000 THEN STR(ROUND([Indicator 1 (copy 2)],0))  // Population&#13;&#10;ELSEIF [Indicator 1 (copy 2)] &gt; 3000 THEN &quot;$ &quot; +  STR(ROUND([Indicator 1 (copy 2)]/1000)) + &quot;,000&quot; // Currency&#13;&#10;END' />
            </column>
            <column caption='Med Hh Income' datatype='real' name='[Med_Hh_Income]' role='measure' type='quantitative' />
            <column datatype='real' name='[Own]' role='measure' type='quantitative' />
            <column datatype='real' name='[ParcelCount]' role='measure' type='quantitative' />
            <column caption='Pc income' datatype='real' name='[Pc_income]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column datatype='real' name='[Rent]' role='measure' type='quantitative' />
            <column datatype='real' name='[White alone]' role='measure' type='quantitative' />
            <column datatype='string' name='[Year]' role='dimension' type='nominal' />
            <column caption='Council District' datatype='string' name='[council_district]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;SCC1&quot;' value='D1' />
                <alias key='&quot;SCC2&quot;' value='D2' />
                <alias key='&quot;SCC3&quot;' value='D3' />
                <alias key='&quot;SCC4&quot;' value='D4' />
                <alias key='&quot;SCC5&quot;' value='D5' />
                <alias key='&quot;SCC6&quot;' value='D6' />
                <alias key='&quot;SCC7&quot;' value='D7' />
              </aliases>
            </column>
            <column caption='Neigbhorhood Long' datatype='string' name='[neigbhorhood_long]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1115766813350019075]' derivation='None' name='[none:Calculation_1115766813350019075:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1115766813408124936]' derivation='None' name='[none:Calculation_1115766813408124936:nk]' pivot='key' type='nominal' />
            <column-instance column='[neigbhorhood_long]' derivation='None' name='[none:neigbhorhood_long:nk]' pivot='key' type='nominal' />
            <column-instance column='[Indicator 1 (copy 2)]' derivation='User' name='[usr:Indicator 1 (copy 2):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Indicator1Text (copy 2)]' derivation='User' name='[usr:Indicator1Text (copy 2):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813350019075:nk]'>
            <groupfilter function='member' level='[none:Calculation_1115766813350019075:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]'>
            <groupfilter function='member' level='[none:Calculation_1115766813408124936:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <computed-sort column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:neigbhorhood_long:nk]' direction='DESC' using='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator 1 (copy 2):qk]' />
          <slices>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]</column>
            <column>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813350019075:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator 1 (copy 2):qk]' scope='cols' value='false' />
            <format attr='line-visibility' scope='rows' value='off' />
            <format attr='tick-color' scope='rows' value='#00000000' />
            <format attr='line-visibility' scope='cols' value='off' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height-header' value='17' />
            <format attr='border-style' data-class='total' scope='rows' value='none' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator 1 (copy 2):qk]' num-steps='7' palette='red_green_gold_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='border-style' data-class='total' scope='rows' value='none' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='gridline'>
            <format attr='line-visibility' scope='cols' value='off' />
            <format attr='line-visibility' scope='rows' value='off' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='line-visibility' scope='cols' value='off' />
            <format attr='line-visibility' scope='rows' value='off' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <text column='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy 2):nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Neigbhorhood Long:&#9;</run>
                <run bold='true'>&lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:neigbhorhood_long:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Average:&#9;</run>
                <run bold='true'>&lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator 1 (copy 2):qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>&lt;[Parameters].[Indicator2 Parameter (copy)]&gt;:&#9;</run>
                <run bold='true'>&lt;[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator1Text (copy 2):nk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#492f92' />
                <format attr='has-stroke' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:neigbhorhood_long:nk]</rows>
        <cols>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Indicator 1 (copy 2):qk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='COMPARE'>
      <style />
      <size maxheight='800' maxwidth='1200' minheight='800' minwidth='1200' sizing-mode='fixed' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='42' param='horz' type='layout-flow' w='98666' x='667' y='1000'>
            <zone h='98000' id='38' param='horz' type='layout-flow' w='98666' x='667' y='1000'>
              <zone h='98000' id='36' type='layout-basic' w='98666' x='667' y='1000'>
                <zone h='98000' id='23' param='horz' type='layout-flow' w='95998' x='667' y='1000'>
                  <zone h='98000' id='21' type='layout-basic' w='95998' x='667' y='1000'>
                    <zone h='4001' id='12' type='empty' w='95998' x='667' y='94999'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='53500' id='9' name='BlockGroup' w='38958' x='57707' y='8000'>
                      <layout-cache minwidth='155' type-h='fixed' type-w='scalable' />
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone custom-title='true' h='7000' id='11' mode='compact' param='[Parameters].[Indicator1 Parameter (copy)]' type='paramctrl' w='16945' x='79720' y='1000'>
                      <formatted-text>
                        <run>Y - Axis</run>
                      </formatted-text>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone custom-title='true' h='7000' id='10' mode='compact' param='[Parameters].[Parameter 1]' type='paramctrl' w='14837' x='64883' y='1000'>
                      <formatted-text>
                        <run>X - Axis</run>
                      </formatted-text>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='7000' id='14' type='empty' w='2595' x='46071' y='1000'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='5124' id='16' type='empty' w='38958' x='57707' y='61500'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='22374' id='17' name='CompareHistogram2' show-title='false' w='19189' x='38518' y='72625'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='22374' id='15' name='CompareHistogram1' show-title='false' w='14581' x='15249' y='72625'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone forceUpdate='true' h='7000' id='20' type='text' w='24331' x='667' y='1000'>
                      <formatted-text>
                        <run fontalignment='1' fontcolor='#000000' fontname='Tableau Bold' fontsize='22'>COMPARE</run>
                      </formatted-text>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone custom-title='true' h='7000' id='25' mode='compact' param='[Parameters].[Parameter 3]' type='paramctrl' w='14406' x='31665' y='1000'>
                      <formatted-text>
                        <run>Council District</run>
                      </formatted-text>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone custom-title='true' h='7000' id='24' mode='compact' param='[Parameters].[Parameter 4]' type='paramctrl' w='16217' x='48666' y='1000'>
                      <formatted-text>
                        <run>Year</run>
                      </formatted-text>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='22374' id='26' name='CompareSummary1' show-title='false' w='14582' x='667' y='72625'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='22374' id='28' name='CompareSummary2' show-title='false' w='8688' x='29830' y='72625'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='8375' id='31' name='Compare Header' show-title='false' w='34500' x='62165' y='66624'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='20000' id='32' name='Compare Narrative' show-title='false' w='34500' x='62165' y='74999'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='28375' id='34' type='empty' w='4458' x='57707' y='66624'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='7000' id='39' type='empty' w='6667' x='24998' y='1000'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='64625' id='40' name='CompareSlice1' show-title='false' w='29163' x='667' y='8000'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='64625' id='44' name='CompareSlice2' show-title='false' w='27877' x='29830' y='8000'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                  </zone>
                </zone>
                <zone h='98000' id='33' type='empty' w='2668' x='96665' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
        <zone h='3750' id='29' name='Label1' show-title='false' w='21833' x='69167' y='61250' />
        <zone h='48250' id='30' name='Label2' show-title='false' w='2500' x='58000' y='15750' />
      </zones>
    </dashboard>
    <dashboard name='Dashboard 5'>
      <style />
      <size maxheight='768' maxwidth='1366' minheight='768' minwidth='1366' preset-index='0' sizing-mode='fixed' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='97916' id='5' param='horz' type='layout-flow' w='98828' x='586' y='1042'>
            <zone h='97916' id='3' type='layout-basic' w='87115' x='586' y='1042'>
              <zone h='97916' id='1' name='Explore Bubble (2)' show-title='false' w='87115' x='586' y='1042'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='160' h='97916' id='4' is-fixed='true' param='vert' type='layout-flow' w='11713' x='87701' y='1042'>
              <zone h='5990' id='6' name='Explore Bubble (2)' pane-specification-id='5' param='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]' type='size' w='11713' x='87701' y='1042'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='45052' id='7' name='Explore Bubble (2)' pane-specification-id='6' param='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]' type='color' w='11713' x='87701' y='7032'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='6771' id='8' mode='compact' param='[Parameters].[Parameter 1]' type='paramctrl' w='11713' x='87701' y='52084'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='6771' id='9' mode='compact' param='[Parameters].[Indicator1 Parameter (copy)]' type='paramctrl' w='11713' x='87701' y='58855'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='6771' id='10' mode='compact' param='[Parameters].[Parameter 2]' type='paramctrl' w='11713' x='87701' y='65626'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='EXAMPLE'>
      <style />
      <size maxheight='800' maxwidth='1200' minheight='800' minwidth='1200' sizing-mode='fixed' />
      <zones />
    </dashboard>
    <dashboard name='EXPLORE TRENDS'>
      <style />
      <size maxheight='800' maxwidth='1200' minheight='800' minwidth='1200' sizing-mode='fixed' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='32' param='horz' type='layout-flow' w='98666' x='667' y='1000'>
            <zone h='98000' id='30' type='layout-basic' w='98666' x='667' y='1000'>
              <zone h='98000' id='23' param='horz' type='layout-flow' w='96000' x='3333' y='1000'>
                <zone h='98000' id='21' type='layout-basic' w='96000' x='3333' y='1000'>
                  <zone h='88500' id='5' param='horz' type='layout-flow' w='96000' x='3333' y='10500'>
                    <zone h='88500' id='3' type='layout-basic' w='96000' x='3333' y='10500'>
                      <zone h='80250' id='7' name='Explore Bubble' w='93407' x='3333' y='10500'>
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                      <zone h='21124' id='8' leg-item-layout='grid' name='Explore Bubble' pane-specification-id='5' param='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]' type='size' w='0' x='99333' y='77876'>
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                      <zone h='67376' id='25' type='empty' w='2593' x='96740' y='10500' />
                      <zone h='8250' id='26' type='empty' w='93407' x='3333' y='90750'>
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                    </zone>
                  </zone>
                  <zone h='9500' id='12' type='empty' w='4542' x='46792' y='1000'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone forceUpdate='true' h='9500' id='13' type='text' w='23675' x='3333' y='1000'>
                    <formatted-text>
                      <run fontcolor='#000000' fontname='Tableau Bold' fontsize='22'>EXPLORE TRENDS</run>
                    </formatted-text>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone custom-title='true' h='9500' id='10' mode='compact' param='[Parameters].[Parameter 1]' type='paramctrl' w='12083' x='51334' y='1000'>
                    <formatted-text>
                      <run>X - Axis</run>
                    </formatted-text>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone custom-title='true' h='9500' id='11' mode='compact' param='[Parameters].[Indicator1 Parameter (copy)]' type='paramctrl' w='11583' x='63417' y='1000'>
                    <formatted-text>
                      <run>Y - Axis</run>
                    </formatted-text>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone custom-title='true' h='9500' id='14' mode='compact' param='[Parameters].[Parameter 2]' type='paramctrl' w='12163' x='84577' y='1000'>
                    <formatted-text>
                      <run fontalignment='1'>Geography</run>
                    </formatted-text>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='9500' id='16' type='empty' w='2667' x='75000' y='1000'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='9500' id='27' type='empty' w='2593' x='96740' y='1000'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='9500' id='28' type='text' w='19784' x='27008' y='1000'>
                    <formatted-text>
                      <run>Select two metrics and a geography to compare them over time.</run>
                    </formatted-text>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone fixed-size='160' h='9500' id='31' is-fixed='true' param='vert' type='layout-flow' w='6910' x='77667' y='1000'>
                    <zone custom-title='true' h='6500' id='33' mode='compact' param='[Parameters].[Parameter 4]' type='paramctrl' w='6910' x='77667' y='1000'>
                      <formatted-text>
                        <run>Year</run>
                      </formatted-text>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                  </zone>
                </zone>
              </zone>
              <zone h='98000' id='29' type='empty' w='2666' x='667' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
        <zone h='7875' id='17' name='Label1' show-title='false' w='29333' x='58750' y='86000' />
      </zones>
    </dashboard>
    <dashboard name='SLICE'>
      <style />
      <size maxheight='800' maxwidth='1200' minheight='800' minwidth='1200' sizing-mode='fixed' />
      <zones>
        <zone h='100000' id='5' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='29' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='26' param='horz' type='layout-flow' w='100000' x='0' y='0'>
              <zone h='100000' id='24' type='layout-basic' w='100000' x='0' y='0'>
                <zone h='85846' id='9' param='horz' type='layout-flow' w='93610' x='3000' y='9654'>
                  <zone h='85846' id='7' type='layout-basic' w='93610' x='3000' y='9654'>
                    <zone h='19945' id='14' name='Slice Histogram' w='18151' x='61580' y='17032'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='54747' id='17' name='SliceDistrict' w='24072' x='72538' y='40753'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='54747' id='19' name='SliceNeigborhood' w='27969' x='41833' y='40753'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='54747' id='21' type='empty' w='2736' x='69802' y='40753'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='3776' id='22' type='empty' w='54777' x='41833' y='36977'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='19945' id='23' name='SliceAnnual' w='14287' x='82323' y='17032'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='19945' id='27' type='empty' w='2592' x='79731' y='17032'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='10093' id='31' name='SliceAvg' w='17155' x='41833' y='17032'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='9852' id='32' name='SliceMed' w='17155' x='41833' y='27125'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='19945' id='33' type='empty' w='2592' x='58988' y='17032'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='7378' id='38' name='Label0' show-title='false' w='54777' x='41833' y='9654'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='85846' id='42' name='MapSlice' show-title='false' w='38833' x='3000' y='9654'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                  </zone>
                </zone>
                <zone h='9154' id='13' type='empty' w='22667' x='33333' y='500'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone custom-title='true' h='9154' id='18' mode='compact' param='[Parameters].[Indicator2 Parameter (copy)]' type='paramctrl' w='17110' x='79500' y='500'>
                  <formatted-text>
                    <run>Metric</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='99000' id='20' type='empty' w='3057' x='96610' y='500'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone fixed-size='160' h='9154' id='28' is-fixed='true' param='vert' type='layout-flow' w='23500' x='56000' y='500'>
                  <zone custom-title='true' h='6500' id='30' mode='compact' param='[Parameters].[Parameter 4]' type='paramctrl' w='23500' x='56000' y='500'>
                    <formatted-text>
                      <run>Year</run>
                    </formatted-text>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                </zone>
                <zone forceUpdate='true' h='9154' id='37' type='text' w='12250' x='333' y='500'>
                  <formatted-text>
                    <run fontalignment='1' fontcolor='#000000' fontname='Tableau Bold' fontsize='22'>SLICE</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone forceUpdate='true' h='9154' id='39' type='text' w='20750' x='12583' y='500'>
                  <formatted-text>
                    <run>Select a metric, interact with the charts, and explore the data below.</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='4000' id='40' type='empty' w='96277' x='333' y='95500'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='85846' id='41' type='empty' w='2667' x='333' y='9654'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='dashboard' name='SLICE'>
      <viewpoints>
        <viewpoint name='Label0'>
          <zoom type='entire-view' />
          <selection-collection>
            <tuple-selection>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields />
                    <y-fields />
                  </pane-descriptor>
                  <columns>
                    <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 2 Label (copy):nk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>&quot;Percent Own&quot;</value>
                </tuple>
              </tuple-reference>
            </tuple-selection>
          </selection-collection>
        </viewpoint>
        <viewpoint name='MapSlice'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Slice Histogram'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='SliceAnnual'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='SliceAvg'>
          <zoom type='fit-width' />
        </viewpoint>
        <viewpoint name='SliceDistrict' />
        <viewpoint name='SliceMed'>
          <zoom type='fit-width' />
        </viewpoint>
        <viewpoint name='SliceNeigborhood' />
      </viewpoints>
      <active id='30' />
    </window>
    <window class='worksheet' name='MapSlice'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.004akfr0ztvque1dvtnym0ol9g6i].[avg:Indicator 0 (copy):qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='CompareSlice1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]</field>
            <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='CompareSlice2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Calculation_1115766813408124936:nk]</field>
            <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='dashboard' name='COMPARE'>
      <viewpoints>
        <viewpoint name='BlockGroup'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Compare Header'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Compare Narrative'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='CompareHistogram1'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='CompareHistogram2'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='CompareSlice1'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='CompareSlice2'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='CompareSummary1'>
          <zoom type='fit-width' />
        </viewpoint>
        <viewpoint name='CompareSummary2'>
          <zoom type='fit-width' />
        </viewpoint>
        <viewpoint name='Label1'>
          <zoom type='fit-width' />
        </viewpoint>
        <viewpoint name='Label2'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='24' />
    </window>
    <window class='dashboard' name='EXPLORE TRENDS'>
      <viewpoints>
        <viewpoint name='Explore Bubble'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Label1'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='7' />
    </window>
    <window class='dashboard' name='EXAMPLE'>
      <viewpoints />
      <active id='-1' />
    </window>
    <window class='worksheet' maximized='true' name='Explore Bubble (2)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='100'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='compact' param='[Parameters].[Indicator1 Parameter (copy)]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 2]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='dashboard' name='Dashboard 5'>
      <viewpoints>
        <viewpoint name='Explore Bubble (2)'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='1' />
    </window>
    <window class='worksheet' hidden='true' name='BlockGroup'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='compact' param='[Parameters].[Indicator1 Parameter (copy)]' type='parameter' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' hidden='true' name='Compare Header'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' hidden='true' name='Compare Narrative'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' hidden='true' name='CompareHistogram1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='compact' param='[Parameters].[Indicator1 Parameter (copy)]' type='parameter' />
            <card pane-specification-id='1' param='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349150721:qk]' type='color' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' hidden='true' name='CompareHistogram2'>
      <cards>
        <edge name='left'>
          <strip size='216'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='compact' param='[Parameters].[Indicator1 Parameter (copy)]' type='parameter' />
            <card pane-specification-id='1' param='[federated.004akfr0ztvque1dvtnym0ol9g6i].[usr:Calculation_1115766813349253122:qk]' type='color' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' hidden='true' name='CompareSummary1'>
      <cards>
        <edge name='left'>
          <strip size='245'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' hidden='true' name='CompareSummary2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' hidden='true' name='Explore Bubble'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='100'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='compact' param='[Parameters].[Indicator1 Parameter (copy)]' type='parameter' />
            <card pane-specification-id='5' param='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Year:nk]' type='size' />
            <card pane-specification-id='6' param='[federated.004akfr0ztvque1dvtnym0ol9g6i].[none:Indicator 1 (copy):nk]' type='color' />
            <card mode='compact' param='[Parameters].[Parameter 2]' type='parameter' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' hidden='true' name='Label0'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' hidden='true' name='Label1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' hidden='true' name='Label2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' hidden='true' name='Slice Histogram'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='compact' param='[Parameters].[Indicator1 Parameter (copy)]' type='parameter' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' hidden='true' name='SliceAnnual'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='compact' param='[Parameters].[Indicator1 Parameter (copy)]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 2]' type='parameter' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' hidden='true' name='SliceAvg'>
      <cards>
        <edge name='left'>
          <strip size='242'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' hidden='true' name='SliceDistrict'>
      <cards>
        <edge name='left'>
          <strip size='212'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='compact' param='[Parameters].[Indicator1 Parameter (copy)]' type='parameter' />
            <card mode='compact' param='[Parameters].[Indicator2 Parameter (copy)]' type='parameter' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' hidden='true' name='SliceMed'>
      <cards>
        <edge name='left'>
          <strip size='290'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' hidden='true' name='SliceNeigborhood'>
      <cards>
        <edge name='left'>
          <strip size='212'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='compact' param='[Parameters].[Indicator1 Parameter (copy)]' type='parameter' />
            <card mode='compact' param='[Parameters].[Indicator2 Parameter (copy)]' type='parameter' />
          </strip>
        </edge>
      </cards>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='384' name='COMPARE' width='384'>
      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
      COX/A0yQjxtZhbI3AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='384' name='CompareSlice1' width='384'>
      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
      4J0AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='384' name='CompareSlice2' width='384'>
      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
    </thumbnail>
    <thumbnail height='384' name='Dashboard 5' width='384'>
      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
      1W/1msrNy1KVHUwUoIpXqquUylaViz/oJyopS3Xx9SqwXKGmj8rKyVbdA1pq65r6NtH+/P6g
      sWrbH7+rU9cTVXe/JvnGfjwySfXq5KNdnr9mixrWv5fOP1OJoh1yCkiIh1w4+SfJ1jUJ/uQ9
      xq86qC1v1awpy+f/TlxyGgCzf57G+ODD1ChtBYDB/ZM9cXfvAGBkZAJkY2igKTf429W2GrXr
      cAdLAMyMNG3at2/P5QPbWbhmGy6Vq1POsQTZGWnadbp2CmL9jGGUvGOCf2AQC9ft09YZGlDg
      ip6za2V8fHwAiL11nQuXo/7DJyNeRkUmAXz02UdM/2m6rochBCNHjmDXkinM3dRNW2Zuas2d
      5GTtcmJCGrkYYW5jDUBAz95UbxFAw4YN+W3KOM7HpBXY7sM+HDiU7mmZoAywM9f8Z2hlbsPt
      hLsAvP5Ob95/PYgyFukUK1cD27JVae7lwhcbNuFwx4xNs0Mw6z2QzH/oo12HTtSu3wyADQt/
      JmTKb0//YYiXms5nATk4uTJ+yjQGBg9k3OgRlLaxpkrdpoSGhuaL14LaABD0Wm/C9x9g57YN
      eNZwA+DVD77Eu0YlACysHfj1t9mUsCwyuU28YI7/Gcq28wn0+7intiwqJpJ61aprlz3cq2CU
      nUx0tOZC8NkjB7ibrki6do4hX499Yh9fdO9KtWrVqFa9KjGpmou816KvUauWBxbGMG5oP954
      J1jbvn2HTpgamXLh1j32rp2HVanKtGpc7R/7mDFtPA0aNKBBgwby5S8eSecJYNaClZzcsZqj
      p09w9OodypWx5/qZI/Tp00cbZvYVSYmOxtHVk/HDetGpdQs+HjKZJQt+wxCo4u5FaXs7ACZO
      /42IfZu5m5aj2x0TL7RvvhnBWz17aJcXLJiHX4/efNDjVeo29GHa9+PZvGoRt1LzALh0+gTd
      u3Tk+J1MNm5ajY2V+VP3uX7VQlLNKrBi3hx8GjbAs25NbV1g105MGv4FBgaGGBgaMW/tHgKC
      gv5xe5Uq18DPzw8/Pz8a1q/91OMRLz+dJ4DSJWw4cOQoKclJLJ39M0cuXCczM5XIyEgiIyOx
      cKiKfUYE6w+dob2/Hwt/ncbt5FTOHtzEiTgT6lQuqd1Wxx59qGp+m3Ezl+pwj8SL6mbkdU6c
      PAfAsW2hzFocys7dmvPs+zcu4/3g0Xw1ego7t4Rx99ph3unVH4Czp45z4ep1stNT6NqxPedu
      pDGob28AMtOS2LFjJ2kPZnKyb9dO7iQk5VuOvZdMRuJtWjVvRXaJCixfvZYBH77KrLnzwLAY
      lgYpLA1do11n8W+zsCn+4N/+gX27uBV7T7t89tRxXKp4EhwcTHBwMK918n/2H5h48el6FlCT
      tkHqzLnz6vLZk6qLf5sC9b+t3KGCWngqQH05bKrq1eXBTIcJc1cqn3pV1NDJC9X29WvVlYvn
      VSkbK229r6+v+uqrr9RXX30ls4AkJCQk/hY6PwLYtymUmtVrcPJaFN0+G8bwz3pq65zcfald
      KonQ7ccByMnNwtj4wU0vFmamKKU5BN8YupxrcWk0866jrd+9ezdjxoxhzJgxhbQ3Qgjx4tB5
      AnAo6QDkERN1mUGDhtPIp7G2buDQgYwfM067fPHKReo18r2/ZEz9WtWIvKKZ2nb53Blee+MN
      Rn7/K9Uqli7EPRDi6RkaGGBqaqLrYQg9p/OpMis27eL68T1UdXdn0WxfJg3tC0DpKnVp4WZN
      v3V7tW23rlnG6JADDOobS7majbm2ZylRCZqJcAZAXORFevYZzNKFS/Bu2YqUdLkQLIoWQ0ND
      mvt44+nhjqmJCTGxsWza/ifRt27remhCDxncP99fsMLA4FHFz4Exdep5MXL4AD77+GMib2qm
      1TmWdcLGWHEpMv/zS+wcy/Dm66+RlnibxYuXkpkDFdyqkRITyd37N+m416pPzPXzxN57MG87
      JCSEkSNHFtI+CfFoLZv60qBunXxlmZlZzJq/gOSUFB2NSugrnR8BQA7HDh8gfP9+7Zc/wJ2b
      Udx5ROvEO7f4eeqUfGWRl87nWz598tDzGKgQ/4mhgQGeHu4Fys3MTHGvXo3wQ4d1MCqhz3R+
      DeAv3303UddDEOK5MjYxxtTk0ef9Lc2f/r4BIf6rIpMAhHjZZWVlExMb+8i6yJs3C3k0QkgC
      EKJQbdr+J5mZWfnKzl28SMTlKzoakdBnReAagBD6I/rWbWbNX4B79WpYmpsTGX2TiCvy5S90
      QxKAEIUsOSVFLviKIkFOAQkhhJ6SBCCEEHpKEoAQQugpSQBCCKGnJAEIIYSekgQghBB6ShKA
      EELoKUkAosjqN2wkoaGhhIaGMuOnSdRwddLWGZrbE7ZxMyt/++XBClZlWRkailtZW8pUqk5o
      aCifvfOGtvr7GQup4VY2XzuA2UtWaPsJDQ2lWsVStA56Vbu8aP4c2jd78J4KgEEhE+ndPVC7
      XKm2NyuX/c5fT/Tp9n5ftmzZQqeWD9b74quRfPha/vf4zlq0Au8albTLf4374ahTx5M/VoXS
      pFZlbbuxU3+lZ+eWT/+hCvEQSQCiyKrboAm2xnls3bYdx4p12bl7Gzb3b130aetHLWcnWnV7
      n3oVS2kKTazpGBiInbU5VnYlCPDvyHfjxlPSygyA1h38KWFnna8dQJsO/ly5cJytW7eydetW
      klIzca5UhXrVKrFl61ZuJSjWbt2Bt4eLdmxZyog+H/XSLnd+/U3KFjMh4/7yB5/2oWzpsrzf
      401tm3qNmuBe9cGXPUC7jv6UtrfTLlvZlcC/bVO2btmqHU9M9DVupBry/ZhRmu207crn3dux
      aUf4s/iYhT7T9TuBCyvkncAvXsxfs0VNHd5fAcq4dA2Vo/JUnYp2ClCT5oSq6eOGqJVbj6hR
      /d/RrGNXRWUppepVKaXcvLxVdtINtXLLUTVuwMcKUCejkpRPvSr52gEqKilLU/5Q3x/0H6pO
      blujXd55Lkb1fTdQu+xcu7nKzU5VFYqbKUDtOn5VDf7gdQWoEs51VGZmkurQsatKv3tNWRkX
      3J+/IiopS3Xx9dIuu3l5q+zk6AKfhUPZmioxPVMFNquvNh26oEZ/+YHOfz8SL37IEYAo0spU
      cMH3leZM+W4YCTcvcTkqEQytCApoTdjaMELXrSMgqMujVzYw4Jsx3/BJ8GAcLM3+sZ8fps29
      /xf3JsrbaMqsbEvg4+PDpwOG0rCSLYcOn9C2v35iNyci0/Fr15LiTrVo5F6GP9ZtAKBjpyBO
      7drC+vUbuKUcafOK11Pts5GF/UNHAJrxxN08w6hJs/ll6RpqO2Ty3bQ5T7VNIR5FngUkirTm
      ga/S7q3e3Lt+kTYtO5CUA3VeaYVLcSOatumMZRkXPBq3pKKDFVcf8QbQ43+GsvX8CAZ88u4/
      9rNs/mzOXo2B3Bzi7r+Yq2y1WqxcvZYSVsa8HeDH3lPXHlojh9A1a+jYvgMJNtFcOfQnl24l
      AdA5MIBcgxhChgeTFh9HoH8Qq7Yd+df7nJeVwg/fTwQjo3zjmfbdCAZ8/j4TBnxCambev96e
      EI8jRwCiSFs0dQJtO72JnbMbDWrXBCAoKIiT+/eRmquIvXGJiOhUOnVs/dhtjBw5go+DB2Jl
      8vjXnIbv38O6detYt3ETGfe/WyP278C9bkOu3kmlo3/bAuusXbWa5h3aExTgR2joKgCs7F1o
      4+NO+L4DgGJv+H78Azs+1V9aKjeTdRs3FhhPRsod7tzL5NrVyKfYmhCPJ0cAosjbu3EFXd+y
      ZNWiJSRlvUpAUABTB3Vj9rLNAORYOxHUKZBJq8/yqK/449tD2XZxBEG+FTUFBvytnQHT5ywh
      LUNzCNH7nc6aUgMD7ly/SOvWrdi9aw+/ZKTxcf8R2rWO7dnKLUrTta0TPl+8BkCrjl2Iu3iI
      vl+FAGBm50T3O1d5pY4LAG988iWvvNoTVBq+tRsBMHHuYkLSMog4uItBvyzGyMKB8PBwjIyM
      tOM5fvbBu7EL623d4uVXBF4KXzge9VL4UuWcsTLO5cr1Gzi7VsLO2pwTJ88AYGVjTxkHa27G
      JFGlsnO+9XIykom4fpvqVSvnK79w7jSWtvY4lS0DQHpKAhcuXQfAzMJK2z4vN5dr1y6TdP8l
      9gClyzlRyaUCEadOcCcpBZsSJXEpY8/JMw/ed+xe25Pb1yOIS0x9Rp9K0VatZi2ykuK5EhUN
      QE0PL2wtjDG2MOfYoXCS0zQvVilRqhzVXUqz98BpfF9pxLGDe8kxtKRBnZrs2qOZKVOmfAWq
      VKrIsSMHSUrJ07ZLSc+hoXdTzI0f/Hs/fuQgFrYlKVvCmqOnzgJQzqkSbq7lObRvJ2nZD8bY
      tGUHKpS0YMGSFQBUcK2GrXkep85e1Lap29CbmOvnKeZQjlL2xTWFKpe9u/ZQz7spZvf7Tk2M
      5/SlSBrWy//S+ONHDnIvJR0Ar0Y+XD97nLgkeYG8eAb0eRbQ0MkLVdjCnxWgFqzdopTKVX4N
      3BWgunzQX20NW6gatuuh4uPjVVJKqsrJzlLx8fHq7O5Vys3LR+Xl5qjY2FhtNPKspD7oP1Rl
      Z2Wq2NhYlZmVo/ZvW6usLYzvt89WUVFR6vadOJWZnqzeCmqpHcvP8zeqrMwsNXHoZwpQFWs3
      URnZWapV3WoKUHVbdVbp924r55LWOv8sJSQkXo6QawD3KQVRUTF8HTI8X/mBjfOxt7en5xfD
      uX1mJ/b29tTw7QQoctNuU7JkSW3sP34ZgHO7NlGyZEnKOrlRunYLunXwud8+BicnJ0o7OjBp
      7gbeeru7phMTW/wDXuGXaTMIDAoA4OqJfUz9bQ3ffTcKMGTUt9/w09hvuB4rf/npgpGBIVam
      8uJ28XKRawAPmT9vOu9+Ooj29WsWqDM0MMDA8G9njo3M8PHx0fyM4vD+vZqf7zdLSYknIzsX
      IyNTIBsDI1O8vb0p5+xKx7ZNWDxxEACNWrbHKuESIyf8xId9TlK9vB3nbiTy7fAh9Iw4zaQp
      P1C/rDHdJ898fjsvHsnY0Ih+vkG8WssbCxMzzt+5wehtSzhx66quhybEfyZHAA9JT7zFuB9n
      ERLy9b9qb2hqw6QJE5g0aRLfTxiP/f0/EJ09G7F1y1YuXblGxtVDLFi7/X57W8aNG8e3o0fh
      aJrO7vCjAAQFBrBh/Vru3rrArmPX6dSxAwCJtyMYPX4a/fr0YUzIIBLTHzHPUTxX/XyDeNur
      BRYmmvsIqjmWZ3rnTyllbfeENYUo+iQB/M3MH8ZSwbsjbbyqP7FtbnocDRo3pkGDBjRo7M2N
      +2dnEm5GsvfkRcrYmvJF749Juf/FnZseh4+PD5VdXRg9YzUzfxoHmBLk35FuHw1GqTxaebkR
      1Mlf28fiJYsgN4VFc1Y/j90V/8DIwJCutbwLlFubWdCxegMdjEi/2DuWwtPTE09PT2pWr4aJ
      sebryszCSlv+V1iYPTiZ0aCxN17uNQpsz6miG6+88gq13R9M3ihWvCSBnToT2KEdxSwe3Czo
      7FqJ2rUenAmwsrHHzdU53/acXStRvpRjvuVSjg4AVKpaE8f7j/hwcnHN1w6guntt7Kwsnvoz
      edYkAfxNeuJtxv80ix4933xiWwMjM9q1a4efnx9+fn4Ut9X8Qu/duUlI/08I+XEeq7dtw71a
      xfvtTWnatCktW7ehbYsmJCUnU7VxK1zt0rG3MMbAwJBK9dtQt5kf5WxNAchTCgz+196dx8d0
      vQ8c/2SRRVaJ2EMIidj3NUkpat9p+dXaaqulrZZS2zd8LUWpqlKK0qral9gjiS1ChERWkcSa
      2AUhiZDt/P4IQ0h826qZpPO8X6/zMvfcM2eee83Mk3vvmXMV2a9vk0UBwuFvNAAAIABJREFU
      zIqZULxY/r8gLlHcUsvR6J+eA4dxLPAIO3bs4EjQCS5fOkftKmVwrFGf0JCT+Pr6akpdt9wv
      57JVmxFw8ABHjx2ghOnTr7fhk+ZwLi6Gn39aTEBQBC0bVMXZrSlnYs8yd8YU5i76mdjTYVSt
      YA/AjAVLCAuPoHOTWgB0eHsIS36YmSe+GQuWMO7DgXmWJ300GIAl6/cxqNdbAHyzcGmedgD7
      jp6kbcMXk5S26XUCuHgmiojHw/VOR4ZxKeEaAEu/m8WhwGOERZzWtL1x5RJHT4Zplh/cv0fA
      8UjGjRvHmDFjGDNmDBXK2HM14RLBpyIAmDF2BPN/8eY/kyfDw3sEHI9i6tSpTBr/NamXYxk0
      Yiw1nCvz8+LF3H38y84LIQfZ6HOMWjVdAch4kMLBgwHIyR/tS8t4yJmbl/NdF3r5rJaj0U+B
      +71xdHTE3t6B+CQjOnd5i5cNwOjUuwdHdqwl7o4pndrm/s6iYk0PFk4ZxYAu7rjWqEnZ8o5E
      xCby37kLiDq0Cdcadajm6krIlUdMmzQWKHhQyLOeH0CfZ1kV3O5Jg/zrtUuvLwKvWfKN5vE3
      E7/SPE6/e52O7fJOtXtkzyaO7NmkWb4aH0Xr1q1f6DMy9nd2b3y6PHX8SM3j/NrHnl/E1jw1
      WfTv9vRXpylX42jdpvOf2BrxOkz3X8eSXiOwNH16uL43NoQD5yJ0GJX+sLErSUt3d+o0dset
      kg3jDx8Do1L5DsBIz4I+PXuwe+kkHG4Wo2v3HqzZdZSOHTsQH+TPBp/jAKTdSwLMaduqER93
      GUEOQEY6y1asYsW4p9OHv2xQyBPlKlXGw8MDgFL2tiS/rh3xmuh1AhDifwm/doEev06ni1sT
      ShS3JOTyWQ6ei6AQ/PGmF5xd6zH3229xqurCuYhjXEy4jmnlUpoBGLnzJWXSq11LUqxdad3Q
      ic/3+FDypik+K7ww/XAsFmbW3Ei++1zP5piZGHEzJUVTc/tuGmZW1prlZweFfLstON/4Wvfo
      Q033toABZcpVIG7va9gJr5EkgH+YgQFYWZiQkpZRKA7xxKu7kZrMihP7dB2GXgoN8qNtl3cB
      Yzb7BTDhyw+Yt/W4ZgDGs/r164mJkQmx1+6BUigDQ9o2r86FxLPU+aAV5sbwdCBdMok37tOo
      uhtHTuaeBm5Q05XLl/IO7/15/izGXTjHW4kp5GfNgm/5dNo8AFZv9/0nN10r9PoawD9tQHcX
      zuztT+LhgZzZ258B3V10HZIQRZqtXSk8PT3p3qsntapV5n5K7lC7/AZgdO/Tk+8mf46BgSEG
      hkb8tuMI3Xr0YPfWtaSYOvL7iiW0aN6cYZ98TvUqpflt9Rq+njmHtq3cadOpN+NHDefX1avz
      vP5fGRTyMlXcatG7d2969+5Oscd1TT1b07t3b9p6tnilvl9FoTkCGD5yOEt+XKLrMP62Tm9U
      5Mf/uGvmUCrjUJwf/+POneSH7D4kszcK8VddTbhEyiNjpk6dSk5ODr4bVzD9h1VYVXDRDMB4
      4rPz5ylukMr6bds1dWtXLWNIh7o8un+Ttm+247vv5rBl61YSLsRycMfvzJ3yFSWtf2Ld1p0Y
      ZKaz8qcZzP1pHZA7KOTyM4NC2jerTfQzg0KetEm5cOnpckQYaRcTAQgLOkLC1ZsAxESG0a5F
      I0aOHAk5D/Dd7M2xgEM0btuZxm3hQugx/A4ffT078X/R9VxAJR2rqDkLFqnzF8+r2dOnqDLW
      uXPdWFqXU8t+W69CT4Wqvbu2qbJ2xRWgerz9oToWdFwd8t+j6tWoqgDVd9iXqmUNZwUoc8uS
      avmqFcquuHGe13nddwTbsqi9uhf6/gtly6L2Op/vQ4oUKVLyKzo/BbTs9y1EHPQmNCqc0As3
      KV82dxzukt/WcnL3bzSo34CPRn1NSnoGparUY86kD+jZ7k0+Hv89635fhSHgUquh5r6qc5es
      Iv7oPu480O7ASXvb/OeJKaheCCF0TeengMrYWXM8JJS2b99n/YrFAFiUcaF2qQcMWLcLgEvx
      uVMi9+7amTXLF3E9JY3rwT6EJ/2X+tUcNH11GfgZrmbXGfHzeq1vx9FT16nnVvLF+tDrWo9F
      CPHXlChVlhad+mJla0fcqSBCD/ugD6M4dJ4ARo/5km0+RzBTGfTu+habd+zDqVJlSpavxsmQ
      UDKzsjF8dIe+vXpjb1WGqzGHNM9NuHIFc5vc+dVHjJ+CU9VqNG/09P6rHh4emjG6r9u3y8Jo
      07wCrpWfzhETeyGZb5eHveRZ4l/NAGq2cqVKg4qkJT8gZGck927c13VU4jnOtRsyZuE6zC2s
      AOjw7nCCfb1ZPHH4vz4J6DwBHPXZRk237WzdvYP+IydRo1JZNgUncubUIdr0eB+AoaOm8dXI
      YcQ/ysDY2ETzXHNTE5TK/QXt3m0b6TBkFK1a1mf9niMABAQEEBAQAOTeEOZ1unPvEa3e9ead
      zlVxcbIh7uI91u86q7nLlNAzBjBgdm/qtX/6c/8332vJso/XcCniig4DE88b/PVszZf/E03a
      dSfIZyuhh4rYwP6/SOfXAEo6lARyuJF4jnHjJtPMvTnxsfFUqlaHJ7OwnD1zFksLM+LOx9Go
      2ZO/6I1pXKc6Cedzr7qfi4nm7X79mDpvOdUrl9HFpvDgYRYrN59h/LzjrNx8Rr789VjNVq55
      vvwBzCxN6TWxk44iEvkxK25JRZda+a5zqd9My9Fon86PADb7HOZS2BFca9XijxUefDdxFFn3
      Evl1VyRrf1/BNt8Ahn88msmj+nMo/ArTvY4zbtQtytdszsUj60m8+wjIvU9qUkIcgz/7mvVr
      1tGyTVvNLJxCaFuVBhXzrS9fvQymFiY8SsvQckQiPxmP0nmU/gBT8+IvrEtJvq2DiLRL50cA
      bzSow/zFK7hx7Sp9u77F+r255/injX2P5Rv3UsrBnk8/6ot/UBRZ6Xdp2+oNUrKLEXp4J4NG
      TgRg9Y/T2B8WA8Bxv228O/wrzE10P9Wq0F9pyQ/yrc9IzyBTjgwLjZzsbA5uXf1CfXpqCkd3
      b8rnGf8uOj8CgCxOnTzOsaAgEq7eyrNmt/dGdj/XOvnmNRYvXJCnLuHsmTzLUREnXkegQvxp
      ITsjefO9lphZ5p1O+timUHKyc3QUlcjPhoXTAWjVcyCm5sW5FBvFb7PHcffmNR1H9voZPP7R
      14srDAzyqy6yvLy8mDp1qq7DEHqkUp3y9JrYifLVy/DoQQZBm0PZ/b0/2VmSAAojQyMjTEzN
      efhAf+67XQiOAIT4d7oUcYX57yzD1MKEzIdZ8pd/IZeTna1XX/4gCUCI104u+IrCSucXgYUQ
      QuiGHAEI8Vi7Hn0ZMeRdAG5cTeDX5Us5GhoNwIp1m7E3M9K0/f2XhQREXWHpvCkM6tmP+/n0
      8SDlDqtXLGPPwWNgUY4taxYz9pPBnL16T9NfVmYGQYf8Wbx8heZ3I671WzJh9Cgqli9J6r07
      /LxwPjv8j/DFpKm80aiuJoaw4ANMmZl3QIQQf4UcAQjxWCVnFxq7ObN//wGMbctz8NgJOr1R
      H4C3OnXlfGwYfn5++Pn5cSnxOlYl7OnerZNmfvcnfTSq7oyvnx/X7ip2+B2kZW0nKGZJl+7d
      sbU00/SXdDGOk2FRfDh2Cvu8f8cQqFSzBccD92OccZNFixYRcCKSdu3eAKBBkxYYZadpYgiL
      iNHuDhL/PrqeDlpb5XVPBy2l6JdhoyeqCP/tmuU5yzapoN2rFaAS72co90YuedpXbdhSqez7
      yv4lfRyKuaFGDe2usHVRGUqpRi6lNf319mioAOXgVEelZmSpDk2qqllL16nAHX/kG9/q7b5q
      0pgPdL6fpPx7ihwBCFGA3fv8qVmngWZ5/qKVmr++u3jkP30AgIWNHe7u7oz4aiJNnW04cTL8
      pa9z62IEJ+OTqFmnPm5VauAXcBiAJX944+vry/Txn2naDvnwC00ME0e++4pbKPSdXAMQogAl
      rIvz8Jmbhm9YvYLTF24ABoRFJ2BeuXa+zytXvQ5bvHdgZ2HMoG6dCYy8CLYvuz2oISWszHiY
      mkJG1kNsiueeJtrw688MGPQJ9WpV17Q8esCH9dv9AEiMk1NA4tXIEYAQz1K5/1jYluLLT4ez
      d5+fZtWxoCPs2rWLXbt2cuXO/TztnxUfdJBaDZpy4WYaXbq2/58v2WPo59QsbYjvgSD8Dh6k
      3+BhlLO2ZL/PLiJjzudpGxd/+nEMu4iIP19Aj0L8OXIEIMQzqjbxJDIyCqcqzsSfCmTc5G8e
      rzFgyS/rNCN1lvwwg8MxSWBYnEMREeQAfyyaRxK5v6K/eSmOdu3aEnD4CD89fMDH0/8g72/r
      DZi7ci3fGptTobQtXw4dQtyNZBIWzeb/enYmOi6WoyGncKnVgNOHNmqe9cGIsXR7+wMATgTu
      YcQXXlrYK+LfSqaCEOKxMuUr4lq1MgCp9+4QEhapWde0pSdmxk8/ExfPxXEjOY2mDetr6q5c
      PEdqliHl7CwJjcy9gXh5R2eqVqnAiaNBNGzRjFPBgaSmZ2n6Uzk5xERHcOvOPU0/hsXMaPfW
      W1SpWJ6Ei+fYv/8A6Y8yqV6zDqVLltC0S759k/AoOQ0k/j5JAEIIoafkGoAQQugpSQBCCKGn
      JAEIIYSekgQghBB6ShKAEELoKUkAQgihpyQBCCGEnpIEIIQQekoSgBBC6ClJAEIIoackAQgh
      hJ6SBCCEEHpKEoAQQugpSQBCCKGnJAEIIYSekgQghBB6ShKAEELoKUkAQgihpwpNAvh68vg/
      3dbWriQW5iavMRohhPj303kCaNimKwHHghk9agxHD++nTsUyAExZ8CvREeGEhoYSGhpK/RoV
      AZi9cA2+3ps4FhLJoD6dABgzazndW9QDwLFaPYJPBmJX3Fg3GySEEEWFKgCglRIQflY5l7NT
      q9auUuWq1VKOpe0UoLb6BytXB9M8bd1adFbHd21QhqCsSlZScbGnlYUxauL3a1Rvj4YKUwt1
      IChcdWxZ94XX8fLy0to2SZEiRUpRKDr/Mzk1NZ2WLRoDBlyNj9LUV6lgA9aOlCaZG7eSAGjt
      3px1W9aSA6QkXSIw6hp1alTSPGfitAWE7lrOnsBwLW+FEEIUPTpPAIP792TmtOl0a9OahXNn
      MMFrGilpBpw4Ecb0Wd/gUL4SJg9u0q1HX0xNbEhNvqV5btL9+xiZmAIwf/UmLI0zqVBhmGa9
      h4cHHh4eWt8mIYQoCnR+DeBmwlmGDe7H5l3eJGZYMt9rDJDOsAHv0LdvX1q1aML2E1cYOqAr
      GZmpmFvaap5rY1mc7MwMAEYN7M0qn0i8vh6uWR8QEMDMmTOZOXOmtjdLCCEKPZ0ngPYd2wOQ
      nfEQv33+2Ds4YFuqLNWdyjxtpBSZD7M5fjKErl27A2BmaY9nPSdiziQAYIABY0cOpmmvkXRv
      1UTr2yGEEEWNzk8Bte85hHlz5mBta0OTBo0YOvBdDIxM+XXTDm5fjuOhsRUVbQx4a8bn3EnL
      5vKoT9izbQMlHF1Z+e1kkh/lAJCjcshKT6X/O33w37mNyDYtOH/9jo63TgghCjFdjwJ6UpYs
      /eGFuspVXVQ15yov1NesXVdVrlT+L/Uvo4CkSJEiJW/R+RHAE7779r9Qd+FsXL5toyNllI8Q
      QrwqnV8DeGLz5m26DkEIIfRKoUkAQgghtEsSgBBC6ClJAEIIoackAQghhJ6SBCCEEHpKEoAQ
      QugpSQBCCKGnJAEIIYSekgQghBB6ShKAEELoKUkAQgihpyQBCCGEnpIEIIQQekoSgBBC6ClJ
      AEIIoackAQghhJ6SBCCEEHpKEoAQQugpSQBCCKGnJAEIIYSekgQghBB6ShKAEELoKUkAQgih
      pyQBCCGEnpIEIIQQekoSgBBC6ClJAEIIoackAQghhJ6SBCCEEHpKEoAQQuipQpMA5i/6/k+3
      tbUriYW5yWuMRggh/v10ngAatulKwLFgBvQbyNHD+6lTsczTlcXM8T0eze4tqzRVsxeuwdd7
      E8dCIhnUpxMAY2Ytp3uLegA4VqtH8MlA7Ioba3MzhBCiyNF5Avj+u/kM6d2BXft20Of9z7j7
      KEOzbsTY6cSGBGBiUgwAtxadaVWlGE09WtHS8y0mzZiLhTGYmpljbGQEphb8tvpXvD7/hDsP
      snS1SUIIUSToPAGkpqbTskVjwICr8VEk3rgDQEW3RgztXJtZC5Zp2rZ2b866LWvJAVKSLhEY
      dY06NSpp1k+ctoDQXcvZExiu5a0QQoiiR+fnSQb378nMadPp1qY1C+fOYILXNFLScvhp8Y+M
      Gv5/pGeX0LQ1NbEhNfmWZjnp/n2MTEwBmL96E5bGmVSoMEyz3sPDAw8PD+1tjBBCFCE6TwA3
      E84ybHA/1MqfScywZL7XGPaey8alBHh26Uc7u3I4Odfg/f69ychMxdzSVvNcG8viZGfmnjIa
      NbA37kMm4vX1cMbNWgJAQEAAAQEBAHh5eWl/44QQohDT+Smg9h3bA5Cd8RC/ff7YOzgQ7LeV
      9z8by5EjRzgREs69u0mER8dy/GQIXbt2B8DM0h7Pek7EnEkAwAADxo4cTNNeI+neqonOtkcI
      IYoKnR8BtO85hHlz5mBta0OTBo0YOvBdEs5dIOHcGQDsq6Zx+5YnJyOigDNcHvUJe7ZtoISj
      Kyu/nUzyoxwAclQOWemp9H+nD/47txHZpgXnr9/R4ZYJIUQhpwoAaLUsWfrDn25bs3ZdVblS
      +b/Uv5eXl9a3SYoUKVIKc9H5EcATvvv2/+m20ZEyykcIIV6Vzq8BPLF58zZdhyCEEHql0CQA
      IYQQ2iUJQAgh9JQkACGE0FOSAIQQRYA1F27epXl9Z81yQtJd6js7MOjTMdxNTmZ4n465ayrW
      JulK7jDyZl0GcyXmOADL1u5l4cyvND226NSf6xfCqFGvGcnJd7l7N7ckJyfTrG7l3H7v3uVu
      cjJXE88za/JozXMnzVpE6oOHZGdncSY8BJdKpfK81rZDpzX9PSlHAwOJOLqPYo/76D70M+Kj
      ArF4ZijO6ctJ3L17l6RbN9i5aS2uVSq8sB3mlvZs2uVPZlY2mRkPObRzLc06Dib5udeLPepN
      lWe27fbtm6z/bQn2VsVzYzwSIwlACFEUFMOuhC1GRkaaZRsbW4yMDDExMaVYMWMmTJ2CKVDM
      xAQbaysAjIxNsH78+ODhI/Tq3kvTY7duXTl5KIAMIyMsjR/h4Z47dYy7uzsRcVcwMTHlZmw4
      7u7uDP/ci48nzqJvm7o412+N12f/Rzv3RpSrUInZP/2GUTHjPK/1xdCeeHp6cuORCQumjMLT
      8w3efncQdtVa8kG/jmBqwfQpE1k45xvSnpm30sramv9+8TFde/TlgWU5DvrtxMok73b83wef
      Ubu8OVUrlce1Zj18gyMJP+yN5xueTP1+BY+un8HT05Meg0dhaGSEjZUJXTzc6dazHy6NOzP1
      qw8AsLCwlgQghCj6gvb7cNvUkff6diywza4d3pSs3ogGTvaAMV06dmLzdm8AlMoiKjqKqKjc
      8iA9d4qZR2n3iY6KYvuW1ZxOTKa8oxNZWVkYmpjTuFE90u8nsXLJAmLOXs3zWhfOxxIZGUlG
      ZjZXLp8jMjKCyxfP8Z8Z85g84xuGjRiN+e0Ylvy284U4E87FcyzwMAN69cbAwY2ubzbPsz4z
      K4sSDqWpU8uFhHNnmP7fmaSnJRMREUnilWtkZ6YRGRlJTPyFx8/I5kxUNIGH97P3SBAVKjpp
      +pIEIIQo+gweMmXGHMZ7eWFaQJPky5EcCr1Ip04dqVTXA9dSOez0OQiAsWV5MjMzyczMJCsr
      nWqP56As5VSNSZMmsXGnL7VsM/Dee5hLkQGMmjSHSbMXc/PmLZbO+y/mf/IXVb8sns0NVYqf
      Zk9k7NjRZLykbcaDJCLP3aKco2Oe+vUrvmerfygbd/hzNfESo97r8z9e1YTRkyaycOkKPh/Y
      lTVrNmnWSAIQQhQBOSilMDIwyF00NsbQIG8L79VLuW1ekaF9Cj4K2LbNmy5dO9K5c2eCfbdz
      6/H5l6zUq9haWWFra4uNpR3xdx+/jIkZrTt0o2fbZrzl4cmF67krFs76D+VKO9Bn4DC6DvqS
      99/t+ec2IyONed8vITE0kC1+IS9va2KFS0V7bl+7lqf60YMUPhrUl1JlyjL1uxXMXfYHtSs7
      vKQjA6rWacyID99jyseD2egbqFkjCUAIUQTcJeHqPfp26gzAmz06YZ6dyo1rt582yUpn6ow5
      jBg1ssBedmzZRoNWHRjQqzNbt+Y9/ZL95IGRIYaPvxmvxkXSvm1rdgdGsnTlMqwtzXFr0oYB
      vbtilJONv48fiTduYV68oOOOFz14mEZqamqB6y2tralU2Znvf1yKzaNrbPcPyrO+69tD8WzW
      kPt3ktjuvZOHOUaYmRUroDeAR3z8dg/Gf7OQCbPnUc+timaNJAAhRJEw/qsxDBr3DbeTkvBZ
      u5Q5E78iMSULpVTuzDbAtt+WciMthycVKisHlNL0kRhzlPDL2TSr58SWHT65bRQYW5YjPT2d
      1NRUUlNTadHABaUUKkeR9TCNt7t34DYO7Nu5GTMjxTc/riIlLZW7d65jfCeeVau9X3gtgJzn
      lnNfT2HwYrUmllU793M+PpZW9Rzp1K4Tt9Mz8/RtbuXA7gNHefAgjfMxQWxbPIcTMbnXILJz
      nm77k/5UjkIBsyd8xk8b9uPr74+rUylysrIpNJPBve4ik8FJkVL0i629g2rUuLGqVL7U3+7D
      rmQp5Viu7CvGYqgqV6mqnCqW08l+MDYxVy4urqpUSZtX6wchhCgikm/f4uTtW/+74UvcSbrJ
      q08Un8OF82dfuZe/Kysjnbi42FfuR04BCSGEnpIjACGEeI2aVKtPx4ZtsC5uxemEWDYEbicl
      veCLwNokCUAIIV6TNnU9GdnpPQweD191LuNE/Sq1Gb3Si0eZL/sVgHbIKSAhhHhN3n2jt+bL
      /4kKJcvRqlZLHUWUlyQAIYR4DYqbmmNnaZvvuvL2ZbUcTf4kAQghxGvw4FE6d1KT81135fa1
      fOu1TRKAEEK8JmsObsr9odozLidd5WBUYAHP0C65CCyEEK+Jf0QAKempmlFA0QmxbAzcXigu
      AIMkACGEeK2C408RHH9K12HkS04BCSGEnpIEIIQQekoSgBBC6KlCkwDmL/r+hTpTU3Mszc1f
      qLe1K4mFuYk2whJCiH8tnSeAhm26EnAsmAH9BnL08H7qVCwD5vYcOHqcQwd82LXvAMf8d1PS
      MjcRzF64Bl/vTRwLiWRQn04AjJm1nO4t6gHgWK0ewScDsSsu17eFEOKldH0/gIDws8q5nJ1a
      tXaVKletlnIsbacwNFNVnJ7Osz1lzq/q04EdlFuLzur4rg3KEJRVyUoqLva0sjBGTfx+jert
      0VBhaqEOBIWrji3rvvA6cj8AKVKkSMlbdH4EkJqaTssWjQEDrsZHkXjjDuQ85PzF3DvcVKxa
      izc963IiJJrW7s1Zt2UtOUBK0iUCo65Rp0YlTV8Tpy0gdNdy9gSG62ZjhBCiCNF5Ahjcvyee
      XYfSrU0HFs6dgZWFGQC1PDoTExvP+dgwju1eSdDpRExNbEhNfnoziKT79zEyyb0X5/zVmxj9
      f55MnrZQJ9shhBBFjc4TwM2Eswwb3I/Nu7xJzLBkvtcYAKICduHmWo0yjpVxbNqD4e90ICMz
      FfNnJleysSxO9uNf1I0a2JtVPpF4fT1cJ9shhBBFjc4TQPuO7QHIzniI3z5/7B0csLR+Oson
      6Woi6zfuwsW5OsdPhtC1a3cAzCzt8aznRMyZBAAMMGDsyME07TWS7q2a6GZjhBCiCNH5UJn2
      PYcwb84crG1taNKgEUMHvotj9QZsXrWA09HhZGQbUq+WC726deLM+ZtcHvUJe7ZtoISjKyu/
      nUzyoxwAclQOWemp9H+nD/47txHZpgXnr7/6nT+FEOJfS9ejgJ6UJUt/yHt12thYVXeroWq6
      VVfGhnnb1qxdV1WuVP4v9S+jgKRIkSIlb9H5EcATvvv251nOycriTMzpfNtGR8ooHyGEeFWF
      JgFs3rztH+/Tw8MDDw+Pf7xfIYT4NzBQz9+t4MmK5+5jWdQVsJlCCKG/Css1AG0VDw8P5eHh
      ofM4JLZ/tkyYMEHnMUhsElthKH8lNp0PAxVCCKEbheYagLZcunRJ1yEUSGL7+wICAnQdQoEk
      tr9HYvt7/kpsenMNQAghRF5yCkgIIfSUJAAhhNBTepkASpSwK/QbLnc9+3sMjYtRtkxJXYdR
      qNmXLI1FcbM8deYWltiXsNJRRE/lF1thV7psOYwL+xdKQfRpGGivISNVzJlo5ePjo87Exqnh
      /XooQE1Z8KuKjghXoaGhKjQ0VNWvUVF7cRUzV77Ho9XuLas0dbMXrlEnAg6qiNOxalCfTrrb
      Z/nE5ht8RoWEhKjQ0FB1MtBHJ3GZl3VTlxMTNP9fS36YqQBVrWYLFRMVpXbu9VPHDuxRVsVN
      tB5b274fqPPxsZrYPhjUS/fvscfFwrqM2uN/VPnv262CToSoQT3bKED17P+xOhMRrgKOh6ol
      c6fo5P+0oNgKw34b+tl/NK8fGhqirl6/qZrVrazMLe3V/oCTat/OHSrqdLSq6+pUeGIr4DPy
      QtGnBFChkrMyMX7yhquiLsUGKUBt9Q9Wrg6mOolpxMR56sfFS5TfzjUKKPCuZ4UhNoxtVUzo
      IZ3/P9b17K7W/jjthfp1PsdVlya1FaBGz1iipnw6SOuxfT75O/VR3zYv1OvyPfakTF+wWn0+
      tM/TOkNDZWhqp2LjYlUZKwsFJmrHkVOqVW2nQhFbYdlvzxb7sjVUTNgxZQpq+IRv1dyvRihA
      NWrXTx3YtKLQxFbQZ+T5UlQPXP6Wy5fOkZEFxsVMeWfIICKCgwGoUsEGrB0p7aDdUwcV3Rox
      tHNtZi1Ypqn7X3c902VspZyrkpx0G2dnZ6wtLbQe0xMubtW4kZwEta96AAAEoElEQVRKlSpV
      MDF+MpLZlIaVTdgZHAnApvV/0KxVKx3E5kLKw2ycKjrmqdfVe+xZnd5qhLdfEB4eHlStXBFy
      cqheryFnju/lekoakMGm9Vto1sqzUMQGhWO/PWvU1xNYPG8mj4DW7s34Y8s6AE76bqZs3RaF
      Jrb8PyMv0qsEAPDjmp1cv3mTqV+8wxcTpwHmnDgRxvRZ37DeezdH/XZqbkD/epnw0+IfGTV8
      OOnZT2tfdtcz7ck/tmLZOVy+l82sWbMJCA7ll7n/1XJcue5du0F510bMnfcd0bGxfNSvB2BJ
      VtptTZvb9+9haKrt/QZnI6PoOWgEC5euIC4mkuY1q6G799izbKhQ3pGff/6JDh06ssHbhy+H
      9MSsmHXe91vKfYy1vt/yj61w7LdnoixVlb5t3Vi+dgcAZiaWpCY/ec9lcvfx1PSFIbb8PyP5
      0KdTQJpiaKza9xqgTocdUcWeW/f1N0vVV8Pffu0x9PlovIoPC1ITJkxQU+f+qM7GnFLv9++t
      Roz7Rn02uIum3c8bfVTzuk5a3T8FxZa3XTG152ikauxWSqf/l5YlKqpL58MVmKu408c19eVr
      tlA+W1fqNLZm7furXesWvVCvrffY8+V0XJgyfPzYoqSbigveq2o2ba+2/PKtps27Iyao8Z8P
      LhSxFZb9pnn9OUvV6I+enqbauCdQ1a1k9XjZUEXFxRSa2J4tTz8jL67TqyOA0qXL5T7IycJn
      y0YeWpSjfKmyVHcq87SRUmQ+zM6/g39QsN9W3v9sLEeOHOFESDj37iYRHh370rueaUtBsbnV
      csNGM0JDYUAOmelKq7EBNG7aQHPoqlQOWQ9zgHRik0xxr+0EQNcu3Th1/JjWY2vWtMEzS4rM
      hznY6ug99rwTsWl0alEHAFNjE1LTHxEXHU6dlu2xMi8G5O63sONBhSK2wrLfAMztyzKkWwuW
      rdqiqQs6eYoujz+rbk3bk3L+VKGJLf/PSD706Qjgh9/3qKDDB9SqVStVUEiY+m7aV6pEWSd1
      /GSk2r1ts9qyc586GeCr7Cy0e9HJvmpDtc979eNlY7Vyx361Z9sGFRQSrsZ9qLu/eJ6PrXmb
      Lio64rTasO4PFRB8Sv32/XSdxDR89FQVFRaq/lizRkXFxqkP3+mmAFXXo5OKi49Vv6z8VcVE
      HFWlrMy1Htuvm33VsYP+au26Dep0bIxq6lalULzHAOXs1kRFR0epVb+sUGFh0apXe3cFqPfG
      TFenjgeqrbt81O7ff9B6XAXFVlj2G6A+nTJfTf18aJ46y5IV1amYOLXqlxUqLi5GvdHAtdDE
      VtBn5IWiTwkAUPalyqi6deuq0g62eeorV3VR1Zyr6Dy+J+Xv3PVMG8XQ2ES5VndTFcqX0Wkc
      xa1sVM2aNVUJG8s89bb2Dqphw/rKzMRYZ7E5lC2vari5KdNieWMoDO8xUzNL1ahRY+Vgn/f9
      X7Gys6pTs3qhjK0w7LeCSjFTc9WgYUNVsoS1zmN5vhT0GXm2yFxAQgihp/TqGoAQQoinChwg
      WsCBgRBCiH8JOQIQQgg9JQlACCH0lCQAIYTQU5IAhBBCT0kCEEIIPfX/uABjmQG0gXwAAAAA
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='384' name='EXPLORE TRENDS' width='384'>
      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
      IlKo/wNxVGYsSZOpQwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='384' name='Explore Bubble (2)' width='384'>
      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
      RK5CYII=
    </thumbnail>
    <thumbnail height='384' name='MapSlice' width='384'>
      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
      GXtozxKHSbCT+XAzm/0naEgF9JqHtywDRkSi4rS/nReM98M68Af4G0l0RpSSWHh7DImRPbxc
      ed2ydtweos1Bw+4s3mep/OqklbLrl/JoFHgK/h1PdG4NOkwYAERnSEqBiUsjSCQtPH240WwA
      n0h2r0NPZ+csylgIITAxPXIGRzPYOBtFdMaEELATJhbfnWwuEx2WnaHfBpzW7B+vAIjOgRAC
      MTuC+bezyO+U2+4OpfMxDHsVBgVXARGdI611s4ctvRmO43SeBG6wLAuGwfNfBgARfavU6/We
      VwDBzuawYwAQEYUUI5CIKKQYAEREIcUAICIKKQYAEVFIMQCIiEKKAUBEFFIMACKikGIAEBGF
      FAOAiCikGABERCHFACAiCikGABFRSDEAiIhCigFARBRSDAAiopBiABARhRQDgIgopBgAREQh
      xQAgIgopBgARUUgxAIiIQooBQEQUUgwAIqKQYgAQEYUUA4CIKKQYAEREIcUAICIKKQYAEVFI
      MQCIiEKKAUBEFFIMACKikGIAEBGFFAOAiCikGABERCHFACAiCikGABFRSDEAiIhC6v9UmLDi
      A1D14wAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='384' name='SLICE' width='384'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
